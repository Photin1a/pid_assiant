# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from photinia_msgs/PIDParams_srvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIDParams_srvRequest(genpy.Message):
  _md5sum = "7a2c7c5eae38f45d6993a091f91254ea"
  _type = "photinia_msgs/PIDParams_srvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string time
float64 test_distance
float64 max_linear
float64 max_w
float64 angle_p
float64 angle_i
float64 angle_d
float64 linear_p
float64 linear_i
float64 linear_d
"""
  __slots__ = ['time','test_distance','max_linear','max_w','angle_p','angle_i','angle_d','linear_p','linear_i','linear_d']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,test_distance,max_linear,max_w,angle_p,angle_i,angle_d,linear_p,linear_i,linear_d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIDParams_srvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = ''
      if self.test_distance is None:
        self.test_distance = 0.
      if self.max_linear is None:
        self.max_linear = 0.
      if self.max_w is None:
        self.max_w = 0.
      if self.angle_p is None:
        self.angle_p = 0.
      if self.angle_i is None:
        self.angle_i = 0.
      if self.angle_d is None:
        self.angle_d = 0.
      if self.linear_p is None:
        self.linear_p = 0.
      if self.linear_i is None:
        self.linear_i = 0.
      if self.linear_d is None:
        self.linear_d = 0.
    else:
      self.time = ''
      self.test_distance = 0.
      self.max_linear = 0.
      self.max_w = 0.
      self.angle_p = 0.
      self.angle_i = 0.
      self.angle_d = 0.
      self.linear_p = 0.
      self.linear_i = 0.
      self.linear_d = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.test_distance, _x.max_linear, _x.max_w, _x.angle_p, _x.angle_i, _x.angle_d, _x.linear_p, _x.linear_i, _x.linear_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.test_distance, _x.max_linear, _x.max_w, _x.angle_p, _x.angle_i, _x.angle_d, _x.linear_p, _x.linear_i, _x.linear_d,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.test_distance, _x.max_linear, _x.max_w, _x.angle_p, _x.angle_i, _x.angle_d, _x.linear_p, _x.linear_i, _x.linear_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.time = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.test_distance, _x.max_linear, _x.max_w, _x.angle_p, _x.angle_i, _x.angle_d, _x.linear_p, _x.linear_i, _x.linear_d,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from photinia_msgs/PIDParams_srvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIDParams_srvResponse(genpy.Message):
  _md5sum = "de9a69034e69d5cacf9d93506559dd27"
  _type = "photinia_msgs/PIDParams_srvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_success  #pid设置成功：true    失败：false
string detail


"""
  __slots__ = ['is_success','detail']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_success,detail

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIDParams_srvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_success is None:
        self.is_success = False
      if self.detail is None:
        self.detail = ''
    else:
      self.is_success = False
      self.detail = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.is_success
      buff.write(_get_struct_B().pack(_x))
      _x = self.detail
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_success,) = _get_struct_B().unpack(str[start:end])
      self.is_success = bool(self.is_success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detail = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detail = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.is_success
      buff.write(_get_struct_B().pack(_x))
      _x = self.detail
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_success,) = _get_struct_B().unpack(str[start:end])
      self.is_success = bool(self.is_success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detail = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detail = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class PIDParams_srv(object):
  _type          = 'photinia_msgs/PIDParams_srv'
  _md5sum = '5ad8bacb8dea16aa1298169b29166847'
  _request_class  = PIDParams_srvRequest
  _response_class = PIDParams_srvResponse
