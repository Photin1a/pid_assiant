# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/PcdRegistrationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class PcdRegistrationRequest(genpy.Message):
  _md5sum = "5ca9bf47f7157e39aff94ce7969f406a"
  _type = "dg_msgs/PcdRegistrationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 data_collect
string topic_lidar
int32 collection_frames
string path_source
string path_target
sensor_msgs/PointCloud2 pcd_target
bool statistical_filter_source
bool statistical_filter_target
bool use_fpfh
bool crop
CropBox cropbox_source
CropBox cropbox_target
geometry_msgs/Transform init_pose


================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: dg_msgs/CropBox
float32[] center_
float32[] R_euler
float32[] extent_
================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['data_collect','topic_lidar','collection_frames','path_source','path_target','pcd_target','statistical_filter_source','statistical_filter_target','use_fpfh','crop','cropbox_source','cropbox_target','init_pose']
  _slot_types = ['int32','string','int32','string','string','sensor_msgs/PointCloud2','bool','bool','bool','bool','dg_msgs/CropBox','dg_msgs/CropBox','geometry_msgs/Transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data_collect,topic_lidar,collection_frames,path_source,path_target,pcd_target,statistical_filter_source,statistical_filter_target,use_fpfh,crop,cropbox_source,cropbox_target,init_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PcdRegistrationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data_collect is None:
        self.data_collect = 0
      if self.topic_lidar is None:
        self.topic_lidar = ''
      if self.collection_frames is None:
        self.collection_frames = 0
      if self.path_source is None:
        self.path_source = ''
      if self.path_target is None:
        self.path_target = ''
      if self.pcd_target is None:
        self.pcd_target = sensor_msgs.msg.PointCloud2()
      if self.statistical_filter_source is None:
        self.statistical_filter_source = False
      if self.statistical_filter_target is None:
        self.statistical_filter_target = False
      if self.use_fpfh is None:
        self.use_fpfh = False
      if self.crop is None:
        self.crop = False
      if self.cropbox_source is None:
        self.cropbox_source = dg_msgs.msg.CropBox()
      if self.cropbox_target is None:
        self.cropbox_target = dg_msgs.msg.CropBox()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Transform()
    else:
      self.data_collect = 0
      self.topic_lidar = ''
      self.collection_frames = 0
      self.path_source = ''
      self.path_target = ''
      self.pcd_target = sensor_msgs.msg.PointCloud2()
      self.statistical_filter_source = False
      self.statistical_filter_target = False
      self.use_fpfh = False
      self.crop = False
      self.cropbox_source = dg_msgs.msg.CropBox()
      self.cropbox_target = dg_msgs.msg.CropBox()
      self.init_pose = geometry_msgs.msg.Transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.data_collect
      buff.write(_get_struct_i().pack(_x))
      _x = self.topic_lidar
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.collection_frames
      buff.write(_get_struct_i().pack(_x))
      _x = self.path_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.path_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pcd_target.header.seq, _x.pcd_target.header.stamp.secs, _x.pcd_target.header.stamp.nsecs))
      _x = self.pcd_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pcd_target.height, _x.pcd_target.width))
      length = len(self.pcd_target.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pcd_target.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pcd_target.is_bigendian, _x.pcd_target.point_step, _x.pcd_target.row_step))
      _x = self.pcd_target.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.pcd_target.is_dense, _x.statistical_filter_source, _x.statistical_filter_target, _x.use_fpfh, _x.crop))
      length = len(self.cropbox_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_source.center_))
      length = len(self.cropbox_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_source.R_euler))
      length = len(self.cropbox_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_source.extent_))
      length = len(self.cropbox_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_target.center_))
      length = len(self.cropbox_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_target.R_euler))
      length = len(self.cropbox_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cropbox_target.extent_))
      _x = self
      buff.write(_get_struct_7d().pack(_x.init_pose.translation.x, _x.init_pose.translation.y, _x.init_pose.translation.z, _x.init_pose.rotation.x, _x.init_pose.rotation.y, _x.init_pose.rotation.z, _x.init_pose.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pcd_target is None:
        self.pcd_target = sensor_msgs.msg.PointCloud2()
      if self.cropbox_source is None:
        self.cropbox_source = dg_msgs.msg.CropBox()
      if self.cropbox_target is None:
        self.cropbox_target = dg_msgs.msg.CropBox()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (self.data_collect,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_lidar = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic_lidar = str[start:end]
      start = end
      end += 4
      (self.collection_frames,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_target = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pcd_target.header.seq, _x.pcd_target.header.stamp.secs, _x.pcd_target.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_target.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pcd_target.height, _x.pcd_target.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pcd_target.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pcd_target.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pcd_target.is_bigendian, _x.pcd_target.point_step, _x.pcd_target.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pcd_target.is_bigendian = bool(self.pcd_target.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pcd_target.data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.pcd_target.is_dense, _x.statistical_filter_source, _x.statistical_filter_target, _x.use_fpfh, _x.crop,) = _get_struct_5B().unpack(str[start:end])
      self.pcd_target.is_dense = bool(self.pcd_target.is_dense)
      self.statistical_filter_source = bool(self.statistical_filter_source)
      self.statistical_filter_target = bool(self.statistical_filter_target)
      self.use_fpfh = bool(self.use_fpfh)
      self.crop = bool(self.crop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.extent_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.extent_ = s.unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.init_pose.translation.x, _x.init_pose.translation.y, _x.init_pose.translation.z, _x.init_pose.rotation.x, _x.init_pose.rotation.y, _x.init_pose.rotation.z, _x.init_pose.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.data_collect
      buff.write(_get_struct_i().pack(_x))
      _x = self.topic_lidar
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.collection_frames
      buff.write(_get_struct_i().pack(_x))
      _x = self.path_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.path_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pcd_target.header.seq, _x.pcd_target.header.stamp.secs, _x.pcd_target.header.stamp.nsecs))
      _x = self.pcd_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pcd_target.height, _x.pcd_target.width))
      length = len(self.pcd_target.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.pcd_target.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.pcd_target.is_bigendian, _x.pcd_target.point_step, _x.pcd_target.row_step))
      _x = self.pcd_target.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.pcd_target.is_dense, _x.statistical_filter_source, _x.statistical_filter_target, _x.use_fpfh, _x.crop))
      length = len(self.cropbox_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_source.center_.tostring())
      length = len(self.cropbox_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_source.R_euler.tostring())
      length = len(self.cropbox_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_source.extent_.tostring())
      length = len(self.cropbox_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_target.center_.tostring())
      length = len(self.cropbox_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_target.R_euler.tostring())
      length = len(self.cropbox_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cropbox_target.extent_.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.init_pose.translation.x, _x.init_pose.translation.y, _x.init_pose.translation.z, _x.init_pose.rotation.x, _x.init_pose.rotation.y, _x.init_pose.rotation.z, _x.init_pose.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pcd_target is None:
        self.pcd_target = sensor_msgs.msg.PointCloud2()
      if self.cropbox_source is None:
        self.cropbox_source = dg_msgs.msg.CropBox()
      if self.cropbox_target is None:
        self.cropbox_target = dg_msgs.msg.CropBox()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Transform()
      end = 0
      start = end
      end += 4
      (self.data_collect,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_lidar = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic_lidar = str[start:end]
      start = end
      end += 4
      (self.collection_frames,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_target = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pcd_target.header.seq, _x.pcd_target.header.stamp.secs, _x.pcd_target.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_target.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.pcd_target.height, _x.pcd_target.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pcd_target.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.pcd_target.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.pcd_target.is_bigendian, _x.pcd_target.point_step, _x.pcd_target.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.pcd_target.is_bigendian = bool(self.pcd_target.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pcd_target.data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.pcd_target.is_dense, _x.statistical_filter_source, _x.statistical_filter_target, _x.use_fpfh, _x.crop,) = _get_struct_5B().unpack(str[start:end])
      self.pcd_target.is_dense = bool(self.pcd_target.is_dense)
      self.statistical_filter_source = bool(self.statistical_filter_source)
      self.statistical_filter_target = bool(self.statistical_filter_target)
      self.use_fpfh = bool(self.use_fpfh)
      self.crop = bool(self.crop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_source.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cropbox_target.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 56
      (_x.init_pose.translation.x, _x.init_pose.translation.y, _x.init_pose.translation.z, _x.init_pose.rotation.x, _x.init_pose.rotation.y, _x.init_pose.rotation.z, _x.init_pose.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/PcdRegistrationResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import geometry_msgs.msg

class PcdRegistrationResponse(genpy.Message):
  _md5sum = "9774c230801f2006a1a918dac5bfc005"
  _type = "dg_msgs/PcdRegistrationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# bool result_registration
# string status_info
geometry_msgs/Transform transform
UniversalStateInfo  state_info # state_index: 0 配准成功 1 配准失败 2 读取target点云文件失败 3 读取source点云文件失败 4 从激光雷达获取点云失败 5 从相机获取点云失败

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: dg_msgs/UniversalStateInfo
int32 state_index   # 状态索引值：统一0是正常，其他数字自定义
string node_name    # 当前节点名
string state_msgs   # 附加信息，相当于additional_msgs"""
  __slots__ = ['transform','state_info']
  _slot_types = ['geometry_msgs/Transform','dg_msgs/UniversalStateInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       transform,state_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PcdRegistrationResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
    else:
      self.transform = geometry_msgs.msg.Transform()
      self.state_info = dg_msgs.msg.UniversalStateInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7di().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.state_info.state_index,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7di().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.state_info.state_index,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7di = None
def _get_struct_7di():
    global _struct_7di
    if _struct_7di is None:
        _struct_7di = struct.Struct("<7di")
    return _struct_7di
class PcdRegistration(object):
  _type          = 'dg_msgs/PcdRegistration'
  _md5sum = '5bd0e2fcf9944d063d5fa39205fff5d3'
  _request_class  = PcdRegistrationRequest
  _response_class = PcdRegistrationResponse
