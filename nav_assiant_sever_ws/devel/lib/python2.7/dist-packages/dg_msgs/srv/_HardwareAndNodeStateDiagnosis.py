# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/HardwareAndNodeStateDiagnosisRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HardwareAndNodeStateDiagnosisRequest(genpy.Message):
  _md5sum = "e520ad3b90ea4f836ac0d065408a1661"
  _type = "dg_msgs/HardwareAndNodeStateDiagnosisRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string diagnosis            # 需要诊断的内容，当为空时则执行全部诊断
"""
  __slots__ = ['diagnosis']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       diagnosis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HardwareAndNodeStateDiagnosisRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.diagnosis is None:
        self.diagnosis = ''
    else:
      self.diagnosis = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.diagnosis
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnosis = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagnosis = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.diagnosis
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagnosis = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagnosis = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/HardwareAndNodeStateDiagnosisResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class HardwareAndNodeStateDiagnosisResponse(genpy.Message):
  _md5sum = "fe9414ee59550bcc039160a486a8d031"
  _type = "dg_msgs/HardwareAndNodeStateDiagnosisResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """dg_msgs/HardwareAndNodeState state

================================================================================
MSG: dg_msgs/HardwareAndNodeState
dg_msgs/ROSTopicState[] ros_topic_state                 # ros话题状态

dg_msgs/GeneralHardwareAndNodeState[] ros_node_state    # ros节点状态
dg_msgs/GeneralHardwareAndNodeState[] ros_service_state # ros服务状态
dg_msgs/GeneralHardwareAndNodeState[] daemon_state      # 守护内容状态
dg_msgs/GeneralHardwareAndNodeState[] system_file_state # 系统文件状态

dg_msgs/NetworkedDevicesState[] networked_device_state  # 联网设备状态

dg_msgs/CPUMemNetState cpu_mem_state                    # cpu状态
dg_msgs/ChassisState chassis_state                      # 底盘状态

dg_msgs/UniversalStateInfo[] working_node_error         # 计算节点报错信息 - 只能包含对全局有影响的错误，如机械臂碰撞，底盘错误

string last_update_time                                 # 最近一次诊断时间 - 格式 %Y-%m-%d %H:%M:%S
================================================================================
MSG: dg_msgs/ROSTopicState
# ros-topic 状态
string topic_name               # 话题名
string publish_node             # 发布节点  
float32 publish_rate            # 当前发布频率
float32 desire_rate             # 期望频率
float32 bandwidth               # 当前占用网络带宽

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/MonitorState
# 监控状态 - 当状态正常时错误码为0
int32 error_code            # 错误码
string additional_msgs       # 附加信息
================================================================================
MSG: dg_msgs/GeneralHardwareAndNodeState
# 通用的状态信息
string name                 # 对象名

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/NetworkedDevicesState
# 联网设备状态
string device_name          # 设备名
string ip_address           # 设备地址IPv4

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/CPUMemNetState
# CPU                            # /proc/stat
int32 cpu_count                  # cpu核心数
float64 cpu_usage                # cpu利用率
int32 cpu_load_1min              # cpu负载
int32 cpu_load_5min
int32 cpu_load_15min
int32 process_count              # 当前进程数

# Mem                            # None
float32 mem_total                # 总内存大小 MB
float32 mem_free                 # 当前可用内存大小 MB
float32 mem_used_percent         # 内存使用率 %

dg_msgs/DiskState[] disk_states  # 硬盘状态
dg_msgs/NetworkCardState[] network_card_state  # 网卡状态

================================================================================
MSG: dg_msgs/DiskState
# 硬盘状态
string disk_name            # 硬盘盘符
float32 disk_total          # 硬盘总空间 GB
float32 disk_used           # 已经使用的空间 GB
float32 disk_avail          # 剩余可用空间
float32 disk_used_percent   # 硬盘使用率

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/NetworkCardState
# 网卡状态
string network_card_name        # 网卡名
string ip_address               # IP地址IPv4
float32 net_upload              # 网卡上传速度 KB/s
float32 net_download            # 网卡下载速度 KB/s

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/ChassisState
string chassis_state_json                    # 底盘各种参数的json文件
string chassis_type                          # 底盘类型
string chassis_name                          # 底盘名

# [核心参数] - 是上面的子集
float32 battery                              # 电池电量
geometry_msgs/PoseStamped current_pose       # 底盘当前所在位置
bool is_charged                              # 当前是否在充电

Header header                                # 头部信息 - 主要使用的是时间戳
dg_msgs/MonitorState state_info              # 状态信息
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: dg_msgs/UniversalStateInfo
int32 state_index   # 状态索引值：统一0是正常，其他数字自定义
string node_name    # 当前节点名
string state_msgs   # 附加信息，相当于additional_msgs"""
  __slots__ = ['state']
  _slot_types = ['dg_msgs/HardwareAndNodeState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HardwareAndNodeStateDiagnosisResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = dg_msgs.msg.HardwareAndNodeState()
    else:
      self.state = dg_msgs.msg.HardwareAndNodeState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.state.ros_topic_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_topic_state:
        _x = val1.topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_node
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.publish_rate, _x.desire_rate, _x.bandwidth))
        _v1 = val1.state_info
        _x = _v1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v1.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.ros_node_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_node_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.state_info
        _x = _v2.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v2.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.ros_service_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_service_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.state_info
        _x = _v3.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v3.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.daemon_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.daemon_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = val1.state_info
        _x = _v4.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v4.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.system_file_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.system_file_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.state_info
        _x = _v5.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v5.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.networked_device_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.networked_device_state:
        _x = val1.device_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = val1.state_info
        _x = _v6.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v6.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_id4i3f().pack(_x.state.cpu_mem_state.cpu_count, _x.state.cpu_mem_state.cpu_usage, _x.state.cpu_mem_state.cpu_load_1min, _x.state.cpu_mem_state.cpu_load_5min, _x.state.cpu_mem_state.cpu_load_15min, _x.state.cpu_mem_state.process_count, _x.state.cpu_mem_state.mem_total, _x.state.cpu_mem_state.mem_free, _x.state.cpu_mem_state.mem_used_percent))
      length = len(self.state.cpu_mem_state.disk_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.cpu_mem_state.disk_states:
        _x = val1.disk_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4f().pack(_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent))
        _v7 = val1.state_info
        _x = _v7.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v7.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.cpu_mem_state.network_card_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.cpu_mem_state.network_card_state:
        _x = val1.network_card_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.net_upload, _x.net_download))
        _v8 = val1.state_info
        _x = _v8.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v8.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_state_json
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3I().pack(_x.state.chassis_state.battery, _x.state.chassis_state.current_pose.header.seq, _x.state.chassis_state.current_pose.header.stamp.secs, _x.state.chassis_state.current_pose.header.stamp.nsecs))
      _x = self.state.chassis_state.current_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.state.chassis_state.current_pose.pose.position.x, _x.state.chassis_state.current_pose.pose.position.y, _x.state.chassis_state.current_pose.pose.position.z, _x.state.chassis_state.current_pose.pose.orientation.x, _x.state.chassis_state.current_pose.pose.orientation.y, _x.state.chassis_state.current_pose.pose.orientation.z, _x.state.chassis_state.current_pose.pose.orientation.w, _x.state.chassis_state.is_charged, _x.state.chassis_state.header.seq, _x.state.chassis_state.header.stamp.secs, _x.state.chassis_state.header.stamp.nsecs))
      _x = self.state.chassis_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.state_info.error_code
      buff.write(_get_struct_i().pack(_x))
      _x = self.state.chassis_state.state_info.additional_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.working_node_error)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.working_node_error:
        _x = val1.state_index
        buff.write(_get_struct_i().pack(_x))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.state_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.last_update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = dg_msgs.msg.HardwareAndNodeState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_topic_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ROSTopicState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.topic_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publish_node = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publish_node = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.publish_rate, _x.desire_rate, _x.bandwidth,) = _get_struct_3f().unpack(str[start:end])
        _v9 = val1.state_info
        start = end
        end += 4
        (_v9.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v9.additional_msgs = str[start:end]
        self.state.ros_topic_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_node_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v10 = val1.state_info
        start = end
        end += 4
        (_v10.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.additional_msgs = str[start:end]
        self.state.ros_node_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_service_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v11 = val1.state_info
        start = end
        end += 4
        (_v11.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v11.additional_msgs = str[start:end]
        self.state.ros_service_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.daemon_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v12 = val1.state_info
        start = end
        end += 4
        (_v12.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v12.additional_msgs = str[start:end]
        self.state.daemon_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.system_file_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v13 = val1.state_info
        start = end
        end += 4
        (_v13.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.additional_msgs = str[start:end]
        self.state.system_file_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.networked_device_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkedDevicesState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.device_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.device_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _v14 = val1.state_info
        start = end
        end += 4
        (_v14.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v14.additional_msgs = str[start:end]
        self.state.networked_device_state.append(val1)
      _x = self
      start = end
      end += 40
      (_x.state.cpu_mem_state.cpu_count, _x.state.cpu_mem_state.cpu_usage, _x.state.cpu_mem_state.cpu_load_1min, _x.state.cpu_mem_state.cpu_load_5min, _x.state.cpu_mem_state.cpu_load_15min, _x.state.cpu_mem_state.process_count, _x.state.cpu_mem_state.mem_total, _x.state.cpu_mem_state.mem_free, _x.state.cpu_mem_state.mem_used_percent,) = _get_struct_id4i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.cpu_mem_state.disk_states = []
      for i in range(0, length):
        val1 = dg_msgs.msg.DiskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.disk_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.disk_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent,) = _get_struct_4f().unpack(str[start:end])
        _v15 = val1.state_info
        start = end
        end += 4
        (_v15.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.additional_msgs = str[start:end]
        self.state.cpu_mem_state.disk_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.cpu_mem_state.network_card_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkCardState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.network_card_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.network_card_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.net_upload, _x.net_download,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.state_info
        start = end
        end += 4
        (_v16.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.additional_msgs = str[start:end]
        self.state.cpu_mem_state.network_card_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_state_json = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_state_json = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.state.chassis_state.battery, _x.state.chassis_state.current_pose.header.seq, _x.state.chassis_state.current_pose.header.stamp.secs, _x.state.chassis_state.current_pose.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.current_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.current_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.state.chassis_state.current_pose.pose.position.x, _x.state.chassis_state.current_pose.pose.position.y, _x.state.chassis_state.current_pose.pose.position.z, _x.state.chassis_state.current_pose.pose.orientation.x, _x.state.chassis_state.current_pose.pose.orientation.y, _x.state.chassis_state.current_pose.pose.orientation.z, _x.state.chassis_state.current_pose.pose.orientation.w, _x.state.chassis_state.is_charged, _x.state.chassis_state.header.seq, _x.state.chassis_state.header.stamp.secs, _x.state.chassis_state.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.state.chassis_state.is_charged = bool(self.state.chassis_state.is_charged)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.state.chassis_state.state_info.error_code,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.state_info.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.state_info.additional_msgs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.working_node_error = []
      for i in range(0, length):
        val1 = dg_msgs.msg.UniversalStateInfo()
        start = end
        end += 4
        (val1.state_index,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.state_msgs = str[start:end]
        self.state.working_node_error.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.last_update_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.last_update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.state.ros_topic_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_topic_state:
        _x = val1.topic_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_node
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.publish_rate, _x.desire_rate, _x.bandwidth))
        _v17 = val1.state_info
        _x = _v17.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v17.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.ros_node_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_node_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v18 = val1.state_info
        _x = _v18.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v18.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.ros_service_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.ros_service_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v19 = val1.state_info
        _x = _v19.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v19.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.daemon_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.daemon_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v20 = val1.state_info
        _x = _v20.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v20.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.system_file_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.system_file_state:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v21 = val1.state_info
        _x = _v21.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v21.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.networked_device_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.networked_device_state:
        _x = val1.device_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v22 = val1.state_info
        _x = _v22.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v22.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_id4i3f().pack(_x.state.cpu_mem_state.cpu_count, _x.state.cpu_mem_state.cpu_usage, _x.state.cpu_mem_state.cpu_load_1min, _x.state.cpu_mem_state.cpu_load_5min, _x.state.cpu_mem_state.cpu_load_15min, _x.state.cpu_mem_state.process_count, _x.state.cpu_mem_state.mem_total, _x.state.cpu_mem_state.mem_free, _x.state.cpu_mem_state.mem_used_percent))
      length = len(self.state.cpu_mem_state.disk_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.cpu_mem_state.disk_states:
        _x = val1.disk_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4f().pack(_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent))
        _v23 = val1.state_info
        _x = _v23.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v23.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.cpu_mem_state.network_card_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.cpu_mem_state.network_card_state:
        _x = val1.network_card_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.net_upload, _x.net_download))
        _v24 = val1.state_info
        _x = _v24.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v24.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_state_json
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.chassis_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3I().pack(_x.state.chassis_state.battery, _x.state.chassis_state.current_pose.header.seq, _x.state.chassis_state.current_pose.header.stamp.secs, _x.state.chassis_state.current_pose.header.stamp.nsecs))
      _x = self.state.chassis_state.current_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB3I().pack(_x.state.chassis_state.current_pose.pose.position.x, _x.state.chassis_state.current_pose.pose.position.y, _x.state.chassis_state.current_pose.pose.position.z, _x.state.chassis_state.current_pose.pose.orientation.x, _x.state.chassis_state.current_pose.pose.orientation.y, _x.state.chassis_state.current_pose.pose.orientation.z, _x.state.chassis_state.current_pose.pose.orientation.w, _x.state.chassis_state.is_charged, _x.state.chassis_state.header.seq, _x.state.chassis_state.header.stamp.secs, _x.state.chassis_state.header.stamp.nsecs))
      _x = self.state.chassis_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.chassis_state.state_info.error_code
      buff.write(_get_struct_i().pack(_x))
      _x = self.state.chassis_state.state_info.additional_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state.working_node_error)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.working_node_error:
        _x = val1.state_index
        buff.write(_get_struct_i().pack(_x))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.state_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state.last_update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = dg_msgs.msg.HardwareAndNodeState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_topic_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ROSTopicState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.topic_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publish_node = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publish_node = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.publish_rate, _x.desire_rate, _x.bandwidth,) = _get_struct_3f().unpack(str[start:end])
        _v25 = val1.state_info
        start = end
        end += 4
        (_v25.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v25.additional_msgs = str[start:end]
        self.state.ros_topic_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_node_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v26 = val1.state_info
        start = end
        end += 4
        (_v26.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.additional_msgs = str[start:end]
        self.state.ros_node_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.ros_service_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v27 = val1.state_info
        start = end
        end += 4
        (_v27.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.additional_msgs = str[start:end]
        self.state.ros_service_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.daemon_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v28 = val1.state_info
        start = end
        end += 4
        (_v28.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v28.additional_msgs = str[start:end]
        self.state.daemon_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.system_file_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.GeneralHardwareAndNodeState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v29 = val1.state_info
        start = end
        end += 4
        (_v29.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v29.additional_msgs = str[start:end]
        self.state.system_file_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.networked_device_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkedDevicesState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.device_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.device_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _v30 = val1.state_info
        start = end
        end += 4
        (_v30.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.additional_msgs = str[start:end]
        self.state.networked_device_state.append(val1)
      _x = self
      start = end
      end += 40
      (_x.state.cpu_mem_state.cpu_count, _x.state.cpu_mem_state.cpu_usage, _x.state.cpu_mem_state.cpu_load_1min, _x.state.cpu_mem_state.cpu_load_5min, _x.state.cpu_mem_state.cpu_load_15min, _x.state.cpu_mem_state.process_count, _x.state.cpu_mem_state.mem_total, _x.state.cpu_mem_state.mem_free, _x.state.cpu_mem_state.mem_used_percent,) = _get_struct_id4i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.cpu_mem_state.disk_states = []
      for i in range(0, length):
        val1 = dg_msgs.msg.DiskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.disk_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.disk_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent,) = _get_struct_4f().unpack(str[start:end])
        _v31 = val1.state_info
        start = end
        end += 4
        (_v31.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.additional_msgs = str[start:end]
        self.state.cpu_mem_state.disk_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.cpu_mem_state.network_card_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkCardState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.network_card_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.network_card_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.net_upload, _x.net_download,) = _get_struct_2f().unpack(str[start:end])
        _v32 = val1.state_info
        start = end
        end += 4
        (_v32.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.additional_msgs = str[start:end]
        self.state.cpu_mem_state.network_card_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_state_json = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_state_json = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.chassis_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.chassis_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.state.chassis_state.battery, _x.state.chassis_state.current_pose.header.seq, _x.state.chassis_state.current_pose.header.stamp.secs, _x.state.chassis_state.current_pose.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.current_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.current_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.state.chassis_state.current_pose.pose.position.x, _x.state.chassis_state.current_pose.pose.position.y, _x.state.chassis_state.current_pose.pose.position.z, _x.state.chassis_state.current_pose.pose.orientation.x, _x.state.chassis_state.current_pose.pose.orientation.y, _x.state.chassis_state.current_pose.pose.orientation.z, _x.state.chassis_state.current_pose.pose.orientation.w, _x.state.chassis_state.is_charged, _x.state.chassis_state.header.seq, _x.state.chassis_state.header.stamp.secs, _x.state.chassis_state.header.stamp.nsecs,) = _get_struct_7dB3I().unpack(str[start:end])
      self.state.chassis_state.is_charged = bool(self.state.chassis_state.is_charged)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.state.chassis_state.state_info.error_code,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.chassis_state.state_info.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.chassis_state.state_info.additional_msgs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.working_node_error = []
      for i in range(0, length):
        val1 = dg_msgs.msg.UniversalStateInfo()
        start = end
        end += 4
        (val1.state_index,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.state_msgs = str[start:end]
        self.state.working_node_error.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.last_update_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.last_update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7dB3I = None
def _get_struct_7dB3I():
    global _struct_7dB3I
    if _struct_7dB3I is None:
        _struct_7dB3I = struct.Struct("<7dB3I")
    return _struct_7dB3I
_struct_f3I = None
def _get_struct_f3I():
    global _struct_f3I
    if _struct_f3I is None:
        _struct_f3I = struct.Struct("<f3I")
    return _struct_f3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id4i3f = None
def _get_struct_id4i3f():
    global _struct_id4i3f
    if _struct_id4i3f is None:
        _struct_id4i3f = struct.Struct("<id4i3f")
    return _struct_id4i3f
class HardwareAndNodeStateDiagnosis(object):
  _type          = 'dg_msgs/HardwareAndNodeStateDiagnosis'
  _md5sum = 'd08725ae8368788fa09714c61c612f6c'
  _request_class  = HardwareAndNodeStateDiagnosisRequest
  _response_class = HardwareAndNodeStateDiagnosisResponse
