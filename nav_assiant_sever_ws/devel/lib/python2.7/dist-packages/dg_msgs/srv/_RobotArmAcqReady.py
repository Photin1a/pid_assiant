# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/RobotArmAcqReadyRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class RobotArmAcqReadyRequest(genpy.Message):
  _md5sum = "bb9ef447c82b368df76a7824348cb29d"
  _type = "dg_msgs/RobotArmAcqReadyRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped relative_pose          # 停车点位置(相对位置)
string model_path                                # 转向架数据模型
int32 model_type                                 # 模型类型（车头： 1，转向架： 2）
int32 region_type
int32 reg_type                                   # 配准采集数据类型， 0为相机，1为雷达
string lidar_topic                               # 雷达topic，用于确定使用哪个雷达采集数据
CorrectionPoint correction_point                 # 纠偏点，配准采集选择相机，相机需要移动到correction_point里传进来的pose, pose是存储在区域坐标系下的，配合relative_pose使用
CorrectionJoint correction_joint                        # 纠偏轨迹
float64[] matrix_region_trainhead                          # 区域转换矩阵
CropBox box_target
CropBox box_source
PointSequence[] image_points                     # 像点，运动规划

string region_frame_path                                # 区域配准帧文件路径
float64[] matrix_region_regionframe                     # 区域到区域配准帧的配准结果


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: dg_msgs/CorrectionPoint
string number                                   # 设备组编号
geometry_msgs/PoseStamped pose                  # 相机目标点的pose
float32 offset                                  # 升降柱伸缩量
string custom_message
================================================================================
MSG: dg_msgs/CorrectionJoint
#纠偏轨迹
string number       # 设备编码
trajectory_msgs/JointTrajectoryPoint[] joints # 机械臂关节位置
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: dg_msgs/CropBox
float32[] center_
float32[] R_euler
float32[] extent_
================================================================================
MSG: dg_msgs/PointSequence
string number      # 设备组编号
ImagePoint[] points    # 机械臂拍照点位

================================================================================
MSG: dg_msgs/ImagePoint
geometry_msgs/PoseStamped pose
trajectory_msgs/JointTrajectoryPoint joint
float32 offset      # 升降柱伸缩量
string custom_message
ImageGoal image_goal
string point_file_name

================================================================================
MSG: dg_msgs/ImageGoal
string id          # ID
string number     # 设备编号
int32 types     # 拍照类型，灰度为`1`，彩色为`2`，深度为`4`，点云为`8`，多种类型时按位相与
"""
  __slots__ = ['relative_pose','model_path','model_type','region_type','reg_type','lidar_topic','correction_point','correction_joint','matrix_region_trainhead','box_target','box_source','image_points','region_frame_path','matrix_region_regionframe']
  _slot_types = ['geometry_msgs/PoseStamped','string','int32','int32','int32','string','dg_msgs/CorrectionPoint','dg_msgs/CorrectionJoint','float64[]','dg_msgs/CropBox','dg_msgs/CropBox','dg_msgs/PointSequence[]','string','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       relative_pose,model_path,model_type,region_type,reg_type,lidar_topic,correction_point,correction_joint,matrix_region_trainhead,box_target,box_source,image_points,region_frame_path,matrix_region_regionframe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotArmAcqReadyRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.relative_pose is None:
        self.relative_pose = geometry_msgs.msg.PoseStamped()
      if self.model_path is None:
        self.model_path = ''
      if self.model_type is None:
        self.model_type = 0
      if self.region_type is None:
        self.region_type = 0
      if self.reg_type is None:
        self.reg_type = 0
      if self.lidar_topic is None:
        self.lidar_topic = ''
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.correction_joint is None:
        self.correction_joint = dg_msgs.msg.CorrectionJoint()
      if self.matrix_region_trainhead is None:
        self.matrix_region_trainhead = []
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.image_points is None:
        self.image_points = []
      if self.region_frame_path is None:
        self.region_frame_path = ''
      if self.matrix_region_regionframe is None:
        self.matrix_region_regionframe = []
    else:
      self.relative_pose = geometry_msgs.msg.PoseStamped()
      self.model_path = ''
      self.model_type = 0
      self.region_type = 0
      self.reg_type = 0
      self.lidar_topic = ''
      self.correction_point = dg_msgs.msg.CorrectionPoint()
      self.correction_joint = dg_msgs.msg.CorrectionJoint()
      self.matrix_region_trainhead = []
      self.box_target = dg_msgs.msg.CropBox()
      self.box_source = dg_msgs.msg.CropBox()
      self.image_points = []
      self.region_frame_path = ''
      self.matrix_region_regionframe = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.relative_pose.header.seq, _x.relative_pose.header.stamp.secs, _x.relative_pose.header.stamp.nsecs))
      _x = self.relative_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.relative_pose.pose.position.x, _x.relative_pose.pose.position.y, _x.relative_pose.pose.position.z, _x.relative_pose.pose.orientation.x, _x.relative_pose.pose.orientation.y, _x.relative_pose.pose.orientation.z, _x.relative_pose.pose.orientation.w))
      _x = self.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.model_type, _x.region_type, _x.reg_type))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs))
      _x = self.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset))
      _x = self.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_joint.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.correction_joint.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.correction_joint.joints:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.matrix_region_trainhead))
      length = len(self.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.center_))
      length = len(self.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.R_euler))
      length = len(self.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.extent_))
      length = len(self.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.center_))
      length = len(self.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.R_euler))
      length = len(self.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.extent_))
      length = len(self.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_points:
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v2 = val2.pose
          _v3 = _v2.header
          _x = _v3.seq
          buff.write(_get_struct_I().pack(_x))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v5 = _v2.pose
          _v6 = _v5.position
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v7 = _v5.orientation
          _x = _v7
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v8 = val2.joint
          length = len(_v8.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v8.positions))
          length = len(_v8.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v8.velocities))
          length = len(_v8.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v8.accelerations))
          length = len(_v8.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v8.effort))
          _v9 = _v8.time_from_start
          _x = _v9
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.offset
          buff.write(_get_struct_f().pack(_x))
          _x = val2.custom_message
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v10 = val2.image_goal
          _x = _v10.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v10.number
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v10.types
          buff.write(_get_struct_i().pack(_x))
          _x = val2.point_file_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.matrix_region_regionframe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.matrix_region_regionframe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relative_pose is None:
        self.relative_pose = geometry_msgs.msg.PoseStamped()
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.correction_joint is None:
        self.correction_joint = dg_msgs.msg.CorrectionJoint()
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.image_points is None:
        self.image_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.relative_pose.header.seq, _x.relative_pose.header.stamp.secs, _x.relative_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.relative_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.relative_pose.pose.position.x, _x.relative_pose.pose.position.y, _x.relative_pose.pose.position.z, _x.relative_pose.pose.orientation.x, _x.relative_pose.pose.orientation.y, _x.relative_pose.pose.orientation.z, _x.relative_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_path = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.model_type, _x.region_type, _x.reg_type,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_joint.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_joint.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.correction_joint.joints = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        _v11 = val1.time_from_start
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.correction_joint.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_trainhead = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.extent_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.extent_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_points = []
      for i in range(0, length):
        val1 = dg_msgs.msg.PointSequence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = dg_msgs.msg.ImagePoint()
          _v12 = val2.pose
          _v13 = _v12.header
          start = end
          end += 4
          (_v13.seq,) = _get_struct_I().unpack(str[start:end])
          _v14 = _v13.stamp
          _x = _v14
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v13.frame_id = str[start:end]
          _v15 = _v12.pose
          _v16 = _v15.position
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v17 = _v15.orientation
          _x = _v17
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v18 = val2.joint
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v18.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v18.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v18.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v18.effort = s.unpack(str[start:end])
          _v19 = _v18.time_from_start
          _x = _v19
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (val2.offset,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.custom_message = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.custom_message = str[start:end]
          _v20 = val2.image_goal
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v20.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v20.id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v20.number = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v20.number = str[start:end]
          start = end
          end += 4
          (_v20.types,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.point_file_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.point_file_name = str[start:end]
          val1.points.append(val2)
        self.image_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_frame_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_regionframe = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.relative_pose.header.seq, _x.relative_pose.header.stamp.secs, _x.relative_pose.header.stamp.nsecs))
      _x = self.relative_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.relative_pose.pose.position.x, _x.relative_pose.pose.position.y, _x.relative_pose.pose.position.z, _x.relative_pose.pose.orientation.x, _x.relative_pose.pose.orientation.y, _x.relative_pose.pose.orientation.z, _x.relative_pose.pose.orientation.w))
      _x = self.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.model_type, _x.region_type, _x.reg_type))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs))
      _x = self.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset))
      _x = self.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_joint.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.correction_joint.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.correction_joint.joints:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v21 = val1.time_from_start
        _x = _v21
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_region_trainhead.tostring())
      length = len(self.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.center_.tostring())
      length = len(self.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.R_euler.tostring())
      length = len(self.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.extent_.tostring())
      length = len(self.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.center_.tostring())
      length = len(self.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.R_euler.tostring())
      length = len(self.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.extent_.tostring())
      length = len(self.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_points:
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v22 = val2.pose
          _v23 = _v22.header
          _x = _v23.seq
          buff.write(_get_struct_I().pack(_x))
          _v24 = _v23.stamp
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v23.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v25 = _v22.pose
          _v26 = _v25.position
          _x = _v26
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v27 = _v25.orientation
          _x = _v27
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v28 = val2.joint
          length = len(_v28.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v28.positions.tostring())
          length = len(_v28.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v28.velocities.tostring())
          length = len(_v28.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v28.accelerations.tostring())
          length = len(_v28.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v28.effort.tostring())
          _v29 = _v28.time_from_start
          _x = _v29
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.offset
          buff.write(_get_struct_f().pack(_x))
          _x = val2.custom_message
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v30 = val2.image_goal
          _x = _v30.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v30.number
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v30.types
          buff.write(_get_struct_i().pack(_x))
          _x = val2.point_file_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.matrix_region_regionframe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_region_regionframe.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relative_pose is None:
        self.relative_pose = geometry_msgs.msg.PoseStamped()
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.correction_joint is None:
        self.correction_joint = dg_msgs.msg.CorrectionJoint()
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.image_points is None:
        self.image_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.relative_pose.header.seq, _x.relative_pose.header.stamp.secs, _x.relative_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.relative_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.relative_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.relative_pose.pose.position.x, _x.relative_pose.pose.position.y, _x.relative_pose.pose.position.z, _x.relative_pose.pose.orientation.x, _x.relative_pose.pose.orientation.y, _x.relative_pose.pose.orientation.z, _x.relative_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_path = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.model_type, _x.region_type, _x.reg_type,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_joint.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_joint.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.correction_joint.joints = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v31 = val1.time_from_start
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.correction_joint.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_trainhead = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_points = []
      for i in range(0, length):
        val1 = dg_msgs.msg.PointSequence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = dg_msgs.msg.ImagePoint()
          _v32 = val2.pose
          _v33 = _v32.header
          start = end
          end += 4
          (_v33.seq,) = _get_struct_I().unpack(str[start:end])
          _v34 = _v33.stamp
          _x = _v34
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v33.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v33.frame_id = str[start:end]
          _v35 = _v32.pose
          _v36 = _v35.position
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v37 = _v35.orientation
          _x = _v37
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v38 = val2.joint
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v38.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v39 = _v38.time_from_start
          _x = _v39
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (val2.offset,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.custom_message = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.custom_message = str[start:end]
          _v40 = val2.image_goal
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v40.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v40.id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v40.number = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v40.number = str[start:end]
          start = end
          end += 4
          (_v40.types,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.point_file_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.point_file_name = str[start:end]
          val1.points.append(val2)
        self.image_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_frame_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_regionframe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7df = None
def _get_struct_7df():
    global _struct_7df
    if _struct_7df is None:
        _struct_7df = struct.Struct("<7df")
    return _struct_7df
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/RobotArmAcqReadyResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import geometry_msgs.msg

class RobotArmAcqReadyResponse(genpy.Message):
  _md5sum = "e3a35aadd4af7a6bf19580a53899f34f"
  _type = "dg_msgs/RobotArmAcqReadyResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose  correction_pose              # 反馈给中心节点停车点位的位移偏差(用于里程计校准)
UniversalStateInfo  state_info                   # error 1 机械臂初始位置错误；2 坑道模型加载错误；3 转向架模型加载失败；
                                                 # 4 配准服务调用失败；5 机械臂运动失败；6 机械臂规划到纠偏点位失败；
                                                 # 7 外部轴运动失败；8 终止指令返回；
                                                 # warning  9 暂停指令返回；

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: dg_msgs/UniversalStateInfo
int32 state_index   # 状态索引值：统一0是正常，其他数字自定义
string node_name    # 当前节点名
string state_msgs   # 附加信息，相当于additional_msgs"""
  __slots__ = ['correction_pose','state_info']
  _slot_types = ['geometry_msgs/Pose','dg_msgs/UniversalStateInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       correction_pose,state_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotArmAcqReadyResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.correction_pose is None:
        self.correction_pose = geometry_msgs.msg.Pose()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
    else:
      self.correction_pose = geometry_msgs.msg.Pose()
      self.state_info = dg_msgs.msg.UniversalStateInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7di().pack(_x.correction_pose.position.x, _x.correction_pose.position.y, _x.correction_pose.position.z, _x.correction_pose.orientation.x, _x.correction_pose.orientation.y, _x.correction_pose.orientation.z, _x.correction_pose.orientation.w, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.correction_pose is None:
        self.correction_pose = geometry_msgs.msg.Pose()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.correction_pose.position.x, _x.correction_pose.position.y, _x.correction_pose.position.z, _x.correction_pose.orientation.x, _x.correction_pose.orientation.y, _x.correction_pose.orientation.z, _x.correction_pose.orientation.w, _x.state_info.state_index,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7di().pack(_x.correction_pose.position.x, _x.correction_pose.position.y, _x.correction_pose.position.z, _x.correction_pose.orientation.x, _x.correction_pose.orientation.y, _x.correction_pose.orientation.z, _x.correction_pose.orientation.w, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.correction_pose is None:
        self.correction_pose = geometry_msgs.msg.Pose()
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.correction_pose.position.x, _x.correction_pose.position.y, _x.correction_pose.position.z, _x.correction_pose.orientation.x, _x.correction_pose.orientation.y, _x.correction_pose.orientation.z, _x.correction_pose.orientation.w, _x.state_info.state_index,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7di = None
def _get_struct_7di():
    global _struct_7di
    if _struct_7di is None:
        _struct_7di = struct.Struct("<7di")
    return _struct_7di
class RobotArmAcqReady(object):
  _type          = 'dg_msgs/RobotArmAcqReady'
  _md5sum = 'cbf1e625d3f15ef072b993fe724f8a83'
  _request_class  = RobotArmAcqReadyRequest
  _response_class = RobotArmAcqReadyResponse
