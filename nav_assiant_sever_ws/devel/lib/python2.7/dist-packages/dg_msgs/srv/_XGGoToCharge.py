# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/XGGoToChargeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class XGGoToChargeRequest(genpy.Message):
  _md5sum = "379711aea633b6198f8abc72fc557682"
  _type = "dg_msgs/XGGoToChargeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 关键变量说明:
# allow_switch_map: 是否允许切换地图，当车在坑道内的时候，底盘会对电梯进行调度

bool allow_switch_map       # 【实验变量，暂未使用】是否允许自动切换地图并执行回充【严禁缺省】
string charger_station      # 充电站站点名，如果缺省则会根据task_config的配置信息自动寻找最近的充电站
"""
  __slots__ = ['allow_switch_map','charger_station']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       allow_switch_map,charger_station

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XGGoToChargeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.allow_switch_map is None:
        self.allow_switch_map = False
      if self.charger_station is None:
        self.charger_station = ''
    else:
      self.allow_switch_map = False
      self.charger_station = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.allow_switch_map
      buff.write(_get_struct_B().pack(_x))
      _x = self.charger_station
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.allow_switch_map,) = _get_struct_B().unpack(str[start:end])
      self.allow_switch_map = bool(self.allow_switch_map)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.charger_station = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.charger_station = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.allow_switch_map
      buff.write(_get_struct_B().pack(_x))
      _x = self.charger_station
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.allow_switch_map,) = _get_struct_B().unpack(str[start:end])
      self.allow_switch_map = bool(self.allow_switch_map)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.charger_station = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.charger_station = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/XGGoToChargeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class XGGoToChargeResponse(genpy.Message):
  _md5sum = "6a552fffd4bfabf3dd1af7550e550ba9"
  _type = "dg_msgs/XGGoToChargeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 current_battery     
bool is_charged
UniversalStateInfo  state_info

================================================================================
MSG: dg_msgs/UniversalStateInfo
int32 state_index   # 状态索引值：统一0是正常，其他数字自定义
string node_name    # 当前节点名
string state_msgs   # 附加信息，相当于additional_msgs"""
  __slots__ = ['current_battery','is_charged','state_info']
  _slot_types = ['float32','bool','dg_msgs/UniversalStateInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_battery,is_charged,state_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XGGoToChargeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_battery is None:
        self.current_battery = 0.
      if self.is_charged is None:
        self.is_charged = False
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
    else:
      self.current_battery = 0.
      self.is_charged = False
      self.state_info = dg_msgs.msg.UniversalStateInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fBi().pack(_x.current_battery, _x.is_charged, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.current_battery, _x.is_charged, _x.state_info.state_index,) = _get_struct_fBi().unpack(str[start:end])
      self.is_charged = bool(self.is_charged)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fBi().pack(_x.current_battery, _x.is_charged, _x.state_info.state_index))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.current_battery, _x.is_charged, _x.state_info.state_index,) = _get_struct_fBi().unpack(str[start:end])
      self.is_charged = bool(self.is_charged)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fBi = None
def _get_struct_fBi():
    global _struct_fBi
    if _struct_fBi is None:
        _struct_fBi = struct.Struct("<fBi")
    return _struct_fBi
class XGGoToCharge(object):
  _type          = 'dg_msgs/XGGoToCharge'
  _md5sum = '17a225b0388e872b5c33b08b315a6550'
  _request_class  = XGGoToChargeRequest
  _response_class = XGGoToChargeResponse
