# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/GetSetAntiCollisionWheelRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class GetSetAntiCollisionWheelRequest(genpy.Message):
  _md5sum = "52179119cac1f3fc553cd5881acb98e5"
  _type = "dg_msgs/GetSetAntiCollisionWheelRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 获取/设置防撞轮状态 - 允许同时设置/获取多个防撞轮状态
AntiCollisionWheelState[] target_state

================================================================================
MSG: dg_msgs/AntiCollisionWheelState
# 防撞轮状态 - 设置和获取通用
string wheel_name           # 防撞轮名
bool is_get_state           # 当前请求是否是获得状态，如果为true为请求状态，false则为设置状态
float32 position            # 位置
float32 speed               # 速度
int32 state_word            # 状态字"""
  __slots__ = ['target_state']
  _slot_types = ['dg_msgs/AntiCollisionWheelState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSetAntiCollisionWheelRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_state is None:
        self.target_state = []
    else:
      self.target_state = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.target_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_state:
        _x = val1.wheel_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B2fi().pack(_x.is_get_state, _x.position, _x.speed, _x.state_word))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_state is None:
        self.target_state = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.AntiCollisionWheelState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.wheel_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.wheel_name = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.is_get_state, _x.position, _x.speed, _x.state_word,) = _get_struct_B2fi().unpack(str[start:end])
        val1.is_get_state = bool(val1.is_get_state)
        self.target_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.target_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_state:
        _x = val1.wheel_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B2fi().pack(_x.is_get_state, _x.position, _x.speed, _x.state_word))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_state is None:
        self.target_state = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.AntiCollisionWheelState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.wheel_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.wheel_name = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.is_get_state, _x.position, _x.speed, _x.state_word,) = _get_struct_B2fi().unpack(str[start:end])
        val1.is_get_state = bool(val1.is_get_state)
        self.target_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fi = None
def _get_struct_B2fi():
    global _struct_B2fi
    if _struct_B2fi is None:
        _struct_B2fi = struct.Struct("<B2fi")
    return _struct_B2fi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/GetSetAntiCollisionWheelResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class GetSetAntiCollisionWheelResponse(genpy.Message):
  _md5sum = "77134c7c59fe3250d354786c4e515985"
  _type = "dg_msgs/GetSetAntiCollisionWheelResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """AntiCollisionWheelState[] current_state

================================================================================
MSG: dg_msgs/AntiCollisionWheelState
# 防撞轮状态 - 设置和获取通用
string wheel_name           # 防撞轮名
bool is_get_state           # 当前请求是否是获得状态，如果为true为请求状态，false则为设置状态
float32 position            # 位置
float32 speed               # 速度
int32 state_word            # 状态字"""
  __slots__ = ['current_state']
  _slot_types = ['dg_msgs/AntiCollisionWheelState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSetAntiCollisionWheelResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_state is None:
        self.current_state = []
    else:
      self.current_state = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.current_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_state:
        _x = val1.wheel_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B2fi().pack(_x.is_get_state, _x.position, _x.speed, _x.state_word))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_state is None:
        self.current_state = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.AntiCollisionWheelState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.wheel_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.wheel_name = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.is_get_state, _x.position, _x.speed, _x.state_word,) = _get_struct_B2fi().unpack(str[start:end])
        val1.is_get_state = bool(val1.is_get_state)
        self.current_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.current_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.current_state:
        _x = val1.wheel_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_B2fi().pack(_x.is_get_state, _x.position, _x.speed, _x.state_word))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_state is None:
        self.current_state = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.AntiCollisionWheelState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.wheel_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.wheel_name = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.is_get_state, _x.position, _x.speed, _x.state_word,) = _get_struct_B2fi().unpack(str[start:end])
        val1.is_get_state = bool(val1.is_get_state)
        self.current_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fi = None
def _get_struct_B2fi():
    global _struct_B2fi
    if _struct_B2fi is None:
        _struct_B2fi = struct.Struct("<B2fi")
    return _struct_B2fi
class GetSetAntiCollisionWheel(object):
  _type          = 'dg_msgs/GetSetAntiCollisionWheel'
  _md5sum = 'e205aef48784b5a49ae3295ca6ee4c49'
  _request_class  = GetSetAntiCollisionWheelRequest
  _response_class = GetSetAntiCollisionWheelResponse
