# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/XGAuxUtilityRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class XGAuxUtilityRequest(genpy.Message):
  _md5sum = "6fae053f29583b77e6a367184b6a915b"
  _type = "dg_msgs/XGAuxUtilityRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 仙工底盘的辅助服务，用于中心节点和底盘之间交互媒介

# 内容一：用于转化的pose
geometry_msgs/PoseStamped reg_pose          # 配准结果pose，从中心节点处传入
geometry_msgs/PoseStamped teach_pose        # 当时示校时的pose，从中心节点传入 

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['reg_pose','teach_pose']
  _slot_types = ['geometry_msgs/PoseStamped','geometry_msgs/PoseStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reg_pose,teach_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XGAuxUtilityRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reg_pose is None:
        self.reg_pose = geometry_msgs.msg.PoseStamped()
      if self.teach_pose is None:
        self.teach_pose = geometry_msgs.msg.PoseStamped()
    else:
      self.reg_pose = geometry_msgs.msg.PoseStamped()
      self.teach_pose = geometry_msgs.msg.PoseStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.reg_pose.header.seq, _x.reg_pose.header.stamp.secs, _x.reg_pose.header.stamp.nsecs))
      _x = self.reg_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.reg_pose.pose.position.x, _x.reg_pose.pose.position.y, _x.reg_pose.pose.position.z, _x.reg_pose.pose.orientation.x, _x.reg_pose.pose.orientation.y, _x.reg_pose.pose.orientation.z, _x.reg_pose.pose.orientation.w, _x.teach_pose.header.seq, _x.teach_pose.header.stamp.secs, _x.teach_pose.header.stamp.nsecs))
      _x = self.teach_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.teach_pose.pose.position.x, _x.teach_pose.pose.position.y, _x.teach_pose.pose.position.z, _x.teach_pose.pose.orientation.x, _x.teach_pose.pose.orientation.y, _x.teach_pose.pose.orientation.z, _x.teach_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reg_pose is None:
        self.reg_pose = geometry_msgs.msg.PoseStamped()
      if self.teach_pose is None:
        self.teach_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.reg_pose.header.seq, _x.reg_pose.header.stamp.secs, _x.reg_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reg_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reg_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.reg_pose.pose.position.x, _x.reg_pose.pose.position.y, _x.reg_pose.pose.position.z, _x.reg_pose.pose.orientation.x, _x.reg_pose.pose.orientation.y, _x.reg_pose.pose.orientation.z, _x.reg_pose.pose.orientation.w, _x.teach_pose.header.seq, _x.teach_pose.header.stamp.secs, _x.teach_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.teach_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.teach_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.teach_pose.pose.position.x, _x.teach_pose.pose.position.y, _x.teach_pose.pose.position.z, _x.teach_pose.pose.orientation.x, _x.teach_pose.pose.orientation.y, _x.teach_pose.pose.orientation.z, _x.teach_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.reg_pose.header.seq, _x.reg_pose.header.stamp.secs, _x.reg_pose.header.stamp.nsecs))
      _x = self.reg_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.reg_pose.pose.position.x, _x.reg_pose.pose.position.y, _x.reg_pose.pose.position.z, _x.reg_pose.pose.orientation.x, _x.reg_pose.pose.orientation.y, _x.reg_pose.pose.orientation.z, _x.reg_pose.pose.orientation.w, _x.teach_pose.header.seq, _x.teach_pose.header.stamp.secs, _x.teach_pose.header.stamp.nsecs))
      _x = self.teach_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.teach_pose.pose.position.x, _x.teach_pose.pose.position.y, _x.teach_pose.pose.position.z, _x.teach_pose.pose.orientation.x, _x.teach_pose.pose.orientation.y, _x.teach_pose.pose.orientation.z, _x.teach_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reg_pose is None:
        self.reg_pose = geometry_msgs.msg.PoseStamped()
      if self.teach_pose is None:
        self.teach_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.reg_pose.header.seq, _x.reg_pose.header.stamp.secs, _x.reg_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reg_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reg_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.reg_pose.pose.position.x, _x.reg_pose.pose.position.y, _x.reg_pose.pose.position.z, _x.reg_pose.pose.orientation.x, _x.reg_pose.pose.orientation.y, _x.reg_pose.pose.orientation.z, _x.reg_pose.pose.orientation.w, _x.teach_pose.header.seq, _x.teach_pose.header.stamp.secs, _x.teach_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.teach_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.teach_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.teach_pose.pose.position.x, _x.teach_pose.pose.position.y, _x.teach_pose.pose.position.z, _x.teach_pose.pose.orientation.x, _x.teach_pose.pose.orientation.y, _x.teach_pose.pose.orientation.z, _x.teach_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/XGAuxUtilityResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class XGAuxUtilityResponse(genpy.Message):
  _md5sum = "8b810613bd7e6867ccbfac2fb14e2de4"
  _type = "dg_msgs/XGAuxUtilityResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UniversalStateInfo  state_info

================================================================================
MSG: dg_msgs/UniversalStateInfo
int32 state_index   # 状态索引值：统一0是正常，其他数字自定义
string node_name    # 当前节点名
string state_msgs   # 附加信息，相当于additional_msgs"""
  __slots__ = ['state_info']
  _slot_types = ['dg_msgs/UniversalStateInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XGAuxUtilityResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
    else:
      self.state_info = dg_msgs.msg.UniversalStateInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state_info.state_index
      buff.write(_get_struct_i().pack(_x))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      start = end
      end += 4
      (self.state_info.state_index,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state_info.state_index
      buff.write(_get_struct_i().pack(_x))
      _x = self.state_info.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_info.state_msgs
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state_info is None:
        self.state_info = dg_msgs.msg.UniversalStateInfo()
      end = 0
      start = end
      end += 4
      (self.state_info.state_index,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_info.state_msgs = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_info.state_msgs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class XGAuxUtility(object):
  _type          = 'dg_msgs/XGAuxUtility'
  _md5sum = '8f88c347ee9cc9a18c8541916b5018b2'
  _request_class  = XGAuxUtilityRequest
  _response_class = XGAuxUtilityResponse
