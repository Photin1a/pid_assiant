# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/TeachingRegframeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TeachingRegframeRequest(genpy.Message):
  _md5sum = "955a95a4072012a34535bf74a9393e3c"
  _type = "dg_msgs/TeachingRegframeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool update_head2F
string pcd_regframe_path
string json_save_path
string region_name
string lidar_topic

"""
  __slots__ = ['update_head2F','pcd_regframe_path','json_save_path','region_name','lidar_topic']
  _slot_types = ['bool','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       update_head2F,pcd_regframe_path,json_save_path,region_name,lidar_topic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeachingRegframeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.update_head2F is None:
        self.update_head2F = False
      if self.pcd_regframe_path is None:
        self.pcd_regframe_path = ''
      if self.json_save_path is None:
        self.json_save_path = ''
      if self.region_name is None:
        self.region_name = ''
      if self.lidar_topic is None:
        self.lidar_topic = ''
    else:
      self.update_head2F = False
      self.pcd_regframe_path = ''
      self.json_save_path = ''
      self.region_name = ''
      self.lidar_topic = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.update_head2F
      buff.write(_get_struct_B().pack(_x))
      _x = self.pcd_regframe_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.json_save_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.region_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.update_head2F,) = _get_struct_B().unpack(str[start:end])
      self.update_head2F = bool(self.update_head2F)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_regframe_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_regframe_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.json_save_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.json_save_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.update_head2F
      buff.write(_get_struct_B().pack(_x))
      _x = self.pcd_regframe_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.json_save_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.region_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.update_head2F,) = _get_struct_B().unpack(str[start:end])
      self.update_head2F = bool(self.update_head2F)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_regframe_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_regframe_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.json_save_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.json_save_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/TeachingRegframeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TeachingRegframeResponse(genpy.Message):
  _md5sum = "f8fc278f54dd5e1f6f87b89c3c58641c"
  _type = "dg_msgs/TeachingRegframeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string pcd_regframe_path
geometry_msgs/Pose pose_regframe2head
geometry_msgs/Pose pose_head2F


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['pcd_regframe_path','pose_regframe2head','pose_head2F']
  _slot_types = ['string','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pcd_regframe_path,pose_regframe2head,pose_head2F

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeachingRegframeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pcd_regframe_path is None:
        self.pcd_regframe_path = ''
      if self.pose_regframe2head is None:
        self.pose_regframe2head = geometry_msgs.msg.Pose()
      if self.pose_head2F is None:
        self.pose_head2F = geometry_msgs.msg.Pose()
    else:
      self.pcd_regframe_path = ''
      self.pose_regframe2head = geometry_msgs.msg.Pose()
      self.pose_head2F = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.pcd_regframe_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.pose_regframe2head.position.x, _x.pose_regframe2head.position.y, _x.pose_regframe2head.position.z, _x.pose_regframe2head.orientation.x, _x.pose_regframe2head.orientation.y, _x.pose_regframe2head.orientation.z, _x.pose_regframe2head.orientation.w, _x.pose_head2F.position.x, _x.pose_head2F.position.y, _x.pose_head2F.position.z, _x.pose_head2F.orientation.x, _x.pose_head2F.orientation.y, _x.pose_head2F.orientation.z, _x.pose_head2F.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_regframe2head is None:
        self.pose_regframe2head = geometry_msgs.msg.Pose()
      if self.pose_head2F is None:
        self.pose_head2F = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_regframe_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_regframe_path = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.pose_regframe2head.position.x, _x.pose_regframe2head.position.y, _x.pose_regframe2head.position.z, _x.pose_regframe2head.orientation.x, _x.pose_regframe2head.orientation.y, _x.pose_regframe2head.orientation.z, _x.pose_regframe2head.orientation.w, _x.pose_head2F.position.x, _x.pose_head2F.position.y, _x.pose_head2F.position.z, _x.pose_head2F.orientation.x, _x.pose_head2F.orientation.y, _x.pose_head2F.orientation.z, _x.pose_head2F.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.pcd_regframe_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.pose_regframe2head.position.x, _x.pose_regframe2head.position.y, _x.pose_regframe2head.position.z, _x.pose_regframe2head.orientation.x, _x.pose_regframe2head.orientation.y, _x.pose_regframe2head.orientation.z, _x.pose_regframe2head.orientation.w, _x.pose_head2F.position.x, _x.pose_head2F.position.y, _x.pose_head2F.position.z, _x.pose_head2F.orientation.x, _x.pose_head2F.orientation.y, _x.pose_head2F.orientation.z, _x.pose_head2F.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_regframe2head is None:
        self.pose_regframe2head = geometry_msgs.msg.Pose()
      if self.pose_head2F is None:
        self.pose_head2F = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd_regframe_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd_regframe_path = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.pose_regframe2head.position.x, _x.pose_regframe2head.position.y, _x.pose_regframe2head.position.z, _x.pose_regframe2head.orientation.x, _x.pose_regframe2head.orientation.y, _x.pose_regframe2head.orientation.z, _x.pose_regframe2head.orientation.w, _x.pose_head2F.position.x, _x.pose_head2F.position.y, _x.pose_head2F.position.z, _x.pose_head2F.orientation.x, _x.pose_head2F.orientation.y, _x.pose_head2F.orientation.z, _x.pose_head2F.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
class TeachingRegframe(object):
  _type          = 'dg_msgs/TeachingRegframe'
  _md5sum = '82733c39cc3dc283e1ac8112691de480'
  _request_class  = TeachingRegframeRequest
  _response_class = TeachingRegframeResponse
