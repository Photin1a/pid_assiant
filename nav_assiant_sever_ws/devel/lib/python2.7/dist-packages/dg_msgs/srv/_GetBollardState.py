# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/GetBollardStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetBollardStateRequest(genpy.Message):
  _md5sum = "a4e4c048ccf1d3acdeec8c85b63f11ee"
  _type = "dg_msgs/GetBollardStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 获得升降柱状态
int32 bollard_index         # 升降柱编号
"""
  __slots__ = ['bollard_index']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bollard_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetBollardStateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bollard_index is None:
        self.bollard_index = 0
    else:
      self.bollard_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.bollard_index
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.bollard_index,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.bollard_index
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.bollard_index,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/GetBollardStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class GetBollardStateResponse(genpy.Message):
  _md5sum = "46329bf08315b68e8287f20b995b0a8b"
  _type = "dg_msgs/GetBollardStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """BollardState bollard_state  # 升降柱状态

================================================================================
MSG: dg_msgs/BollardState
# 升降柱状态信息
string number               # 设备组编号
string bollard_name         # 升降柱名
float32 absolute_height     # 升降柱绝对高度
float32 speed               # 升降柱速度
bool is_aviable             # 当前是否可用；急停被按下、当前处于自动、modbus指针没有成功建立
bool is_moving              # 当前是否正在运动"""
  __slots__ = ['bollard_state']
  _slot_types = ['dg_msgs/BollardState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bollard_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetBollardStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bollard_state is None:
        self.bollard_state = dg_msgs.msg.BollardState()
    else:
      self.bollard_state = dg_msgs.msg.BollardState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.bollard_state.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bollard_state.bollard_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.bollard_state.absolute_height, _x.bollard_state.speed, _x.bollard_state.is_aviable, _x.bollard_state.is_moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bollard_state is None:
        self.bollard_state = dg_msgs.msg.BollardState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_state.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_state.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_state.bollard_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_state.bollard_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.bollard_state.absolute_height, _x.bollard_state.speed, _x.bollard_state.is_aviable, _x.bollard_state.is_moving,) = _get_struct_2f2B().unpack(str[start:end])
      self.bollard_state.is_aviable = bool(self.bollard_state.is_aviable)
      self.bollard_state.is_moving = bool(self.bollard_state.is_moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.bollard_state.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bollard_state.bollard_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.bollard_state.absolute_height, _x.bollard_state.speed, _x.bollard_state.is_aviable, _x.bollard_state.is_moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bollard_state is None:
        self.bollard_state = dg_msgs.msg.BollardState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_state.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_state.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_state.bollard_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_state.bollard_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.bollard_state.absolute_height, _x.bollard_state.speed, _x.bollard_state.is_aviable, _x.bollard_state.is_moving,) = _get_struct_2f2B().unpack(str[start:end])
      self.bollard_state.is_aviable = bool(self.bollard_state.is_aviable)
      self.bollard_state.is_moving = bool(self.bollard_state.is_moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B = None
def _get_struct_2f2B():
    global _struct_2f2B
    if _struct_2f2B is None:
        _struct_2f2B = struct.Struct("<2f2B")
    return _struct_2f2B
class GetBollardState(object):
  _type          = 'dg_msgs/GetBollardState'
  _md5sum = 'b8d36c8ac70f1a2e4bd8359afad61cf1'
  _request_class  = GetBollardStateRequest
  _response_class = GetBollardStateResponse
