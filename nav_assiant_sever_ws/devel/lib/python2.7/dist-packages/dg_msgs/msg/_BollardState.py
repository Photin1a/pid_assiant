# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/BollardState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BollardState(genpy.Message):
  _md5sum = "97182af4acca076bb0c4ed889ad3c8a0"
  _type = "dg_msgs/BollardState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 升降柱状态信息
string number               # 设备组编号
string bollard_name         # 升降柱名
float32 absolute_height     # 升降柱绝对高度
float32 speed               # 升降柱速度
bool is_aviable             # 当前是否可用；急停被按下、当前处于自动、modbus指针没有成功建立
bool is_moving              # 当前是否正在运动"""
  __slots__ = ['number','bollard_name','absolute_height','speed','is_aviable','is_moving']
  _slot_types = ['string','string','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number,bollard_name,absolute_height,speed,is_aviable,is_moving

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BollardState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number is None:
        self.number = ''
      if self.bollard_name is None:
        self.bollard_name = ''
      if self.absolute_height is None:
        self.absolute_height = 0.
      if self.speed is None:
        self.speed = 0.
      if self.is_aviable is None:
        self.is_aviable = False
      if self.is_moving is None:
        self.is_moving = False
    else:
      self.number = ''
      self.bollard_name = ''
      self.absolute_height = 0.
      self.speed = 0.
      self.is_aviable = False
      self.is_moving = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bollard_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.absolute_height, _x.speed, _x.is_aviable, _x.is_moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.absolute_height, _x.speed, _x.is_aviable, _x.is_moving,) = _get_struct_2f2B().unpack(str[start:end])
      self.is_aviable = bool(self.is_aviable)
      self.is_moving = bool(self.is_moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bollard_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2B().pack(_x.absolute_height, _x.speed, _x.is_aviable, _x.is_moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bollard_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bollard_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.absolute_height, _x.speed, _x.is_aviable, _x.is_moving,) = _get_struct_2f2B().unpack(str[start:end])
      self.is_aviable = bool(self.is_aviable)
      self.is_moving = bool(self.is_moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2B = None
def _get_struct_2f2B():
    global _struct_2f2B
    if _struct_2f2B is None:
        _struct_2f2B = struct.Struct("<2f2B")
    return _struct_2f2B
