# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/EquipmentGroup.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class EquipmentGroup(genpy.Message):
  _md5sum = "3f0794ee84d32d51d621caef93d18cf5"
  _type = "dg_msgs/EquipmentGroup"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name             # 设备组名称
string number           # 设备组编号
SlideTableInfo slide_table
LiftingColumnInfo lifting_column
RobotArmInfo robot_arm
CameraInfo[] cameras

================================================================================
MSG: dg_msgs/SlideTableInfo
EquipmentCommon equipment
string number           # 设备组编号

================================================================================
MSG: dg_msgs/EquipmentCommon
int32 equipment_id
string equipment_name
bool connected
uint64 connected_time
string model
string manufacturer

================================================================================
MSG: dg_msgs/LiftingColumnInfo
EquipmentCommon equipment
string number           # 设备组编号

================================================================================
MSG: dg_msgs/RobotArmInfo
EquipmentCommon equipment
string number           # 设备组编号
int32 state
bool enabled            # 机械臂是否使能标志
bool protective_stop    # 机械臂是否检测到碰撞
bool emergency_stop     # 机械臂是否急停
bool drag_status        # 机械臂是否处于拖拽状态
bool recording          # 机械臂是否处于录制状态
bool moving_stop        # 机械臂是否处于运动状态
float64 speed_ratio     # 机械臂当前速度
bool error_status       # 机械臂是否处于报错状态
string[] error_msgs     # 机械臂的错误信息反馈
string payload          # 自定义信息，用于存放不同型号机械臂信息
================================================================================
MSG: dg_msgs/CameraInfo
EquipmentCommon equipment
string number           # 设备组编号
string sn_number
int32 type
float32[] intrinsics
"""
  __slots__ = ['name','number','slide_table','lifting_column','robot_arm','cameras']
  _slot_types = ['string','string','dg_msgs/SlideTableInfo','dg_msgs/LiftingColumnInfo','dg_msgs/RobotArmInfo','dg_msgs/CameraInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,number,slide_table,lifting_column,robot_arm,cameras

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EquipmentGroup, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.number is None:
        self.number = ''
      if self.slide_table is None:
        self.slide_table = dg_msgs.msg.SlideTableInfo()
      if self.lifting_column is None:
        self.lifting_column = dg_msgs.msg.LiftingColumnInfo()
      if self.robot_arm is None:
        self.robot_arm = dg_msgs.msg.RobotArmInfo()
      if self.cameras is None:
        self.cameras = []
    else:
      self.name = ''
      self.number = ''
      self.slide_table = dg_msgs.msg.SlideTableInfo()
      self.lifting_column = dg_msgs.msg.LiftingColumnInfo()
      self.robot_arm = dg_msgs.msg.RobotArmInfo()
      self.cameras = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.slide_table.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.slide_table.equipment.connected, _x.slide_table.equipment.connected_time))
      _x = self.slide_table.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.lifting_column.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.lifting_column.equipment.connected, _x.lifting_column.equipment.connected_time))
      _x = self.lifting_column.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.robot_arm.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.robot_arm.equipment.connected, _x.robot_arm.equipment.connected_time))
      _x = self.robot_arm.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6BdB().pack(_x.robot_arm.state, _x.robot_arm.enabled, _x.robot_arm.protective_stop, _x.robot_arm.emergency_stop, _x.robot_arm.drag_status, _x.robot_arm.recording, _x.robot_arm.moving_stop, _x.robot_arm.speed_ratio, _x.robot_arm.error_status))
      length = len(self.robot_arm.error_msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_arm.error_msgs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.robot_arm.payload
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.cameras)
      buff.write(_struct_I.pack(length))
      for val1 in self.cameras:
        _v1 = val1.equipment
        _x = _v1.equipment_id
        buff.write(_get_struct_i().pack(_x))
        _x = _v1.equipment_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_BQ().pack(_x.connected, _x.connected_time))
        _x = _v1.model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.manufacturer
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sn_number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.intrinsics)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.intrinsics))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slide_table is None:
        self.slide_table = dg_msgs.msg.SlideTableInfo()
      if self.lifting_column is None:
        self.lifting_column = dg_msgs.msg.LiftingColumnInfo()
      if self.robot_arm is None:
        self.robot_arm = dg_msgs.msg.RobotArmInfo()
      if self.cameras is None:
        self.cameras = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.number = str[start:end]
      start = end
      end += 4
      (self.slide_table.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.slide_table.equipment.connected, _x.slide_table.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.slide_table.equipment.connected = bool(self.slide_table.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.number = str[start:end]
      start = end
      end += 4
      (self.lifting_column.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.lifting_column.equipment.connected, _x.lifting_column.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.lifting_column.equipment.connected = bool(self.lifting_column.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.number = str[start:end]
      start = end
      end += 4
      (self.robot_arm.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.robot_arm.equipment.connected, _x.robot_arm.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.robot_arm.equipment.connected = bool(self.robot_arm.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.number = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.robot_arm.state, _x.robot_arm.enabled, _x.robot_arm.protective_stop, _x.robot_arm.emergency_stop, _x.robot_arm.drag_status, _x.robot_arm.recording, _x.robot_arm.moving_stop, _x.robot_arm.speed_ratio, _x.robot_arm.error_status,) = _get_struct_i6BdB().unpack(str[start:end])
      self.robot_arm.enabled = bool(self.robot_arm.enabled)
      self.robot_arm.protective_stop = bool(self.robot_arm.protective_stop)
      self.robot_arm.emergency_stop = bool(self.robot_arm.emergency_stop)
      self.robot_arm.drag_status = bool(self.robot_arm.drag_status)
      self.robot_arm.recording = bool(self.robot_arm.recording)
      self.robot_arm.moving_stop = bool(self.robot_arm.moving_stop)
      self.robot_arm.error_status = bool(self.robot_arm.error_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_arm.error_msgs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_arm.error_msgs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.payload = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.payload = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cameras = []
      for i in range(0, length):
        val1 = dg_msgs.msg.CameraInfo()
        _v2 = val1.equipment
        start = end
        end += 4
        (_v2.equipment_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v2.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v2.equipment_name = str[start:end]
        _x = _v2
        start = end
        end += 9
        (_x.connected, _x.connected_time,) = _get_struct_BQ().unpack(str[start:end])
        _v2.connected = bool(_v2.connected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v2.model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v2.model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v2.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v2.manufacturer = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sn_number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sn_number = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsics = s.unpack(str[start:end])
        self.cameras.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.slide_table.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.slide_table.equipment.connected, _x.slide_table.equipment.connected_time))
      _x = self.slide_table.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.slide_table.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.lifting_column.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.lifting_column.equipment.connected, _x.lifting_column.equipment.connected_time))
      _x = self.lifting_column.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lifting_column.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.robot_arm.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.robot_arm.equipment.connected, _x.robot_arm.equipment.connected_time))
      _x = self.robot_arm.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_arm.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6BdB().pack(_x.robot_arm.state, _x.robot_arm.enabled, _x.robot_arm.protective_stop, _x.robot_arm.emergency_stop, _x.robot_arm.drag_status, _x.robot_arm.recording, _x.robot_arm.moving_stop, _x.robot_arm.speed_ratio, _x.robot_arm.error_status))
      length = len(self.robot_arm.error_msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_arm.error_msgs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.robot_arm.payload
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.cameras)
      buff.write(_struct_I.pack(length))
      for val1 in self.cameras:
        _v3 = val1.equipment
        _x = _v3.equipment_id
        buff.write(_get_struct_i().pack(_x))
        _x = _v3.equipment_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3
        buff.write(_get_struct_BQ().pack(_x.connected, _x.connected_time))
        _x = _v3.model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3.manufacturer
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.sn_number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.intrinsics)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.intrinsics.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slide_table is None:
        self.slide_table = dg_msgs.msg.SlideTableInfo()
      if self.lifting_column is None:
        self.lifting_column = dg_msgs.msg.LiftingColumnInfo()
      if self.robot_arm is None:
        self.robot_arm = dg_msgs.msg.RobotArmInfo()
      if self.cameras is None:
        self.cameras = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.number = str[start:end]
      start = end
      end += 4
      (self.slide_table.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.slide_table.equipment.connected, _x.slide_table.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.slide_table.equipment.connected = bool(self.slide_table.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slide_table.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slide_table.number = str[start:end]
      start = end
      end += 4
      (self.lifting_column.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.lifting_column.equipment.connected, _x.lifting_column.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.lifting_column.equipment.connected = bool(self.lifting_column.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lifting_column.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lifting_column.number = str[start:end]
      start = end
      end += 4
      (self.robot_arm.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.robot_arm.equipment.connected, _x.robot_arm.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.robot_arm.equipment.connected = bool(self.robot_arm.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.equipment.manufacturer = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.number = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.robot_arm.state, _x.robot_arm.enabled, _x.robot_arm.protective_stop, _x.robot_arm.emergency_stop, _x.robot_arm.drag_status, _x.robot_arm.recording, _x.robot_arm.moving_stop, _x.robot_arm.speed_ratio, _x.robot_arm.error_status,) = _get_struct_i6BdB().unpack(str[start:end])
      self.robot_arm.enabled = bool(self.robot_arm.enabled)
      self.robot_arm.protective_stop = bool(self.robot_arm.protective_stop)
      self.robot_arm.emergency_stop = bool(self.robot_arm.emergency_stop)
      self.robot_arm.drag_status = bool(self.robot_arm.drag_status)
      self.robot_arm.recording = bool(self.robot_arm.recording)
      self.robot_arm.moving_stop = bool(self.robot_arm.moving_stop)
      self.robot_arm.error_status = bool(self.robot_arm.error_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_arm.error_msgs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_arm.error_msgs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_arm.payload = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_arm.payload = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cameras = []
      for i in range(0, length):
        val1 = dg_msgs.msg.CameraInfo()
        _v4 = val1.equipment
        start = end
        end += 4
        (_v4.equipment_id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.equipment_name = str[start:end]
        _x = _v4
        start = end
        end += 9
        (_x.connected, _x.connected_time,) = _get_struct_BQ().unpack(str[start:end])
        _v4.connected = bool(_v4.connected)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.manufacturer = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sn_number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sn_number = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsics = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.cameras.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BQ = None
def _get_struct_BQ():
    global _struct_BQ
    if _struct_BQ is None:
        _struct_BQ = struct.Struct("<BQ")
    return _struct_BQ
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i6BdB = None
def _get_struct_i6BdB():
    global _struct_i6BdB
    if _struct_i6BdB is None:
        _struct_i6BdB = struct.Struct("<i6BdB")
    return _struct_i6BdB
