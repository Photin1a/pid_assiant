# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/ChassisInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class ChassisInfo(genpy.Message):
  _md5sum = "b34e814c1edbbed19ddf136cbfcaad5f"
  _type = "dg_msgs/ChassisInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EquipmentCommon equipment
float32 min_linear_speed
float32 max_linear_speed
float32 linear_speed_scaling
float32 min_angular_speed
float32 max_angular_speed
float32 angular_speed_scaling

================================================================================
MSG: dg_msgs/EquipmentCommon
int32 equipment_id
string equipment_name
bool connected
uint64 connected_time
string model
string manufacturer
"""
  __slots__ = ['equipment','min_linear_speed','max_linear_speed','linear_speed_scaling','min_angular_speed','max_angular_speed','angular_speed_scaling']
  _slot_types = ['dg_msgs/EquipmentCommon','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       equipment,min_linear_speed,max_linear_speed,linear_speed_scaling,min_angular_speed,max_angular_speed,angular_speed_scaling

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChassisInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.equipment is None:
        self.equipment = dg_msgs.msg.EquipmentCommon()
      if self.min_linear_speed is None:
        self.min_linear_speed = 0.
      if self.max_linear_speed is None:
        self.max_linear_speed = 0.
      if self.linear_speed_scaling is None:
        self.linear_speed_scaling = 0.
      if self.min_angular_speed is None:
        self.min_angular_speed = 0.
      if self.max_angular_speed is None:
        self.max_angular_speed = 0.
      if self.angular_speed_scaling is None:
        self.angular_speed_scaling = 0.
    else:
      self.equipment = dg_msgs.msg.EquipmentCommon()
      self.min_linear_speed = 0.
      self.max_linear_speed = 0.
      self.linear_speed_scaling = 0.
      self.min_angular_speed = 0.
      self.max_angular_speed = 0.
      self.angular_speed_scaling = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.equipment.connected, _x.equipment.connected_time))
      _x = self.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.min_linear_speed, _x.max_linear_speed, _x.linear_speed_scaling, _x.min_angular_speed, _x.max_angular_speed, _x.angular_speed_scaling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.equipment is None:
        self.equipment = dg_msgs.msg.EquipmentCommon()
      end = 0
      start = end
      end += 4
      (self.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.equipment.connected, _x.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.equipment.connected = bool(self.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.manufacturer = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.min_linear_speed, _x.max_linear_speed, _x.linear_speed_scaling, _x.min_angular_speed, _x.max_angular_speed, _x.angular_speed_scaling,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.equipment.equipment_id
      buff.write(_get_struct_i().pack(_x))
      _x = self.equipment.equipment_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BQ().pack(_x.equipment.connected, _x.equipment.connected_time))
      _x = self.equipment.model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.equipment.manufacturer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.min_linear_speed, _x.max_linear_speed, _x.linear_speed_scaling, _x.min_angular_speed, _x.max_angular_speed, _x.angular_speed_scaling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.equipment is None:
        self.equipment = dg_msgs.msg.EquipmentCommon()
      end = 0
      start = end
      end += 4
      (self.equipment.equipment_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.equipment_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.equipment_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.equipment.connected, _x.equipment.connected_time,) = _get_struct_BQ().unpack(str[start:end])
      self.equipment.connected = bool(self.equipment.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.model = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.equipment.manufacturer = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.equipment.manufacturer = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.min_linear_speed, _x.max_linear_speed, _x.linear_speed_scaling, _x.min_angular_speed, _x.max_angular_speed, _x.angular_speed_scaling,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_BQ = None
def _get_struct_BQ():
    global _struct_BQ
    if _struct_BQ is None:
        _struct_BQ = struct.Struct("<BQ")
    return _struct_BQ
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
