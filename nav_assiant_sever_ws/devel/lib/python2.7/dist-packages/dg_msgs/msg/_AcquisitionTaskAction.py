# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/AcquisitionTaskAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import dg_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class AcquisitionTaskAction(genpy.Message):
  _md5sum = "879fd3e615c2c712f1fcf376c0e0558a"
  _type = "dg_msgs/AcquisitionTaskAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

AcquisitionTaskActionGoal action_goal
AcquisitionTaskActionResult action_result
AcquisitionTaskActionFeedback action_feedback

================================================================================
MSG: dg_msgs/AcquisitionTaskActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
AcquisitionTaskGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: dg_msgs/AcquisitionTaskGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
string id
geometry_msgs/PoseStamped pose                          # 停车点位置(相对于车头（train_head）坐标系下的位置关系)
geometry_msgs/PoseStamped relative_pose                 # 停车点位置(相对于区域（region）坐标系下的位置关系)
int32 model_type                                        # 模型类型（车头： 1，区域： 2）
string model_path                                       # 车头、区域模型文件路径
string region_frame_path                                # 区域配准帧文件路径
float64[] matrix_region_regionframe                     # 区域到区域配准帧的配准结果

string directory                                        # 图片存放目录
PointSequence[] image_points                            # 像点
string custom_message                                   # 自定义信息

int32 region_type                                       # 区域类型，0直接复用，1镜像复用，2旋转180复用
float64[] matrix_region_init                            # 区域初始矩阵，镜像复用和旋转复用，在进行配准时需要提前对区域进行镜像和旋转
float64[] matrix_region_trainhead                       # 区域转换矩阵，区域在车头坐标系下的位置关系, 作为配准时的target的初始值
int32 reg_type                                          # 配准采集数据类型， 0为相机，1为雷达
string lidar_topic                                      # 雷达topic，用于确定使用哪个雷达采集数据
CorrectionPoint correction_point                        # 纠偏点，配准采集选择相机，相机需要移动到correction_point里传进来的pose, pose是存储在区域坐标系下的，配合relative_pose使用
CorrectionJoint correction_joint                        # 纠偏轨迹
CropBox box_target                                      # 配准所需要的target框
CropBox box_source                                      # 配准所需要的source框

int32 cruising_route_type								# 0 坑道内巡检路线，1 车侧巡检路线
int32 geometry_completion_type							# 几何体补全类型，0 柱体

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: dg_msgs/PointSequence
string number      # 设备组编号
ImagePoint[] points    # 机械臂拍照点位

================================================================================
MSG: dg_msgs/ImagePoint
geometry_msgs/PoseStamped pose
trajectory_msgs/JointTrajectoryPoint joint
float32 offset      # 升降柱伸缩量
string custom_message
ImageGoal image_goal
string point_file_name

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: dg_msgs/ImageGoal
string id          # ID
string number     # 设备编号
int32 types     # 拍照类型，灰度为`1`，彩色为`2`，深度为`4`，点云为`8`，多种类型时按位相与

================================================================================
MSG: dg_msgs/CorrectionPoint
string number                                   # 设备组编号
geometry_msgs/PoseStamped pose                  # 相机目标点的pose
float32 offset                                  # 升降柱伸缩量
string custom_message
================================================================================
MSG: dg_msgs/CorrectionJoint
#纠偏轨迹
string number       # 设备编码
trajectory_msgs/JointTrajectoryPoint[] joints # 机械臂关节位置
================================================================================
MSG: dg_msgs/CropBox
float32[] center_
float32[] R_euler
float32[] extent_
================================================================================
MSG: dg_msgs/AcquisitionTaskActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
AcquisitionTaskResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: dg_msgs/AcquisitionTaskResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
string id
ImageResult[] results
string err_msg

================================================================================
MSG: dg_msgs/ImageResult
string id
int32 result        # 拍照结果 0: 成功  非0：失败
string gray         # 灰度图路径
string rgb          # 彩色图路径
string depth        # 深度图路径
string point_cloud  # 点云路径
float32[] intrinsic # 相机内参
================================================================================
MSG: dg_msgs/AcquisitionTaskActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
AcquisitionTaskFeedback feedback

================================================================================
MSG: dg_msgs/AcquisitionTaskFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
ImageResult[] results
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['dg_msgs/AcquisitionTaskActionGoal','dg_msgs/AcquisitionTaskActionResult','dg_msgs/AcquisitionTaskActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AcquisitionTaskAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = dg_msgs.msg.AcquisitionTaskActionGoal()
      if self.action_result is None:
        self.action_result = dg_msgs.msg.AcquisitionTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = dg_msgs.msg.AcquisitionTaskActionFeedback()
    else:
      self.action_goal = dg_msgs.msg.AcquisitionTaskActionGoal()
      self.action_result = dg_msgs.msg.AcquisitionTaskActionResult()
      self.action_feedback = dg_msgs.msg.AcquisitionTaskActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.pose.header.seq, _x.action_goal.goal.pose.header.stamp.secs, _x.action_goal.goal.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pose.pose.position.x, _x.action_goal.goal.pose.pose.position.y, _x.action_goal.goal.pose.pose.position.z, _x.action_goal.goal.pose.pose.orientation.x, _x.action_goal.goal.pose.pose.orientation.y, _x.action_goal.goal.pose.pose.orientation.z, _x.action_goal.goal.pose.pose.orientation.w, _x.action_goal.goal.relative_pose.header.seq, _x.action_goal.goal.relative_pose.header.stamp.secs, _x.action_goal.goal.relative_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.relative_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di().pack(_x.action_goal.goal.relative_pose.pose.position.x, _x.action_goal.goal.relative_pose.pose.position.y, _x.action_goal.goal.relative_pose.pose.position.z, _x.action_goal.goal.relative_pose.pose.orientation.x, _x.action_goal.goal.relative_pose.pose.orientation.y, _x.action_goal.goal.relative_pose.pose.orientation.z, _x.action_goal.goal.relative_pose.pose.orientation.w, _x.action_goal.goal.model_type))
      _x = self.action_goal.goal.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.matrix_region_regionframe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.matrix_region_regionframe))
      _x = self.action_goal.goal.directory
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.image_points:
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v1 = val2.pose
          _v2 = _v1.header
          _x = _v2.seq
          buff.write(_get_struct_I().pack(_x))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v4 = _v1.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v7 = val2.joint
          length = len(_v7.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v7.positions))
          length = len(_v7.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v7.velocities))
          length = len(_v7.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v7.accelerations))
          length = len(_v7.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*_v7.effort))
          _v8 = _v7.time_from_start
          _x = _v8
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.offset
          buff.write(_get_struct_f().pack(_x))
          _x = val2.custom_message
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v9 = val2.image_goal
          _x = _v9.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v9.number
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v9.types
          buff.write(_get_struct_i().pack(_x))
          _x = val2.point_file_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.region_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.action_goal.goal.matrix_region_init)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.matrix_region_init))
      length = len(self.action_goal.goal.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.matrix_region_trainhead))
      _x = self.action_goal.goal.reg_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.action_goal.goal.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.correction_point.pose.header.seq, _x.action_goal.goal.correction_point.pose.header.stamp.secs, _x.action_goal.goal.correction_point.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.action_goal.goal.correction_point.pose.pose.position.x, _x.action_goal.goal.correction_point.pose.pose.position.y, _x.action_goal.goal.correction_point.pose.pose.position.z, _x.action_goal.goal.correction_point.pose.pose.orientation.x, _x.action_goal.goal.correction_point.pose.pose.orientation.y, _x.action_goal.goal.correction_point.pose.pose.orientation.z, _x.action_goal.goal.correction_point.pose.pose.orientation.w, _x.action_goal.goal.correction_point.offset))
      _x = self.action_goal.goal.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.correction_joint.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.correction_joint.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.correction_joint.joints:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
        _v10 = val1.time_from_start
        _x = _v10
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.action_goal.goal.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_target.center_))
      length = len(self.action_goal.goal.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_target.R_euler))
      length = len(self.action_goal.goal.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_target.extent_))
      length = len(self.action_goal.goal.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_source.center_))
      length = len(self.action_goal.goal.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_source.R_euler))
      length = len(self.action_goal.goal.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.box_source.extent_))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_goal.goal.cruising_route_type, _x.action_goal.goal.geometry_completion_type, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.results)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.results:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.result
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gray
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.rgb
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.depth
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.point_cloud
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.intrinsic)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.intrinsic))
      _x = self.action_result.result.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.results)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.results:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.result
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gray
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.rgb
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.depth
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.point_cloud
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.intrinsic)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.intrinsic))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = dg_msgs.msg.AcquisitionTaskActionGoal()
      if self.action_result is None:
        self.action_result = dg_msgs.msg.AcquisitionTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = dg_msgs.msg.AcquisitionTaskActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.pose.header.seq, _x.action_goal.goal.pose.header.stamp.secs, _x.action_goal.goal.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pose.pose.position.x, _x.action_goal.goal.pose.pose.position.y, _x.action_goal.goal.pose.pose.position.z, _x.action_goal.goal.pose.pose.orientation.x, _x.action_goal.goal.pose.pose.orientation.y, _x.action_goal.goal.pose.pose.orientation.z, _x.action_goal.goal.pose.pose.orientation.w, _x.action_goal.goal.relative_pose.header.seq, _x.action_goal.goal.relative_pose.header.stamp.secs, _x.action_goal.goal.relative_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.relative_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.relative_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.relative_pose.pose.position.x, _x.action_goal.goal.relative_pose.pose.position.y, _x.action_goal.goal.relative_pose.pose.position.z, _x.action_goal.goal.relative_pose.pose.orientation.x, _x.action_goal.goal.relative_pose.pose.orientation.y, _x.action_goal.goal.relative_pose.pose.orientation.z, _x.action_goal.goal.relative_pose.pose.orientation.w, _x.action_goal.goal.model_type,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.model_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.region_frame_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_regionframe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.directory = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.directory = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.image_points = []
      for i in range(0, length):
        val1 = dg_msgs.msg.PointSequence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = dg_msgs.msg.ImagePoint()
          _v11 = val2.pose
          _v12 = _v11.header
          start = end
          end += 4
          (_v12.seq,) = _get_struct_I().unpack(str[start:end])
          _v13 = _v12.stamp
          _x = _v13
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v12.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v12.frame_id = str[start:end]
          _v14 = _v11.pose
          _v15 = _v14.position
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v16 = _v14.orientation
          _x = _v16
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v17 = val2.joint
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v17.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v17.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v17.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v17.effort = s.unpack(str[start:end])
          _v18 = _v17.time_from_start
          _x = _v18
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (val2.offset,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.custom_message = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.custom_message = str[start:end]
          _v19 = val2.image_goal
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v19.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v19.id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v19.number = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v19.number = str[start:end]
          start = end
          end += 4
          (_v19.types,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.point_file_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.point_file_name = str[start:end]
          val1.points.append(val2)
        self.action_goal.goal.image_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.custom_message = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.region_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_init = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_trainhead = s.unpack(str[start:end])
      start = end
      end += 4
      (self.action_goal.goal.reg_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.correction_point.pose.header.seq, _x.action_goal.goal.correction_point.pose.header.stamp.secs, _x.action_goal.goal.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.correction_point.pose.pose.position.x, _x.action_goal.goal.correction_point.pose.pose.position.y, _x.action_goal.goal.correction_point.pose.pose.position.z, _x.action_goal.goal.correction_point.pose.pose.orientation.x, _x.action_goal.goal.correction_point.pose.pose.orientation.y, _x.action_goal.goal.correction_point.pose.pose.orientation.z, _x.action_goal.goal.correction_point.pose.pose.orientation.w, _x.action_goal.goal.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_joint.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_joint.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.correction_joint.joints = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        _v20 = val1.time_from_start
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_goal.goal.correction_joint.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.extent_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.extent_ = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.cruising_route_type, _x.action_goal.goal.geometry_completion_type, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.results = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ImageResult()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.result,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gray = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gray = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.rgb = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.rgb = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.depth = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.depth = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.point_cloud = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.point_cloud = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsic = s.unpack(str[start:end])
        self.action_result.result.results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.err_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.err_msg = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.results = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ImageResult()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.result,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gray = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gray = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.rgb = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.rgb = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.depth = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.depth = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.point_cloud = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.point_cloud = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsic = s.unpack(str[start:end])
        self.action_feedback.feedback.results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.pose.header.seq, _x.action_goal.goal.pose.header.stamp.secs, _x.action_goal.goal.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pose.pose.position.x, _x.action_goal.goal.pose.pose.position.y, _x.action_goal.goal.pose.pose.position.z, _x.action_goal.goal.pose.pose.orientation.x, _x.action_goal.goal.pose.pose.orientation.y, _x.action_goal.goal.pose.pose.orientation.z, _x.action_goal.goal.pose.pose.orientation.w, _x.action_goal.goal.relative_pose.header.seq, _x.action_goal.goal.relative_pose.header.stamp.secs, _x.action_goal.goal.relative_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.relative_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di().pack(_x.action_goal.goal.relative_pose.pose.position.x, _x.action_goal.goal.relative_pose.pose.position.y, _x.action_goal.goal.relative_pose.pose.position.z, _x.action_goal.goal.relative_pose.pose.orientation.x, _x.action_goal.goal.relative_pose.pose.orientation.y, _x.action_goal.goal.relative_pose.pose.orientation.z, _x.action_goal.goal.relative_pose.pose.orientation.w, _x.action_goal.goal.model_type))
      _x = self.action_goal.goal.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.matrix_region_regionframe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.matrix_region_regionframe.tostring())
      _x = self.action_goal.goal.directory
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.image_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.image_points:
        _x = val1.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v21 = val2.pose
          _v22 = _v21.header
          _x = _v22.seq
          buff.write(_get_struct_I().pack(_x))
          _v23 = _v22.stamp
          _x = _v23
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v22.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v24 = _v21.pose
          _v25 = _v24.position
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v26 = _v24.orientation
          _x = _v26
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v27 = val2.joint
          length = len(_v27.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v27.positions.tostring())
          length = len(_v27.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v27.velocities.tostring())
          length = len(_v27.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v27.accelerations.tostring())
          length = len(_v27.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v27.effort.tostring())
          _v28 = _v27.time_from_start
          _x = _v28
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.offset
          buff.write(_get_struct_f().pack(_x))
          _x = val2.custom_message
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v29 = val2.image_goal
          _x = _v29.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v29.number
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v29.types
          buff.write(_get_struct_i().pack(_x))
          _x = val2.point_file_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.region_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.action_goal.goal.matrix_region_init)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.matrix_region_init.tostring())
      length = len(self.action_goal.goal.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.matrix_region_trainhead.tostring())
      _x = self.action_goal.goal.reg_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.action_goal.goal.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.correction_point.pose.header.seq, _x.action_goal.goal.correction_point.pose.header.stamp.secs, _x.action_goal.goal.correction_point.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.action_goal.goal.correction_point.pose.pose.position.x, _x.action_goal.goal.correction_point.pose.pose.position.y, _x.action_goal.goal.correction_point.pose.pose.position.z, _x.action_goal.goal.correction_point.pose.pose.orientation.x, _x.action_goal.goal.correction_point.pose.pose.orientation.y, _x.action_goal.goal.correction_point.pose.pose.orientation.z, _x.action_goal.goal.correction_point.pose.pose.orientation.w, _x.action_goal.goal.correction_point.offset))
      _x = self.action_goal.goal.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.correction_joint.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.correction_joint.joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.correction_joint.joints:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v30 = val1.time_from_start
        _x = _v30
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.action_goal.goal.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_target.center_.tostring())
      length = len(self.action_goal.goal.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_target.R_euler.tostring())
      length = len(self.action_goal.goal.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_target.extent_.tostring())
      length = len(self.action_goal.goal.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_source.center_.tostring())
      length = len(self.action_goal.goal.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_source.R_euler.tostring())
      length = len(self.action_goal.goal.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_goal.goal.box_source.extent_.tostring())
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_goal.goal.cruising_route_type, _x.action_goal.goal.geometry_completion_type, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.results)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.results:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.result
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gray
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.rgb
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.depth
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.point_cloud
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.intrinsic)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.intrinsic.tostring())
      _x = self.action_result.result.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.results)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.results:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.result
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gray
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.rgb
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.depth
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.point_cloud
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.intrinsic)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.intrinsic.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = dg_msgs.msg.AcquisitionTaskActionGoal()
      if self.action_result is None:
        self.action_result = dg_msgs.msg.AcquisitionTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = dg_msgs.msg.AcquisitionTaskActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.pose.header.seq, _x.action_goal.goal.pose.header.stamp.secs, _x.action_goal.goal.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pose.pose.position.x, _x.action_goal.goal.pose.pose.position.y, _x.action_goal.goal.pose.pose.position.z, _x.action_goal.goal.pose.pose.orientation.x, _x.action_goal.goal.pose.pose.orientation.y, _x.action_goal.goal.pose.pose.orientation.z, _x.action_goal.goal.pose.pose.orientation.w, _x.action_goal.goal.relative_pose.header.seq, _x.action_goal.goal.relative_pose.header.stamp.secs, _x.action_goal.goal.relative_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.relative_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.relative_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.relative_pose.pose.position.x, _x.action_goal.goal.relative_pose.pose.position.y, _x.action_goal.goal.relative_pose.pose.position.z, _x.action_goal.goal.relative_pose.pose.orientation.x, _x.action_goal.goal.relative_pose.pose.orientation.y, _x.action_goal.goal.relative_pose.pose.orientation.z, _x.action_goal.goal.relative_pose.pose.orientation.w, _x.action_goal.goal.model_type,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.model_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.region_frame_path = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_regionframe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.directory = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.directory = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.image_points = []
      for i in range(0, length):
        val1 = dg_msgs.msg.PointSequence()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.number = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = dg_msgs.msg.ImagePoint()
          _v31 = val2.pose
          _v32 = _v31.header
          start = end
          end += 4
          (_v32.seq,) = _get_struct_I().unpack(str[start:end])
          _v33 = _v32.stamp
          _x = _v33
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v32.frame_id = str[start:end]
          _v34 = _v31.pose
          _v35 = _v34.position
          _x = _v35
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v36 = _v34.orientation
          _x = _v36
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v37 = val2.joint
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v37.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v37.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v37.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v37.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v38 = _v37.time_from_start
          _x = _v38
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (val2.offset,) = _get_struct_f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.custom_message = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.custom_message = str[start:end]
          _v39 = val2.image_goal
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v39.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v39.id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v39.number = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v39.number = str[start:end]
          start = end
          end += 4
          (_v39.types,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.point_file_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.point_file_name = str[start:end]
          val1.points.append(val2)
        self.action_goal.goal.image_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.custom_message = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.region_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_init = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.matrix_region_trainhead = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.action_goal.goal.reg_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.correction_point.pose.header.seq, _x.action_goal.goal.correction_point.pose.header.stamp.secs, _x.action_goal.goal.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.correction_point.pose.pose.position.x, _x.action_goal.goal.correction_point.pose.pose.position.y, _x.action_goal.goal.correction_point.pose.pose.position.z, _x.action_goal.goal.correction_point.pose.pose.orientation.x, _x.action_goal.goal.correction_point.pose.pose.orientation.y, _x.action_goal.goal.correction_point.pose.pose.orientation.z, _x.action_goal.goal.correction_point.pose.pose.orientation.w, _x.action_goal.goal.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.correction_joint.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.correction_joint.number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.correction_joint.joints = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v40 = val1.time_from_start
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_goal.goal.correction_joint.joints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_target.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.box_source.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.cruising_route_type, _x.action_goal.goal.geometry_completion_type, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.results = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ImageResult()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.result,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gray = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gray = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.rgb = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.rgb = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.depth = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.depth = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.point_cloud = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.point_cloud = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsic = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.action_result.result.results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.err_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.err_msg = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.results = []
      for i in range(0, length):
        val1 = dg_msgs.msg.ImageResult()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.result,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gray = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gray = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.rgb = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.rgb = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.depth = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.depth = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.point_cloud = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.point_cloud = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.intrinsic = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.action_feedback.feedback.results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i3I = None
def _get_struct_2i3I():
    global _struct_2i3I
    if _struct_2i3I is None:
        _struct_2i3I = struct.Struct("<2i3I")
    return _struct_2i3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_7df = None
def _get_struct_7df():
    global _struct_7df
    if _struct_7df is None:
        _struct_7df = struct.Struct("<7df")
    return _struct_7df
_struct_7di = None
def _get_struct_7di():
    global _struct_7di
    if _struct_7di is None:
        _struct_7di = struct.Struct("<7di")
    return _struct_7di
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
