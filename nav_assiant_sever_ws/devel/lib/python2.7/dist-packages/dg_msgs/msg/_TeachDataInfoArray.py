# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/TeachDataInfoArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class TeachDataInfoArray(genpy.Message):
  _md5sum = "b4e006fa993775aa9be2a4055f4cff48"
  _type = "dg_msgs/TeachDataInfoArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TeachDataInfo[]     TeachData
================================================================================
MSG: dg_msgs/TeachDataInfo
geometry_msgs/PoseStamped pose_stop_trainhead
geometry_msgs/PoseStamped pose_stop_region
int32                     model_type
string                    model_path
geometry_msgs/PoseArray   camera_region
int32                     region_type           # 区域类型，0直接复用，1镜像复用，2旋转180复用
float64[]                 matrix_region_init
float64[]                 matrix_region_trainhead
int32                     reg_type              # 配准采集数据类型， 0为相机，1为雷达
string                    lidar_topic
CorrectionPoint           correction_point
CropBox                   box_target
CropBox                   box_source
int32                     cruising_route_type
int32                     geometry_completion_type
geometry_msgs/PoseStamped pose_regionframe_region
geometry_msgs/PoseStamped pose_regionframe_trainhead
trajectory_msgs/JointTrajectoryPoint[]                          correction_joint
string                      region_frame_path
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: dg_msgs/CorrectionPoint
string number                                   # 设备组编号
geometry_msgs/PoseStamped pose                  # 相机目标点的pose
float32 offset                                  # 升降柱伸缩量
string custom_message
================================================================================
MSG: dg_msgs/CropBox
float32[] center_
float32[] R_euler
float32[] extent_
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start
"""
  __slots__ = ['TeachData']
  _slot_types = ['dg_msgs/TeachDataInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TeachData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeachDataInfoArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TeachData is None:
        self.TeachData = []
    else:
      self.TeachData = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.TeachData)
      buff.write(_struct_I.pack(length))
      for val1 in self.TeachData:
        _v1 = val1.pose_stop_trainhead
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.pose_stop_region
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.pose
        _v11 = _v10.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.model_type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.model_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.camera_region
        _v14 = _v13.header
        _x = _v14.seq
        buff.write(_get_struct_I().pack(_x))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v13.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.poses:
          _v16 = val3.position
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val3.orientation
          _x = _v17
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.region_type
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.matrix_region_init)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.matrix_region_init))
        length = len(val1.matrix_region_trainhead)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.matrix_region_trainhead))
        _x = val1.reg_type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.lidar_topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v18 = val1.correction_point
        _x = _v18.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v19 = _v18.pose
        _v20 = _v19.header
        _x = _v20.seq
        buff.write(_get_struct_I().pack(_x))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v22 = _v19.pose
        _v23 = _v22.position
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.orientation
        _x = _v24
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v18.offset
        buff.write(_get_struct_f().pack(_x))
        _x = _v18.custom_message
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v25 = val1.box_target
        length = len(_v25.center_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v25.center_))
        length = len(_v25.R_euler)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v25.R_euler))
        length = len(_v25.extent_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v25.extent_))
        _v26 = val1.box_source
        length = len(_v26.center_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v26.center_))
        length = len(_v26.R_euler)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v26.R_euler))
        length = len(_v26.extent_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v26.extent_))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.cruising_route_type, _x.geometry_completion_type))
        _v27 = val1.pose_regionframe_region
        _v28 = _v27.header
        _x = _v28.seq
        buff.write(_get_struct_I().pack(_x))
        _v29 = _v28.stamp
        _x = _v29
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v28.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v30 = _v27.pose
        _v31 = _v30.position
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = _v30.orientation
        _x = _v32
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v33 = val1.pose_regionframe_trainhead
        _v34 = _v33.header
        _x = _v34.seq
        buff.write(_get_struct_I().pack(_x))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v36 = _v33.pose
        _v37 = _v36.position
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v38 = _v36.orientation
        _x = _v38
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.correction_joint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.correction_joint:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.positions))
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.velocities))
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.accelerations))
          length = len(val2.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.effort))
          _v39 = val2.time_from_start
          _x = _v39
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.region_frame_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.TeachData is None:
        self.TeachData = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.TeachData = []
      for i in range(0, length):
        val1 = dg_msgs.msg.TeachDataInfo()
        _v40 = val1.pose_stop_trainhead
        _v41 = _v40.header
        start = end
        end += 4
        (_v41.seq,) = _get_struct_I().unpack(str[start:end])
        _v42 = _v41.stamp
        _x = _v42
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v41.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v41.frame_id = str[start:end]
        _v43 = _v40.pose
        _v44 = _v43.position
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v45 = _v43.orientation
        _x = _v45
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v46 = val1.pose_stop_region
        _v47 = _v46.header
        start = end
        end += 4
        (_v47.seq,) = _get_struct_I().unpack(str[start:end])
        _v48 = _v47.stamp
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v47.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v47.frame_id = str[start:end]
        _v49 = _v46.pose
        _v50 = _v49.position
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = _v49.orientation
        _x = _v51
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.model_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.model_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.model_path = str[start:end]
        _v52 = val1.camera_region
        _v53 = _v52.header
        start = end
        end += 4
        (_v53.seq,) = _get_struct_I().unpack(str[start:end])
        _v54 = _v53.stamp
        _x = _v54
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v53.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v53.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v52.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v55 = val3.position
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = val3.orientation
          _x = _v56
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v52.poses.append(val3)
        start = end
        end += 4
        (val1.region_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.matrix_region_init = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.matrix_region_trainhead = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.reg_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lidar_topic = str[start:end]
        _v57 = val1.correction_point
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v57.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v57.number = str[start:end]
        _v58 = _v57.pose
        _v59 = _v58.header
        start = end
        end += 4
        (_v59.seq,) = _get_struct_I().unpack(str[start:end])
        _v60 = _v59.stamp
        _x = _v60
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v59.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v59.frame_id = str[start:end]
        _v61 = _v58.pose
        _v62 = _v61.position
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = _v61.orientation
        _x = _v63
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (_v57.offset,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v57.custom_message = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v57.custom_message = str[start:end]
        _v64 = val1.box_target
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v64.center_ = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v64.R_euler = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v64.extent_ = s.unpack(str[start:end])
        _v65 = val1.box_source
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v65.center_ = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v65.R_euler = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v65.extent_ = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.cruising_route_type, _x.geometry_completion_type,) = _get_struct_2i().unpack(str[start:end])
        _v66 = val1.pose_regionframe_region
        _v67 = _v66.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        _v69 = _v66.pose
        _v70 = _v69.position
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = _v69.orientation
        _x = _v71
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v72 = val1.pose_regionframe_trainhead
        _v73 = _v72.header
        start = end
        end += 4
        (_v73.seq,) = _get_struct_I().unpack(str[start:end])
        _v74 = _v73.stamp
        _x = _v74
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v73.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v73.frame_id = str[start:end]
        _v75 = _v72.pose
        _v76 = _v75.position
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v77 = _v75.orientation
        _x = _v77
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.correction_joint = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.effort = s.unpack(str[start:end])
          _v78 = val2.time_from_start
          _x = _v78
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          val1.correction_joint.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.region_frame_path = str[start:end]
        self.TeachData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.TeachData)
      buff.write(_struct_I.pack(length))
      for val1 in self.TeachData:
        _v79 = val1.pose_stop_trainhead
        _v80 = _v79.header
        _x = _v80.seq
        buff.write(_get_struct_I().pack(_x))
        _v81 = _v80.stamp
        _x = _v81
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v80.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v82 = _v79.pose
        _v83 = _v82.position
        _x = _v83
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v84 = _v82.orientation
        _x = _v84
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v85 = val1.pose_stop_region
        _v86 = _v85.header
        _x = _v86.seq
        buff.write(_get_struct_I().pack(_x))
        _v87 = _v86.stamp
        _x = _v87
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v86.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v88 = _v85.pose
        _v89 = _v88.position
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = _v88.orientation
        _x = _v90
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.model_type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.model_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v91 = val1.camera_region
        _v92 = _v91.header
        _x = _v92.seq
        buff.write(_get_struct_I().pack(_x))
        _v93 = _v92.stamp
        _x = _v93
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v92.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v91.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.poses:
          _v94 = val3.position
          _x = _v94
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v95 = val3.orientation
          _x = _v95
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.region_type
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.matrix_region_init)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.matrix_region_init.tostring())
        length = len(val1.matrix_region_trainhead)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.matrix_region_trainhead.tostring())
        _x = val1.reg_type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.lidar_topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v96 = val1.correction_point
        _x = _v96.number
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v97 = _v96.pose
        _v98 = _v97.header
        _x = _v98.seq
        buff.write(_get_struct_I().pack(_x))
        _v99 = _v98.stamp
        _x = _v99
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v98.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v100 = _v97.pose
        _v101 = _v100.position
        _x = _v101
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v102 = _v100.orientation
        _x = _v102
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v96.offset
        buff.write(_get_struct_f().pack(_x))
        _x = _v96.custom_message
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v103 = val1.box_target
        length = len(_v103.center_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v103.center_.tostring())
        length = len(_v103.R_euler)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v103.R_euler.tostring())
        length = len(_v103.extent_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v103.extent_.tostring())
        _v104 = val1.box_source
        length = len(_v104.center_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v104.center_.tostring())
        length = len(_v104.R_euler)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v104.R_euler.tostring())
        length = len(_v104.extent_)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v104.extent_.tostring())
        _x = val1
        buff.write(_get_struct_2i().pack(_x.cruising_route_type, _x.geometry_completion_type))
        _v105 = val1.pose_regionframe_region
        _v106 = _v105.header
        _x = _v106.seq
        buff.write(_get_struct_I().pack(_x))
        _v107 = _v106.stamp
        _x = _v107
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v106.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v108 = _v105.pose
        _v109 = _v108.position
        _x = _v109
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v110 = _v108.orientation
        _x = _v110
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v111 = val1.pose_regionframe_trainhead
        _v112 = _v111.header
        _x = _v112.seq
        buff.write(_get_struct_I().pack(_x))
        _v113 = _v112.stamp
        _x = _v113
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v112.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v114 = _v111.pose
        _v115 = _v114.position
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v116 = _v114.orientation
        _x = _v116
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.correction_joint)
        buff.write(_struct_I.pack(length))
        for val2 in val1.correction_joint:
          length = len(val2.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.positions.tostring())
          length = len(val2.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.velocities.tostring())
          length = len(val2.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.accelerations.tostring())
          length = len(val2.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.effort.tostring())
          _v117 = val2.time_from_start
          _x = _v117
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.region_frame_path
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.TeachData is None:
        self.TeachData = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.TeachData = []
      for i in range(0, length):
        val1 = dg_msgs.msg.TeachDataInfo()
        _v118 = val1.pose_stop_trainhead
        _v119 = _v118.header
        start = end
        end += 4
        (_v119.seq,) = _get_struct_I().unpack(str[start:end])
        _v120 = _v119.stamp
        _x = _v120
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v119.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v119.frame_id = str[start:end]
        _v121 = _v118.pose
        _v122 = _v121.position
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v123 = _v121.orientation
        _x = _v123
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v124 = val1.pose_stop_region
        _v125 = _v124.header
        start = end
        end += 4
        (_v125.seq,) = _get_struct_I().unpack(str[start:end])
        _v126 = _v125.stamp
        _x = _v126
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v125.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v125.frame_id = str[start:end]
        _v127 = _v124.pose
        _v128 = _v127.position
        _x = _v128
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v129 = _v127.orientation
        _x = _v129
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.model_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.model_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.model_path = str[start:end]
        _v130 = val1.camera_region
        _v131 = _v130.header
        start = end
        end += 4
        (_v131.seq,) = _get_struct_I().unpack(str[start:end])
        _v132 = _v131.stamp
        _x = _v132
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v131.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v131.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v130.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v133 = val3.position
          _x = _v133
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v134 = val3.orientation
          _x = _v134
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v130.poses.append(val3)
        start = end
        end += 4
        (val1.region_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.matrix_region_init = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.matrix_region_trainhead = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (val1.reg_type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lidar_topic = str[start:end]
        _v135 = val1.correction_point
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v135.number = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v135.number = str[start:end]
        _v136 = _v135.pose
        _v137 = _v136.header
        start = end
        end += 4
        (_v137.seq,) = _get_struct_I().unpack(str[start:end])
        _v138 = _v137.stamp
        _x = _v138
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v137.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v137.frame_id = str[start:end]
        _v139 = _v136.pose
        _v140 = _v139.position
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v141 = _v139.orientation
        _x = _v141
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (_v135.offset,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v135.custom_message = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v135.custom_message = str[start:end]
        _v142 = val1.box_target
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v142.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v142.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v142.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v143 = val1.box_source
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v143.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v143.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v143.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.cruising_route_type, _x.geometry_completion_type,) = _get_struct_2i().unpack(str[start:end])
        _v144 = val1.pose_regionframe_region
        _v145 = _v144.header
        start = end
        end += 4
        (_v145.seq,) = _get_struct_I().unpack(str[start:end])
        _v146 = _v145.stamp
        _x = _v146
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v145.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v145.frame_id = str[start:end]
        _v147 = _v144.pose
        _v148 = _v147.position
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v149 = _v147.orientation
        _x = _v149
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v150 = val1.pose_regionframe_trainhead
        _v151 = _v150.header
        start = end
        end += 4
        (_v151.seq,) = _get_struct_I().unpack(str[start:end])
        _v152 = _v151.stamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.frame_id = str[start:end]
        _v153 = _v150.pose
        _v154 = _v153.position
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v155 = _v153.orientation
        _x = _v155
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.correction_joint = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v156 = val2.time_from_start
          _x = _v156
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          val1.correction_joint.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.region_frame_path = str[start:end]
        self.TeachData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
