# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/CPUMemNetState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg

class CPUMemNetState(genpy.Message):
  _md5sum = "559499aa6a41a1eeb7002f1b884a4b82"
  _type = "dg_msgs/CPUMemNetState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# CPU                            # /proc/stat
int32 cpu_count                  # cpu核心数
float64 cpu_usage                # cpu利用率
int32 cpu_load_1min              # cpu负载
int32 cpu_load_5min
int32 cpu_load_15min
int32 process_count              # 当前进程数

# Mem                            # None
float32 mem_total                # 总内存大小 MB
float32 mem_free                 # 当前可用内存大小 MB
float32 mem_used_percent         # 内存使用率 %

dg_msgs/DiskState[] disk_states  # 硬盘状态
dg_msgs/NetworkCardState[] network_card_state  # 网卡状态

================================================================================
MSG: dg_msgs/DiskState
# 硬盘状态
string disk_name            # 硬盘盘符
float32 disk_total          # 硬盘总空间 GB
float32 disk_used           # 已经使用的空间 GB
float32 disk_avail          # 剩余可用空间
float32 disk_used_percent   # 硬盘使用率

dg_msgs/MonitorState state_info         # 状态信息
================================================================================
MSG: dg_msgs/MonitorState
# 监控状态 - 当状态正常时错误码为0
int32 error_code            # 错误码
string additional_msgs       # 附加信息
================================================================================
MSG: dg_msgs/NetworkCardState
# 网卡状态
string network_card_name        # 网卡名
string ip_address               # IP地址IPv4
float32 net_upload              # 网卡上传速度 KB/s
float32 net_download            # 网卡下载速度 KB/s

dg_msgs/MonitorState state_info         # 状态信息"""
  __slots__ = ['cpu_count','cpu_usage','cpu_load_1min','cpu_load_5min','cpu_load_15min','process_count','mem_total','mem_free','mem_used_percent','disk_states','network_card_state']
  _slot_types = ['int32','float64','int32','int32','int32','int32','float32','float32','float32','dg_msgs/DiskState[]','dg_msgs/NetworkCardState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cpu_count,cpu_usage,cpu_load_1min,cpu_load_5min,cpu_load_15min,process_count,mem_total,mem_free,mem_used_percent,disk_states,network_card_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CPUMemNetState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cpu_count is None:
        self.cpu_count = 0
      if self.cpu_usage is None:
        self.cpu_usage = 0.
      if self.cpu_load_1min is None:
        self.cpu_load_1min = 0
      if self.cpu_load_5min is None:
        self.cpu_load_5min = 0
      if self.cpu_load_15min is None:
        self.cpu_load_15min = 0
      if self.process_count is None:
        self.process_count = 0
      if self.mem_total is None:
        self.mem_total = 0.
      if self.mem_free is None:
        self.mem_free = 0.
      if self.mem_used_percent is None:
        self.mem_used_percent = 0.
      if self.disk_states is None:
        self.disk_states = []
      if self.network_card_state is None:
        self.network_card_state = []
    else:
      self.cpu_count = 0
      self.cpu_usage = 0.
      self.cpu_load_1min = 0
      self.cpu_load_5min = 0
      self.cpu_load_15min = 0
      self.process_count = 0
      self.mem_total = 0.
      self.mem_free = 0.
      self.mem_used_percent = 0.
      self.disk_states = []
      self.network_card_state = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_id4i3f().pack(_x.cpu_count, _x.cpu_usage, _x.cpu_load_1min, _x.cpu_load_5min, _x.cpu_load_15min, _x.process_count, _x.mem_total, _x.mem_free, _x.mem_used_percent))
      length = len(self.disk_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.disk_states:
        _x = val1.disk_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4f().pack(_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent))
        _v1 = val1.state_info
        _x = _v1.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v1.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.network_card_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.network_card_state:
        _x = val1.network_card_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.net_upload, _x.net_download))
        _v2 = val1.state_info
        _x = _v2.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v2.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.disk_states is None:
        self.disk_states = None
      if self.network_card_state is None:
        self.network_card_state = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.cpu_count, _x.cpu_usage, _x.cpu_load_1min, _x.cpu_load_5min, _x.cpu_load_15min, _x.process_count, _x.mem_total, _x.mem_free, _x.mem_used_percent,) = _get_struct_id4i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.disk_states = []
      for i in range(0, length):
        val1 = dg_msgs.msg.DiskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.disk_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.disk_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent,) = _get_struct_4f().unpack(str[start:end])
        _v3 = val1.state_info
        start = end
        end += 4
        (_v3.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.additional_msgs = str[start:end]
        self.disk_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.network_card_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkCardState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.network_card_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.network_card_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.net_upload, _x.net_download,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.state_info
        start = end
        end += 4
        (_v4.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.additional_msgs = str[start:end]
        self.network_card_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_id4i3f().pack(_x.cpu_count, _x.cpu_usage, _x.cpu_load_1min, _x.cpu_load_5min, _x.cpu_load_15min, _x.process_count, _x.mem_total, _x.mem_free, _x.mem_used_percent))
      length = len(self.disk_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.disk_states:
        _x = val1.disk_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4f().pack(_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent))
        _v5 = val1.state_info
        _x = _v5.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v5.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.network_card_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.network_card_state:
        _x = val1.network_card_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.ip_address
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.net_upload, _x.net_download))
        _v6 = val1.state_info
        _x = _v6.error_code
        buff.write(_get_struct_i().pack(_x))
        _x = _v6.additional_msgs
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.disk_states is None:
        self.disk_states = None
      if self.network_card_state is None:
        self.network_card_state = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.cpu_count, _x.cpu_usage, _x.cpu_load_1min, _x.cpu_load_5min, _x.cpu_load_15min, _x.process_count, _x.mem_total, _x.mem_free, _x.mem_used_percent,) = _get_struct_id4i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.disk_states = []
      for i in range(0, length):
        val1 = dg_msgs.msg.DiskState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.disk_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.disk_name = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.disk_total, _x.disk_used, _x.disk_avail, _x.disk_used_percent,) = _get_struct_4f().unpack(str[start:end])
        _v7 = val1.state_info
        start = end
        end += 4
        (_v7.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.additional_msgs = str[start:end]
        self.disk_states.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.network_card_state = []
      for i in range(0, length):
        val1 = dg_msgs.msg.NetworkCardState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.network_card_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.network_card_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip_address = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip_address = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.net_upload, _x.net_download,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.state_info
        start = end
        end += 4
        (_v8.error_code,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.additional_msgs = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.additional_msgs = str[start:end]
        self.network_card_state.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id4i3f = None
def _get_struct_id4i3f():
    global _struct_id4i3f
    if _struct_id4i3f is None:
        _struct_id4i3f = struct.Struct("<id4i3f")
    return _struct_id4i3f
