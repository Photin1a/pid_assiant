# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dg_msgs/TeachDataInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dg_msgs.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class TeachDataInfo(genpy.Message):
  _md5sum = "59cc7fe46999dbd644086ba85abbce76"
  _type = "dg_msgs/TeachDataInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped pose_stop_trainhead
geometry_msgs/PoseStamped pose_stop_region
int32                     model_type
string                    model_path
geometry_msgs/PoseArray   camera_region
int32                     region_type           # 区域类型，0直接复用，1镜像复用，2旋转180复用
float64[]                 matrix_region_init
float64[]                 matrix_region_trainhead
int32                     reg_type              # 配准采集数据类型， 0为相机，1为雷达
string                    lidar_topic
CorrectionPoint           correction_point
CropBox                   box_target
CropBox                   box_source
int32                     cruising_route_type
int32                     geometry_completion_type
geometry_msgs/PoseStamped pose_regionframe_region
geometry_msgs/PoseStamped pose_regionframe_trainhead
trajectory_msgs/JointTrajectoryPoint[]                          correction_joint
string                      region_frame_path
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: dg_msgs/CorrectionPoint
string number                                   # 设备组编号
geometry_msgs/PoseStamped pose                  # 相机目标点的pose
float32 offset                                  # 升降柱伸缩量
string custom_message
================================================================================
MSG: dg_msgs/CropBox
float32[] center_
float32[] R_euler
float32[] extent_
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start
"""
  __slots__ = ['pose_stop_trainhead','pose_stop_region','model_type','model_path','camera_region','region_type','matrix_region_init','matrix_region_trainhead','reg_type','lidar_topic','correction_point','box_target','box_source','cruising_route_type','geometry_completion_type','pose_regionframe_region','pose_regionframe_trainhead','correction_joint','region_frame_path']
  _slot_types = ['geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','int32','string','geometry_msgs/PoseArray','int32','float64[]','float64[]','int32','string','dg_msgs/CorrectionPoint','dg_msgs/CropBox','dg_msgs/CropBox','int32','int32','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','trajectory_msgs/JointTrajectoryPoint[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose_stop_trainhead,pose_stop_region,model_type,model_path,camera_region,region_type,matrix_region_init,matrix_region_trainhead,reg_type,lidar_topic,correction_point,box_target,box_source,cruising_route_type,geometry_completion_type,pose_regionframe_region,pose_regionframe_trainhead,correction_joint,region_frame_path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeachDataInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pose_stop_trainhead is None:
        self.pose_stop_trainhead = geometry_msgs.msg.PoseStamped()
      if self.pose_stop_region is None:
        self.pose_stop_region = geometry_msgs.msg.PoseStamped()
      if self.model_type is None:
        self.model_type = 0
      if self.model_path is None:
        self.model_path = ''
      if self.camera_region is None:
        self.camera_region = geometry_msgs.msg.PoseArray()
      if self.region_type is None:
        self.region_type = 0
      if self.matrix_region_init is None:
        self.matrix_region_init = []
      if self.matrix_region_trainhead is None:
        self.matrix_region_trainhead = []
      if self.reg_type is None:
        self.reg_type = 0
      if self.lidar_topic is None:
        self.lidar_topic = ''
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.cruising_route_type is None:
        self.cruising_route_type = 0
      if self.geometry_completion_type is None:
        self.geometry_completion_type = 0
      if self.pose_regionframe_region is None:
        self.pose_regionframe_region = geometry_msgs.msg.PoseStamped()
      if self.pose_regionframe_trainhead is None:
        self.pose_regionframe_trainhead = geometry_msgs.msg.PoseStamped()
      if self.correction_joint is None:
        self.correction_joint = []
      if self.region_frame_path is None:
        self.region_frame_path = ''
    else:
      self.pose_stop_trainhead = geometry_msgs.msg.PoseStamped()
      self.pose_stop_region = geometry_msgs.msg.PoseStamped()
      self.model_type = 0
      self.model_path = ''
      self.camera_region = geometry_msgs.msg.PoseArray()
      self.region_type = 0
      self.matrix_region_init = []
      self.matrix_region_trainhead = []
      self.reg_type = 0
      self.lidar_topic = ''
      self.correction_point = dg_msgs.msg.CorrectionPoint()
      self.box_target = dg_msgs.msg.CropBox()
      self.box_source = dg_msgs.msg.CropBox()
      self.cruising_route_type = 0
      self.geometry_completion_type = 0
      self.pose_regionframe_region = geometry_msgs.msg.PoseStamped()
      self.pose_regionframe_trainhead = geometry_msgs.msg.PoseStamped()
      self.correction_joint = []
      self.region_frame_path = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.pose_stop_trainhead.header.seq, _x.pose_stop_trainhead.header.stamp.secs, _x.pose_stop_trainhead.header.stamp.nsecs))
      _x = self.pose_stop_trainhead.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose_stop_trainhead.pose.position.x, _x.pose_stop_trainhead.pose.position.y, _x.pose_stop_trainhead.pose.position.z, _x.pose_stop_trainhead.pose.orientation.x, _x.pose_stop_trainhead.pose.orientation.y, _x.pose_stop_trainhead.pose.orientation.z, _x.pose_stop_trainhead.pose.orientation.w, _x.pose_stop_region.header.seq, _x.pose_stop_region.header.stamp.secs, _x.pose_stop_region.header.stamp.nsecs))
      _x = self.pose_stop_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di().pack(_x.pose_stop_region.pose.position.x, _x.pose_stop_region.pose.position.y, _x.pose_stop_region.pose.position.z, _x.pose_stop_region.pose.orientation.x, _x.pose_stop_region.pose.orientation.y, _x.pose_stop_region.pose.orientation.z, _x.pose_stop_region.pose.orientation.w, _x.model_type))
      _x = self.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_region.header.seq, _x.camera_region.header.stamp.secs, _x.camera_region.header.stamp.nsecs))
      _x = self.camera_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.camera_region.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_region.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.region_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.matrix_region_init)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.matrix_region_init))
      length = len(self.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.matrix_region_trainhead))
      _x = self.reg_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs))
      _x = self.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset))
      _x = self.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.center_))
      length = len(self.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.R_euler))
      length = len(self.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_target.extent_))
      length = len(self.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.center_))
      length = len(self.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.R_euler))
      length = len(self.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.box_source.extent_))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.cruising_route_type, _x.geometry_completion_type, _x.pose_regionframe_region.header.seq, _x.pose_regionframe_region.header.stamp.secs, _x.pose_regionframe_region.header.stamp.nsecs))
      _x = self.pose_regionframe_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose_regionframe_region.pose.position.x, _x.pose_regionframe_region.pose.position.y, _x.pose_regionframe_region.pose.position.z, _x.pose_regionframe_region.pose.orientation.x, _x.pose_regionframe_region.pose.orientation.y, _x.pose_regionframe_region.pose.orientation.z, _x.pose_regionframe_region.pose.orientation.w, _x.pose_regionframe_trainhead.header.seq, _x.pose_regionframe_trainhead.header.stamp.secs, _x.pose_regionframe_trainhead.header.stamp.nsecs))
      _x = self.pose_regionframe_trainhead.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose_regionframe_trainhead.pose.position.x, _x.pose_regionframe_trainhead.pose.position.y, _x.pose_regionframe_trainhead.pose.position.z, _x.pose_regionframe_trainhead.pose.orientation.x, _x.pose_regionframe_trainhead.pose.orientation.y, _x.pose_regionframe_trainhead.pose.orientation.z, _x.pose_regionframe_trainhead.pose.orientation.w))
      length = len(self.correction_joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.correction_joint:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.effort))
        _v3 = val1.time_from_start
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_stop_trainhead is None:
        self.pose_stop_trainhead = geometry_msgs.msg.PoseStamped()
      if self.pose_stop_region is None:
        self.pose_stop_region = geometry_msgs.msg.PoseStamped()
      if self.camera_region is None:
        self.camera_region = geometry_msgs.msg.PoseArray()
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.pose_regionframe_region is None:
        self.pose_regionframe_region = geometry_msgs.msg.PoseStamped()
      if self.pose_regionframe_trainhead is None:
        self.pose_regionframe_trainhead = geometry_msgs.msg.PoseStamped()
      if self.correction_joint is None:
        self.correction_joint = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pose_stop_trainhead.header.seq, _x.pose_stop_trainhead.header.stamp.secs, _x.pose_stop_trainhead.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_stop_trainhead.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_stop_trainhead.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose_stop_trainhead.pose.position.x, _x.pose_stop_trainhead.pose.position.y, _x.pose_stop_trainhead.pose.position.z, _x.pose_stop_trainhead.pose.orientation.x, _x.pose_stop_trainhead.pose.orientation.y, _x.pose_stop_trainhead.pose.orientation.z, _x.pose_stop_trainhead.pose.orientation.w, _x.pose_stop_region.header.seq, _x.pose_stop_region.header.stamp.secs, _x.pose_stop_region.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_stop_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_stop_region.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.pose_stop_region.pose.position.x, _x.pose_stop_region.pose.position.y, _x.pose_stop_region.pose.position.z, _x.pose_stop_region.pose.orientation.x, _x.pose_stop_region.pose.orientation.y, _x.pose_stop_region.pose.orientation.z, _x.pose_stop_region.pose.orientation.w, _x.model_type,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_path = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.camera_region.header.seq, _x.camera_region.header.stamp.secs, _x.camera_region.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_region.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_region.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v5 = val1.orientation
        _x = _v5
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.camera_region.poses.append(val1)
      start = end
      end += 4
      (self.region_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_init = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_trainhead = s.unpack(str[start:end])
      start = end
      end += 4
      (self.reg_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.extent_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.center_ = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.R_euler = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.extent_ = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.cruising_route_type, _x.geometry_completion_type, _x.pose_regionframe_region.header.seq, _x.pose_regionframe_region.header.stamp.secs, _x.pose_regionframe_region.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_regionframe_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_regionframe_region.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose_regionframe_region.pose.position.x, _x.pose_regionframe_region.pose.position.y, _x.pose_regionframe_region.pose.position.z, _x.pose_regionframe_region.pose.orientation.x, _x.pose_regionframe_region.pose.orientation.y, _x.pose_regionframe_region.pose.orientation.z, _x.pose_regionframe_region.pose.orientation.w, _x.pose_regionframe_trainhead.header.seq, _x.pose_regionframe_trainhead.header.stamp.secs, _x.pose_regionframe_trainhead.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_regionframe_trainhead.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_regionframe_trainhead.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose_regionframe_trainhead.pose.position.x, _x.pose_regionframe_trainhead.pose.position.y, _x.pose_regionframe_trainhead.pose.position.z, _x.pose_regionframe_trainhead.pose.orientation.x, _x.pose_regionframe_trainhead.pose.orientation.y, _x.pose_regionframe_trainhead.pose.orientation.z, _x.pose_regionframe_trainhead.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.correction_joint = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = s.unpack(str[start:end])
        _v6 = val1.time_from_start
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.correction_joint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_frame_path = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.pose_stop_trainhead.header.seq, _x.pose_stop_trainhead.header.stamp.secs, _x.pose_stop_trainhead.header.stamp.nsecs))
      _x = self.pose_stop_trainhead.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose_stop_trainhead.pose.position.x, _x.pose_stop_trainhead.pose.position.y, _x.pose_stop_trainhead.pose.position.z, _x.pose_stop_trainhead.pose.orientation.x, _x.pose_stop_trainhead.pose.orientation.y, _x.pose_stop_trainhead.pose.orientation.z, _x.pose_stop_trainhead.pose.orientation.w, _x.pose_stop_region.header.seq, _x.pose_stop_region.header.stamp.secs, _x.pose_stop_region.header.stamp.nsecs))
      _x = self.pose_stop_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di().pack(_x.pose_stop_region.pose.position.x, _x.pose_stop_region.pose.position.y, _x.pose_stop_region.pose.position.z, _x.pose_stop_region.pose.orientation.x, _x.pose_stop_region.pose.orientation.y, _x.pose_stop_region.pose.orientation.z, _x.pose_stop_region.pose.orientation.w, _x.model_type))
      _x = self.model_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_region.header.seq, _x.camera_region.header.stamp.secs, _x.camera_region.header.stamp.nsecs))
      _x = self.camera_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.camera_region.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_region.poses:
        _v7 = val1.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.orientation
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.region_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.matrix_region_init)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_region_init.tostring())
      length = len(self.matrix_region_trainhead)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_region_trainhead.tostring())
      _x = self.reg_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.lidar_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.correction_point.number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs))
      _x = self.correction_point.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7df().pack(_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset))
      _x = self.correction_point.custom_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.box_target.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.center_.tostring())
      length = len(self.box_target.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.R_euler.tostring())
      length = len(self.box_target.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_target.extent_.tostring())
      length = len(self.box_source.center_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.center_.tostring())
      length = len(self.box_source.R_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.R_euler.tostring())
      length = len(self.box_source.extent_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.box_source.extent_.tostring())
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.cruising_route_type, _x.geometry_completion_type, _x.pose_regionframe_region.header.seq, _x.pose_regionframe_region.header.stamp.secs, _x.pose_regionframe_region.header.stamp.nsecs))
      _x = self.pose_regionframe_region.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose_regionframe_region.pose.position.x, _x.pose_regionframe_region.pose.position.y, _x.pose_regionframe_region.pose.position.z, _x.pose_regionframe_region.pose.orientation.x, _x.pose_regionframe_region.pose.orientation.y, _x.pose_regionframe_region.pose.orientation.z, _x.pose_regionframe_region.pose.orientation.w, _x.pose_regionframe_trainhead.header.seq, _x.pose_regionframe_trainhead.header.stamp.secs, _x.pose_regionframe_trainhead.header.stamp.nsecs))
      _x = self.pose_regionframe_trainhead.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose_regionframe_trainhead.pose.position.x, _x.pose_regionframe_trainhead.pose.position.y, _x.pose_regionframe_trainhead.pose.position.z, _x.pose_regionframe_trainhead.pose.orientation.x, _x.pose_regionframe_trainhead.pose.orientation.y, _x.pose_regionframe_trainhead.pose.orientation.z, _x.pose_regionframe_trainhead.pose.orientation.w))
      length = len(self.correction_joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.correction_joint:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v9 = val1.time_from_start
        _x = _v9
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.region_frame_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_stop_trainhead is None:
        self.pose_stop_trainhead = geometry_msgs.msg.PoseStamped()
      if self.pose_stop_region is None:
        self.pose_stop_region = geometry_msgs.msg.PoseStamped()
      if self.camera_region is None:
        self.camera_region = geometry_msgs.msg.PoseArray()
      if self.correction_point is None:
        self.correction_point = dg_msgs.msg.CorrectionPoint()
      if self.box_target is None:
        self.box_target = dg_msgs.msg.CropBox()
      if self.box_source is None:
        self.box_source = dg_msgs.msg.CropBox()
      if self.pose_regionframe_region is None:
        self.pose_regionframe_region = geometry_msgs.msg.PoseStamped()
      if self.pose_regionframe_trainhead is None:
        self.pose_regionframe_trainhead = geometry_msgs.msg.PoseStamped()
      if self.correction_joint is None:
        self.correction_joint = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.pose_stop_trainhead.header.seq, _x.pose_stop_trainhead.header.stamp.secs, _x.pose_stop_trainhead.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_stop_trainhead.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_stop_trainhead.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose_stop_trainhead.pose.position.x, _x.pose_stop_trainhead.pose.position.y, _x.pose_stop_trainhead.pose.position.z, _x.pose_stop_trainhead.pose.orientation.x, _x.pose_stop_trainhead.pose.orientation.y, _x.pose_stop_trainhead.pose.orientation.z, _x.pose_stop_trainhead.pose.orientation.w, _x.pose_stop_region.header.seq, _x.pose_stop_region.header.stamp.secs, _x.pose_stop_region.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_stop_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_stop_region.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.pose_stop_region.pose.position.x, _x.pose_stop_region.pose.position.y, _x.pose_stop_region.pose.position.z, _x.pose_stop_region.pose.orientation.x, _x.pose_stop_region.pose.orientation.y, _x.pose_stop_region.pose.orientation.z, _x.pose_stop_region.pose.orientation.w, _x.model_type,) = _get_struct_7di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.model_path = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.camera_region.header.seq, _x.camera_region.header.stamp.secs, _x.camera_region.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_region.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_region.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v10 = val1.position
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.orientation
        _x = _v11
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.camera_region.poses.append(val1)
      start = end
      end += 4
      (self.region_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_init = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.matrix_region_trainhead = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.reg_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.number = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.correction_point.pose.header.seq, _x.correction_point.pose.header.stamp.secs, _x.correction_point.pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.correction_point.pose.pose.position.x, _x.correction_point.pose.pose.position.y, _x.correction_point.pose.pose.position.z, _x.correction_point.pose.pose.orientation.x, _x.correction_point.pose.pose.orientation.y, _x.correction_point.pose.pose.orientation.z, _x.correction_point.pose.pose.orientation.w, _x.correction_point.offset,) = _get_struct_7df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.correction_point.custom_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.correction_point.custom_message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_target.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.center_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.R_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.box_source.extent_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.cruising_route_type, _x.geometry_completion_type, _x.pose_regionframe_region.header.seq, _x.pose_regionframe_region.header.stamp.secs, _x.pose_regionframe_region.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_regionframe_region.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_regionframe_region.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose_regionframe_region.pose.position.x, _x.pose_regionframe_region.pose.position.y, _x.pose_regionframe_region.pose.position.z, _x.pose_regionframe_region.pose.orientation.x, _x.pose_regionframe_region.pose.orientation.y, _x.pose_regionframe_region.pose.orientation.z, _x.pose_regionframe_region.pose.orientation.w, _x.pose_regionframe_trainhead.header.seq, _x.pose_regionframe_trainhead.header.stamp.secs, _x.pose_regionframe_trainhead.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose_regionframe_trainhead.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose_regionframe_trainhead.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose_regionframe_trainhead.pose.position.x, _x.pose_regionframe_trainhead.pose.position.y, _x.pose_regionframe_trainhead.pose.position.z, _x.pose_regionframe_trainhead.pose.orientation.x, _x.pose_regionframe_trainhead.pose.orientation.y, _x.pose_regionframe_trainhead.pose.orientation.z, _x.pose_regionframe_trainhead.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.correction_joint = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v12 = val1.time_from_start
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.correction_joint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.region_frame_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.region_frame_path = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i3I = None
def _get_struct_2i3I():
    global _struct_2i3I
    if _struct_2i3I is None:
        _struct_2i3I = struct.Struct("<2i3I")
    return _struct_2i3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_7df = None
def _get_struct_7df():
    global _struct_7df
    if _struct_7df is None:
        _struct_7df = struct.Struct("<7df")
    return _struct_7df
_struct_7di = None
def _get_struct_7di():
    global _struct_7di
    if _struct_7di is None:
        _struct_7di = struct.Struct("<7di")
    return _struct_7di
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
