// Generated by gencpp from file photinia_msgs/PIDParams.msg
// DO NOT EDIT!


#ifndef PHOTINIA_MSGS_MESSAGE_PIDPARAMS_H
#define PHOTINIA_MSGS_MESSAGE_PIDPARAMS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace photinia_msgs
{
template <class ContainerAllocator>
struct PIDParams_
{
  typedef PIDParams_<ContainerAllocator> Type;

  PIDParams_()
    : time()
    , test_distance(0.0)
    , max_linear(0.0)
    , max_w(0.0)
    , angle_p(0.0)
    , angle_i(0.0)
    , angle_d(0.0)
    , linear_p(0.0)
    , linear_i(0.0)
    , linear_d(0.0)  {
    }
  PIDParams_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , test_distance(0.0)
    , max_linear(0.0)
    , max_w(0.0)
    , angle_p(0.0)
    , angle_i(0.0)
    , angle_d(0.0)
    , linear_p(0.0)
    , linear_i(0.0)
    , linear_d(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef double _test_distance_type;
  _test_distance_type test_distance;

   typedef double _max_linear_type;
  _max_linear_type max_linear;

   typedef double _max_w_type;
  _max_w_type max_w;

   typedef double _angle_p_type;
  _angle_p_type angle_p;

   typedef double _angle_i_type;
  _angle_i_type angle_i;

   typedef double _angle_d_type;
  _angle_d_type angle_d;

   typedef double _linear_p_type;
  _linear_p_type linear_p;

   typedef double _linear_i_type;
  _linear_i_type linear_i;

   typedef double _linear_d_type;
  _linear_d_type linear_d;





  typedef boost::shared_ptr< ::photinia_msgs::PIDParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photinia_msgs::PIDParams_<ContainerAllocator> const> ConstPtr;

}; // struct PIDParams_

typedef ::photinia_msgs::PIDParams_<std::allocator<void> > PIDParams;

typedef boost::shared_ptr< ::photinia_msgs::PIDParams > PIDParamsPtr;
typedef boost::shared_ptr< ::photinia_msgs::PIDParams const> PIDParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::photinia_msgs::PIDParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::photinia_msgs::PIDParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::photinia_msgs::PIDParams_<ContainerAllocator1> & lhs, const ::photinia_msgs::PIDParams_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.test_distance == rhs.test_distance &&
    lhs.max_linear == rhs.max_linear &&
    lhs.max_w == rhs.max_w &&
    lhs.angle_p == rhs.angle_p &&
    lhs.angle_i == rhs.angle_i &&
    lhs.angle_d == rhs.angle_d &&
    lhs.linear_p == rhs.linear_p &&
    lhs.linear_i == rhs.linear_i &&
    lhs.linear_d == rhs.linear_d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::photinia_msgs::PIDParams_<ContainerAllocator1> & lhs, const ::photinia_msgs::PIDParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace photinia_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::photinia_msgs::PIDParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::photinia_msgs::PIDParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::photinia_msgs::PIDParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::photinia_msgs::PIDParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::photinia_msgs::PIDParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::photinia_msgs::PIDParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::photinia_msgs::PIDParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a2c7c5eae38f45d6993a091f91254ea";
  }

  static const char* value(const ::photinia_msgs::PIDParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a2c7c5eae38f45dULL;
  static const uint64_t static_value2 = 0x6993a091f91254eaULL;
};

template<class ContainerAllocator>
struct DataType< ::photinia_msgs::PIDParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "photinia_msgs/PIDParams";
  }

  static const char* value(const ::photinia_msgs::PIDParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::photinia_msgs::PIDParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string time\n"
"float64 test_distance\n"
"float64 max_linear\n"
"float64 max_w\n"
"float64 angle_p\n"
"float64 angle_i\n"
"float64 angle_d\n"
"float64 linear_p\n"
"float64 linear_i\n"
"float64 linear_d\n"
"\n"
;
  }

  static const char* value(const ::photinia_msgs::PIDParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::photinia_msgs::PIDParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.test_distance);
      stream.next(m.max_linear);
      stream.next(m.max_w);
      stream.next(m.angle_p);
      stream.next(m.angle_i);
      stream.next(m.angle_d);
      stream.next(m.linear_p);
      stream.next(m.linear_i);
      stream.next(m.linear_d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::photinia_msgs::PIDParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::photinia_msgs::PIDParams_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "test_distance: ";
    Printer<double>::stream(s, indent + "  ", v.test_distance);
    s << indent << "max_linear: ";
    Printer<double>::stream(s, indent + "  ", v.max_linear);
    s << indent << "max_w: ";
    Printer<double>::stream(s, indent + "  ", v.max_w);
    s << indent << "angle_p: ";
    Printer<double>::stream(s, indent + "  ", v.angle_p);
    s << indent << "angle_i: ";
    Printer<double>::stream(s, indent + "  ", v.angle_i);
    s << indent << "angle_d: ";
    Printer<double>::stream(s, indent + "  ", v.angle_d);
    s << indent << "linear_p: ";
    Printer<double>::stream(s, indent + "  ", v.linear_p);
    s << indent << "linear_i: ";
    Printer<double>::stream(s, indent + "  ", v.linear_i);
    s << indent << "linear_d: ";
    Printer<double>::stream(s, indent + "  ", v.linear_d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOTINIA_MSGS_MESSAGE_PIDPARAMS_H
