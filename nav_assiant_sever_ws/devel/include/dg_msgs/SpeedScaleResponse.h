// Generated by gencpp from file dg_msgs/SpeedScaleResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_SPEEDSCALERESPONSE_H
#define DG_MSGS_MESSAGE_SPEEDSCALERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct SpeedScaleResponse_
{
  typedef SpeedScaleResponse_<ContainerAllocator> Type;

  SpeedScaleResponse_()
    : cur_linear(0.0)
    , cur_angular(0.0)  {
    }
  SpeedScaleResponse_(const ContainerAllocator& _alloc)
    : cur_linear(0.0)
    , cur_angular(0.0)  {
  (void)_alloc;
    }



   typedef float _cur_linear_type;
  _cur_linear_type cur_linear;

   typedef float _cur_angular_type;
  _cur_angular_type cur_angular;





  typedef boost::shared_ptr< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedScaleResponse_

typedef ::dg_msgs::SpeedScaleResponse_<std::allocator<void> > SpeedScaleResponse;

typedef boost::shared_ptr< ::dg_msgs::SpeedScaleResponse > SpeedScaleResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::SpeedScaleResponse const> SpeedScaleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.cur_linear == rhs.cur_linear &&
    lhs.cur_angular == rhs.cur_angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fccdc65c829526faff19e8899284d3b";
  }

  static const char* value(const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fccdc65c829526fULL;
  static const uint64_t static_value2 = 0xaff19e8899284d3bULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/SpeedScaleResponse";
  }

  static const char* value(const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 cur_linear\n"
"float32 cur_angular\n"
"\n"
;
  }

  static const char* value(const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cur_linear);
      stream.next(m.cur_angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedScaleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::SpeedScaleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::SpeedScaleResponse_<ContainerAllocator>& v)
  {
    s << indent << "cur_linear: ";
    Printer<float>::stream(s, indent + "  ", v.cur_linear);
    s << indent << "cur_angular: ";
    Printer<float>::stream(s, indent + "  ", v.cur_angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_SPEEDSCALERESPONSE_H
