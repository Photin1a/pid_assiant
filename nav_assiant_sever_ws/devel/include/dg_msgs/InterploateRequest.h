// Generated by gencpp from file dg_msgs/InterploateRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_INTERPLOATEREQUEST_H
#define DG_MSGS_MESSAGE_INTERPLOATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct InterploateRequest_
{
  typedef InterploateRequest_<ContainerAllocator> Type;

  InterploateRequest_()
    : pose_camera_baselink()
    , lift_data(0.0)
    , filename()  {
    }
  InterploateRequest_(const ContainerAllocator& _alloc)
    : pose_camera_baselink(_alloc)
    , lift_data(0.0)
    , filename(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_camera_baselink_type;
  _pose_camera_baselink_type pose_camera_baselink;

   typedef double _lift_data_type;
  _lift_data_type lift_data;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;





  typedef boost::shared_ptr< ::dg_msgs::InterploateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::InterploateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InterploateRequest_

typedef ::dg_msgs::InterploateRequest_<std::allocator<void> > InterploateRequest;

typedef boost::shared_ptr< ::dg_msgs::InterploateRequest > InterploateRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::InterploateRequest const> InterploateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::InterploateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::InterploateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::InterploateRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::InterploateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose_camera_baselink == rhs.pose_camera_baselink &&
    lhs.lift_data == rhs.lift_data &&
    lhs.filename == rhs.filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::InterploateRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::InterploateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::InterploateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::InterploateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::InterploateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc021ded3c94f1d7e718a558a6ac5d2c";
  }

  static const char* value(const ::dg_msgs::InterploateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc021ded3c94f1d7ULL;
  static const uint64_t static_value2 = 0xe718a558a6ac5d2cULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/InterploateRequest";
  }

  static const char* value(const ::dg_msgs::InterploateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose              pose_camera_baselink\n"
"float64                         lift_data       \n"
"string                          filename\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dg_msgs::InterploateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_camera_baselink);
      stream.next(m.lift_data);
      stream.next(m.filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterploateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::InterploateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::InterploateRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose_camera_baselink: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_camera_baselink);
    s << indent << "lift_data: ";
    Printer<double>::stream(s, indent + "  ", v.lift_data);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_INTERPLOATEREQUEST_H
