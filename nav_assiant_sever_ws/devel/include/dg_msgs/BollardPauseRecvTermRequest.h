// Generated by gencpp from file dg_msgs/BollardPauseRecvTermRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_BOLLARDPAUSERECVTERMREQUEST_H
#define DG_MSGS_MESSAGE_BOLLARDPAUSERECVTERMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct BollardPauseRecvTermRequest_
{
  typedef BollardPauseRecvTermRequest_<ContainerAllocator> Type;

  BollardPauseRecvTermRequest_()
    : operation_()  {
    }
  BollardPauseRecvTermRequest_(const ContainerAllocator& _alloc)
    : operation_(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _operation__type;
  _operation__type operation_;





  typedef boost::shared_ptr< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BollardPauseRecvTermRequest_

typedef ::dg_msgs::BollardPauseRecvTermRequest_<std::allocator<void> > BollardPauseRecvTermRequest;

typedef boost::shared_ptr< ::dg_msgs::BollardPauseRecvTermRequest > BollardPauseRecvTermRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::BollardPauseRecvTermRequest const> BollardPauseRecvTermRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator2> & rhs)
{
  return lhs.operation_ == rhs.operation_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "398e2ac342a0c2237a00de64b5e4e124";
  }

  static const char* value(const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x398e2ac342a0c223ULL;
  static const uint64_t static_value2 = 0x7a00de64b5e4e124ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/BollardPauseRecvTermRequest";
  }

  static const char* value(const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 升降柱暂停/恢复/终止服务\n"
"# 一旦调用了这个服务中的暂停，必须给一个对应的恢复才能将控制权给自动模式下\n"
"# 但调用了暂停后仍然可以使用手动控制，因为人工权限大于自动权限\n"
"string operation_           # pause暂停，recovery恢复，terminate终止，必须是三选一，否则直接拒绝\n"
;
  }

  static const char* value(const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BollardPauseRecvTermRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::BollardPauseRecvTermRequest_<ContainerAllocator>& v)
  {
    s << indent << "operation_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.operation_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_BOLLARDPAUSERECVTERMREQUEST_H
