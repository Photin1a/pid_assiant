// Generated by gencpp from file dg_msgs/GetSetAntiCollisionWheelResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_GETSETANTICOLLISIONWHEELRESPONSE_H
#define DG_MSGS_MESSAGE_GETSETANTICOLLISIONWHEELRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/AntiCollisionWheelState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct GetSetAntiCollisionWheelResponse_
{
  typedef GetSetAntiCollisionWheelResponse_<ContainerAllocator> Type;

  GetSetAntiCollisionWheelResponse_()
    : current_state()  {
    }
  GetSetAntiCollisionWheelResponse_(const ContainerAllocator& _alloc)
    : current_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >> _current_state_type;
  _current_state_type current_state;





  typedef boost::shared_ptr< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSetAntiCollisionWheelResponse_

typedef ::dg_msgs::GetSetAntiCollisionWheelResponse_<std::allocator<void> > GetSetAntiCollisionWheelResponse;

typedef boost::shared_ptr< ::dg_msgs::GetSetAntiCollisionWheelResponse > GetSetAntiCollisionWheelResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::GetSetAntiCollisionWheelResponse const> GetSetAntiCollisionWheelResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator2> & rhs)
{
  return lhs.current_state == rhs.current_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77134c7c59fe3250d354786c4e515985";
  }

  static const char* value(const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77134c7c59fe3250ULL;
  static const uint64_t static_value2 = 0xd354786c4e515985ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/GetSetAntiCollisionWheelResponse";
  }

  static const char* value(const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AntiCollisionWheelState[] current_state\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/AntiCollisionWheelState\n"
"# 防撞轮状态 - 设置和获取通用\n"
"string wheel_name           # 防撞轮名\n"
"bool is_get_state           # 当前请求是否是获得状态，如果为true为请求状态，false则为设置状态\n"
"float32 position            # 位置\n"
"float32 speed               # 速度\n"
"int32 state_word            # 状态字\n"
;
  }

  static const char* value(const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSetAntiCollisionWheelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::GetSetAntiCollisionWheelResponse_<ContainerAllocator>& v)
  {
    s << indent << "current_state[]" << std::endl;
    for (size_t i = 0; i < v.current_state.size(); ++i)
    {
      s << indent << "  current_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >::stream(s, indent + "    ", v.current_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_GETSETANTICOLLISIONWHEELRESPONSE_H
