// Generated by gencpp from file dg_msgs/CarBaseMoveTaskFeedback.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CARBASEMOVETASKFEEDBACK_H
#define DG_MSGS_MESSAGE_CARBASEMOVETASKFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct CarBaseMoveTaskFeedback_
{
  typedef CarBaseMoveTaskFeedback_<ContainerAllocator> Type;

  CarBaseMoveTaskFeedback_()
    : remaining_dis(0.0)  {
    }
  CarBaseMoveTaskFeedback_(const ContainerAllocator& _alloc)
    : remaining_dis(0.0)  {
  (void)_alloc;
    }



   typedef float _remaining_dis_type;
  _remaining_dis_type remaining_dis;





  typedef boost::shared_ptr< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CarBaseMoveTaskFeedback_

typedef ::dg_msgs::CarBaseMoveTaskFeedback_<std::allocator<void> > CarBaseMoveTaskFeedback;

typedef boost::shared_ptr< ::dg_msgs::CarBaseMoveTaskFeedback > CarBaseMoveTaskFeedbackPtr;
typedef boost::shared_ptr< ::dg_msgs::CarBaseMoveTaskFeedback const> CarBaseMoveTaskFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator1> & lhs, const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.remaining_dis == rhs.remaining_dis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator1> & lhs, const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79fae28ecfe7613af2baf70b3042f356";
  }

  static const char* value(const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79fae28ecfe7613aULL;
  static const uint64_t static_value2 = 0xf2baf70b3042f356ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CarBaseMoveTaskFeedback";
  }

  static const char* value(const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 remaining_dis                       # 剩余距离  feedback\n"
;
  }

  static const char* value(const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining_dis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarBaseMoveTaskFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CarBaseMoveTaskFeedback_<ContainerAllocator>& v)
  {
    s << indent << "remaining_dis: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_dis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CARBASEMOVETASKFEEDBACK_H
