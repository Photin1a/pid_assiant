// Generated by gencpp from file dg_msgs/CPUMemNetState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CPUMEMNETSTATE_H
#define DG_MSGS_MESSAGE_CPUMEMNETSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/DiskState.h>
#include <dg_msgs/NetworkCardState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct CPUMemNetState_
{
  typedef CPUMemNetState_<ContainerAllocator> Type;

  CPUMemNetState_()
    : cpu_count(0)
    , cpu_usage(0.0)
    , cpu_load_1min(0)
    , cpu_load_5min(0)
    , cpu_load_15min(0)
    , process_count(0)
    , mem_total(0.0)
    , mem_free(0.0)
    , mem_used_percent(0.0)
    , disk_states()
    , network_card_state()  {
    }
  CPUMemNetState_(const ContainerAllocator& _alloc)
    : cpu_count(0)
    , cpu_usage(0.0)
    , cpu_load_1min(0)
    , cpu_load_5min(0)
    , cpu_load_15min(0)
    , process_count(0)
    , mem_total(0.0)
    , mem_free(0.0)
    , mem_used_percent(0.0)
    , disk_states(_alloc)
    , network_card_state(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cpu_count_type;
  _cpu_count_type cpu_count;

   typedef double _cpu_usage_type;
  _cpu_usage_type cpu_usage;

   typedef int32_t _cpu_load_1min_type;
  _cpu_load_1min_type cpu_load_1min;

   typedef int32_t _cpu_load_5min_type;
  _cpu_load_5min_type cpu_load_5min;

   typedef int32_t _cpu_load_15min_type;
  _cpu_load_15min_type cpu_load_15min;

   typedef int32_t _process_count_type;
  _process_count_type process_count;

   typedef float _mem_total_type;
  _mem_total_type mem_total;

   typedef float _mem_free_type;
  _mem_free_type mem_free;

   typedef float _mem_used_percent_type;
  _mem_used_percent_type mem_used_percent;

   typedef std::vector< ::dg_msgs::DiskState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::DiskState_<ContainerAllocator> >> _disk_states_type;
  _disk_states_type disk_states;

   typedef std::vector< ::dg_msgs::NetworkCardState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::NetworkCardState_<ContainerAllocator> >> _network_card_state_type;
  _network_card_state_type network_card_state;





  typedef boost::shared_ptr< ::dg_msgs::CPUMemNetState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CPUMemNetState_<ContainerAllocator> const> ConstPtr;

}; // struct CPUMemNetState_

typedef ::dg_msgs::CPUMemNetState_<std::allocator<void> > CPUMemNetState;

typedef boost::shared_ptr< ::dg_msgs::CPUMemNetState > CPUMemNetStatePtr;
typedef boost::shared_ptr< ::dg_msgs::CPUMemNetState const> CPUMemNetStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CPUMemNetState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CPUMemNetState_<ContainerAllocator1> & lhs, const ::dg_msgs::CPUMemNetState_<ContainerAllocator2> & rhs)
{
  return lhs.cpu_count == rhs.cpu_count &&
    lhs.cpu_usage == rhs.cpu_usage &&
    lhs.cpu_load_1min == rhs.cpu_load_1min &&
    lhs.cpu_load_5min == rhs.cpu_load_5min &&
    lhs.cpu_load_15min == rhs.cpu_load_15min &&
    lhs.process_count == rhs.process_count &&
    lhs.mem_total == rhs.mem_total &&
    lhs.mem_free == rhs.mem_free &&
    lhs.mem_used_percent == rhs.mem_used_percent &&
    lhs.disk_states == rhs.disk_states &&
    lhs.network_card_state == rhs.network_card_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CPUMemNetState_<ContainerAllocator1> & lhs, const ::dg_msgs::CPUMemNetState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CPUMemNetState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CPUMemNetState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CPUMemNetState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "559499aa6a41a1eeb7002f1b884a4b82";
  }

  static const char* value(const ::dg_msgs::CPUMemNetState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x559499aa6a41a1eeULL;
  static const uint64_t static_value2 = 0xb7002f1b884a4b82ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CPUMemNetState";
  }

  static const char* value(const ::dg_msgs::CPUMemNetState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CPU                            # /proc/stat\n"
"int32 cpu_count                  # cpu核心数\n"
"float64 cpu_usage                # cpu利用率\n"
"int32 cpu_load_1min              # cpu负载\n"
"int32 cpu_load_5min\n"
"int32 cpu_load_15min\n"
"int32 process_count              # 当前进程数\n"
"\n"
"# Mem                            # None\n"
"float32 mem_total                # 总内存大小 MB\n"
"float32 mem_free                 # 当前可用内存大小 MB\n"
"float32 mem_used_percent         # 内存使用率 %\n"
"\n"
"dg_msgs/DiskState[] disk_states  # 硬盘状态\n"
"dg_msgs/NetworkCardState[] network_card_state  # 网卡状态\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/DiskState\n"
"# 硬盘状态\n"
"string disk_name            # 硬盘盘符\n"
"float32 disk_total          # 硬盘总空间 GB\n"
"float32 disk_used           # 已经使用的空间 GB\n"
"float32 disk_avail          # 剩余可用空间\n"
"float32 disk_used_percent   # 硬盘使用率\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
"================================================================================\n"
"MSG: dg_msgs/NetworkCardState\n"
"# 网卡状态\n"
"string network_card_name        # 网卡名\n"
"string ip_address               # IP地址IPv4\n"
"float32 net_upload              # 网卡上传速度 KB/s\n"
"float32 net_download            # 网卡下载速度 KB/s\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
;
  }

  static const char* value(const ::dg_msgs::CPUMemNetState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cpu_count);
      stream.next(m.cpu_usage);
      stream.next(m.cpu_load_1min);
      stream.next(m.cpu_load_5min);
      stream.next(m.cpu_load_15min);
      stream.next(m.process_count);
      stream.next(m.mem_total);
      stream.next(m.mem_free);
      stream.next(m.mem_used_percent);
      stream.next(m.disk_states);
      stream.next(m.network_card_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CPUMemNetState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CPUMemNetState_<ContainerAllocator>& v)
  {
    s << indent << "cpu_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cpu_count);
    s << indent << "cpu_usage: ";
    Printer<double>::stream(s, indent + "  ", v.cpu_usage);
    s << indent << "cpu_load_1min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cpu_load_1min);
    s << indent << "cpu_load_5min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cpu_load_5min);
    s << indent << "cpu_load_15min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cpu_load_15min);
    s << indent << "process_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.process_count);
    s << indent << "mem_total: ";
    Printer<float>::stream(s, indent + "  ", v.mem_total);
    s << indent << "mem_free: ";
    Printer<float>::stream(s, indent + "  ", v.mem_free);
    s << indent << "mem_used_percent: ";
    Printer<float>::stream(s, indent + "  ", v.mem_used_percent);
    s << indent << "disk_states[]" << std::endl;
    for (size_t i = 0; i < v.disk_states.size(); ++i)
    {
      s << indent << "  disk_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::DiskState_<ContainerAllocator> >::stream(s, indent + "    ", v.disk_states[i]);
    }
    s << indent << "network_card_state[]" << std::endl;
    for (size_t i = 0; i < v.network_card_state.size(); ++i)
    {
      s << indent << "  network_card_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::NetworkCardState_<ContainerAllocator> >::stream(s, indent + "    ", v.network_card_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CPUMEMNETSTATE_H
