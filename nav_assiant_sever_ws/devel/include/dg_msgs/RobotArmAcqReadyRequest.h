// Generated by gencpp from file dg_msgs/RobotArmAcqReadyRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROBOTARMACQREADYREQUEST_H
#define DG_MSGS_MESSAGE_ROBOTARMACQREADYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <dg_msgs/CorrectionPoint.h>
#include <dg_msgs/CorrectionJoint.h>
#include <dg_msgs/CropBox.h>
#include <dg_msgs/CropBox.h>
#include <dg_msgs/PointSequence.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct RobotArmAcqReadyRequest_
{
  typedef RobotArmAcqReadyRequest_<ContainerAllocator> Type;

  RobotArmAcqReadyRequest_()
    : relative_pose()
    , model_path()
    , model_type(0)
    , region_type(0)
    , reg_type(0)
    , lidar_topic()
    , correction_point()
    , correction_joint()
    , matrix_region_trainhead()
    , box_target()
    , box_source()
    , image_points()
    , region_frame_path()
    , matrix_region_regionframe()  {
    }
  RobotArmAcqReadyRequest_(const ContainerAllocator& _alloc)
    : relative_pose(_alloc)
    , model_path(_alloc)
    , model_type(0)
    , region_type(0)
    , reg_type(0)
    , lidar_topic(_alloc)
    , correction_point(_alloc)
    , correction_joint(_alloc)
    , matrix_region_trainhead(_alloc)
    , box_target(_alloc)
    , box_source(_alloc)
    , image_points(_alloc)
    , region_frame_path(_alloc)
    , matrix_region_regionframe(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _relative_pose_type;
  _relative_pose_type relative_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_path_type;
  _model_path_type model_path;

   typedef int32_t _model_type_type;
  _model_type_type model_type;

   typedef int32_t _region_type_type;
  _region_type_type region_type;

   typedef int32_t _reg_type_type;
  _reg_type_type reg_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _lidar_topic_type;
  _lidar_topic_type lidar_topic;

   typedef  ::dg_msgs::CorrectionPoint_<ContainerAllocator>  _correction_point_type;
  _correction_point_type correction_point;

   typedef  ::dg_msgs::CorrectionJoint_<ContainerAllocator>  _correction_joint_type;
  _correction_joint_type correction_joint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _matrix_region_trainhead_type;
  _matrix_region_trainhead_type matrix_region_trainhead;

   typedef  ::dg_msgs::CropBox_<ContainerAllocator>  _box_target_type;
  _box_target_type box_target;

   typedef  ::dg_msgs::CropBox_<ContainerAllocator>  _box_source_type;
  _box_source_type box_source;

   typedef std::vector< ::dg_msgs::PointSequence_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::PointSequence_<ContainerAllocator> >> _image_points_type;
  _image_points_type image_points;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _region_frame_path_type;
  _region_frame_path_type region_frame_path;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _matrix_region_regionframe_type;
  _matrix_region_regionframe_type matrix_region_regionframe;





  typedef boost::shared_ptr< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmAcqReadyRequest_

typedef ::dg_msgs::RobotArmAcqReadyRequest_<std::allocator<void> > RobotArmAcqReadyRequest;

typedef boost::shared_ptr< ::dg_msgs::RobotArmAcqReadyRequest > RobotArmAcqReadyRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::RobotArmAcqReadyRequest const> RobotArmAcqReadyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.relative_pose == rhs.relative_pose &&
    lhs.model_path == rhs.model_path &&
    lhs.model_type == rhs.model_type &&
    lhs.region_type == rhs.region_type &&
    lhs.reg_type == rhs.reg_type &&
    lhs.lidar_topic == rhs.lidar_topic &&
    lhs.correction_point == rhs.correction_point &&
    lhs.correction_joint == rhs.correction_joint &&
    lhs.matrix_region_trainhead == rhs.matrix_region_trainhead &&
    lhs.box_target == rhs.box_target &&
    lhs.box_source == rhs.box_source &&
    lhs.image_points == rhs.image_points &&
    lhs.region_frame_path == rhs.region_frame_path &&
    lhs.matrix_region_regionframe == rhs.matrix_region_regionframe;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb9ef447c82b368df76a7824348cb29d";
  }

  static const char* value(const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb9ef447c82b368dULL;
  static const uint64_t static_value2 = 0xf76a7824348cb29dULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/RobotArmAcqReadyRequest";
  }

  static const char* value(const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseStamped relative_pose          # 停车点位置(相对位置)\n"
"string model_path                                # 转向架数据模型\n"
"int32 model_type                                 # 模型类型（车头： 1，转向架： 2）\n"
"int32 region_type\n"
"int32 reg_type                                   # 配准采集数据类型， 0为相机，1为雷达\n"
"string lidar_topic                               # 雷达topic，用于确定使用哪个雷达采集数据\n"
"CorrectionPoint correction_point                 # 纠偏点，配准采集选择相机，相机需要移动到correction_point里传进来的pose, pose是存储在区域坐标系下的，配合relative_pose使用\n"
"CorrectionJoint correction_joint                        # 纠偏轨迹\n"
"float64[] matrix_region_trainhead                          # 区域转换矩阵\n"
"CropBox box_target\n"
"CropBox box_source\n"
"PointSequence[] image_points                     # 像点，运动规划\n"
"\n"
"string region_frame_path                                # 区域配准帧文件路径\n"
"float64[] matrix_region_regionframe                     # 区域到区域配准帧的配准结果\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/CorrectionPoint\n"
"string number                                   # 设备组编号\n"
"geometry_msgs/PoseStamped pose                  # 相机目标点的pose\n"
"float32 offset                                  # 升降柱伸缩量\n"
"string custom_message\n"
"================================================================================\n"
"MSG: dg_msgs/CorrectionJoint\n"
"#纠偏轨迹\n"
"string number       # 设备编码\n"
"trajectory_msgs/JointTrajectoryPoint[] joints # 机械臂关节位置\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/CropBox\n"
"float32[] center_\n"
"float32[] R_euler\n"
"float32[] extent_\n"
"================================================================================\n"
"MSG: dg_msgs/PointSequence\n"
"string number      # 设备组编号\n"
"ImagePoint[] points    # 机械臂拍照点位\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ImagePoint\n"
"geometry_msgs/PoseStamped pose\n"
"trajectory_msgs/JointTrajectoryPoint joint\n"
"float32 offset      # 升降柱伸缩量\n"
"string custom_message\n"
"ImageGoal image_goal\n"
"string point_file_name\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ImageGoal\n"
"string id          # ID\n"
"string number     # 设备编号\n"
"int32 types     # 拍照类型，灰度为`1`，彩色为`2`，深度为`4`，点云为`8`，多种类型时按位相与\n"
;
  }

  static const char* value(const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relative_pose);
      stream.next(m.model_path);
      stream.next(m.model_type);
      stream.next(m.region_type);
      stream.next(m.reg_type);
      stream.next(m.lidar_topic);
      stream.next(m.correction_point);
      stream.next(m.correction_joint);
      stream.next(m.matrix_region_trainhead);
      stream.next(m.box_target);
      stream.next(m.box_source);
      stream.next(m.image_points);
      stream.next(m.region_frame_path);
      stream.next(m.matrix_region_regionframe);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmAcqReadyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::RobotArmAcqReadyRequest_<ContainerAllocator>& v)
  {
    s << indent << "relative_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_pose);
    s << indent << "model_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_path);
    s << indent << "model_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.model_type);
    s << indent << "region_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.region_type);
    s << indent << "reg_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reg_type);
    s << indent << "lidar_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lidar_topic);
    s << indent << "correction_point: ";
    s << std::endl;
    Printer< ::dg_msgs::CorrectionPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.correction_point);
    s << indent << "correction_joint: ";
    s << std::endl;
    Printer< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.correction_joint);
    s << indent << "matrix_region_trainhead[]" << std::endl;
    for (size_t i = 0; i < v.matrix_region_trainhead.size(); ++i)
    {
      s << indent << "  matrix_region_trainhead[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.matrix_region_trainhead[i]);
    }
    s << indent << "box_target: ";
    s << std::endl;
    Printer< ::dg_msgs::CropBox_<ContainerAllocator> >::stream(s, indent + "  ", v.box_target);
    s << indent << "box_source: ";
    s << std::endl;
    Printer< ::dg_msgs::CropBox_<ContainerAllocator> >::stream(s, indent + "  ", v.box_source);
    s << indent << "image_points[]" << std::endl;
    for (size_t i = 0; i < v.image_points.size(); ++i)
    {
      s << indent << "  image_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::PointSequence_<ContainerAllocator> >::stream(s, indent + "    ", v.image_points[i]);
    }
    s << indent << "region_frame_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.region_frame_path);
    s << indent << "matrix_region_regionframe[]" << std::endl;
    for (size_t i = 0; i < v.matrix_region_regionframe.size(); ++i)
    {
      s << indent << "  matrix_region_regionframe[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.matrix_region_regionframe[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROBOTARMACQREADYREQUEST_H
