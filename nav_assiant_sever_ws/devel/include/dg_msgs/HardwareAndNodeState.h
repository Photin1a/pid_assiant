// Generated by gencpp from file dg_msgs/HardwareAndNodeState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_HARDWAREANDNODESTATE_H
#define DG_MSGS_MESSAGE_HARDWAREANDNODESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/ROSTopicState.h>
#include <dg_msgs/GeneralHardwareAndNodeState.h>
#include <dg_msgs/GeneralHardwareAndNodeState.h>
#include <dg_msgs/GeneralHardwareAndNodeState.h>
#include <dg_msgs/GeneralHardwareAndNodeState.h>
#include <dg_msgs/NetworkedDevicesState.h>
#include <dg_msgs/CPUMemNetState.h>
#include <dg_msgs/ChassisState.h>
#include <dg_msgs/UniversalStateInfo.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct HardwareAndNodeState_
{
  typedef HardwareAndNodeState_<ContainerAllocator> Type;

  HardwareAndNodeState_()
    : ros_topic_state()
    , ros_node_state()
    , ros_service_state()
    , daemon_state()
    , system_file_state()
    , networked_device_state()
    , cpu_mem_state()
    , chassis_state()
    , working_node_error()
    , last_update_time()  {
    }
  HardwareAndNodeState_(const ContainerAllocator& _alloc)
    : ros_topic_state(_alloc)
    , ros_node_state(_alloc)
    , ros_service_state(_alloc)
    , daemon_state(_alloc)
    , system_file_state(_alloc)
    , networked_device_state(_alloc)
    , cpu_mem_state(_alloc)
    , chassis_state(_alloc)
    , working_node_error(_alloc)
    , last_update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dg_msgs::ROSTopicState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::ROSTopicState_<ContainerAllocator> >> _ros_topic_state_type;
  _ros_topic_state_type ros_topic_state;

   typedef std::vector< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >> _ros_node_state_type;
  _ros_node_state_type ros_node_state;

   typedef std::vector< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >> _ros_service_state_type;
  _ros_service_state_type ros_service_state;

   typedef std::vector< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >> _daemon_state_type;
  _daemon_state_type daemon_state;

   typedef std::vector< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >> _system_file_state_type;
  _system_file_state_type system_file_state;

   typedef std::vector< ::dg_msgs::NetworkedDevicesState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::NetworkedDevicesState_<ContainerAllocator> >> _networked_device_state_type;
  _networked_device_state_type networked_device_state;

   typedef  ::dg_msgs::CPUMemNetState_<ContainerAllocator>  _cpu_mem_state_type;
  _cpu_mem_state_type cpu_mem_state;

   typedef  ::dg_msgs::ChassisState_<ContainerAllocator>  _chassis_state_type;
  _chassis_state_type chassis_state;

   typedef std::vector< ::dg_msgs::UniversalStateInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::UniversalStateInfo_<ContainerAllocator> >> _working_node_error_type;
  _working_node_error_type working_node_error;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _last_update_time_type;
  _last_update_time_type last_update_time;





  typedef boost::shared_ptr< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> const> ConstPtr;

}; // struct HardwareAndNodeState_

typedef ::dg_msgs::HardwareAndNodeState_<std::allocator<void> > HardwareAndNodeState;

typedef boost::shared_ptr< ::dg_msgs::HardwareAndNodeState > HardwareAndNodeStatePtr;
typedef boost::shared_ptr< ::dg_msgs::HardwareAndNodeState const> HardwareAndNodeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator1> & lhs, const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator2> & rhs)
{
  return lhs.ros_topic_state == rhs.ros_topic_state &&
    lhs.ros_node_state == rhs.ros_node_state &&
    lhs.ros_service_state == rhs.ros_service_state &&
    lhs.daemon_state == rhs.daemon_state &&
    lhs.system_file_state == rhs.system_file_state &&
    lhs.networked_device_state == rhs.networked_device_state &&
    lhs.cpu_mem_state == rhs.cpu_mem_state &&
    lhs.chassis_state == rhs.chassis_state &&
    lhs.working_node_error == rhs.working_node_error &&
    lhs.last_update_time == rhs.last_update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator1> & lhs, const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563ccdb7932eed0e6e8e7fd05942ee29";
  }

  static const char* value(const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563ccdb7932eed0eULL;
  static const uint64_t static_value2 = 0x6e8e7fd05942ee29ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/HardwareAndNodeState";
  }

  static const char* value(const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/ROSTopicState[] ros_topic_state                 # ros话题状态\n"
"\n"
"dg_msgs/GeneralHardwareAndNodeState[] ros_node_state    # ros节点状态\n"
"dg_msgs/GeneralHardwareAndNodeState[] ros_service_state # ros服务状态\n"
"dg_msgs/GeneralHardwareAndNodeState[] daemon_state      # 守护内容状态\n"
"dg_msgs/GeneralHardwareAndNodeState[] system_file_state # 系统文件状态\n"
"\n"
"dg_msgs/NetworkedDevicesState[] networked_device_state  # 联网设备状态\n"
"\n"
"dg_msgs/CPUMemNetState cpu_mem_state                    # cpu状态\n"
"dg_msgs/ChassisState chassis_state                      # 底盘状态\n"
"\n"
"dg_msgs/UniversalStateInfo[] working_node_error         # 计算节点报错信息 - 只能包含对全局有影响的错误，如机械臂碰撞，底盘错误\n"
"\n"
"string last_update_time                                 # 最近一次诊断时间 - 格式 %Y-%m-%d %H:%M:%S\n"
"================================================================================\n"
"MSG: dg_msgs/ROSTopicState\n"
"# ros-topic 状态\n"
"string topic_name               # 话题名\n"
"string publish_node             # 发布节点  \n"
"float32 publish_rate            # 当前发布频率\n"
"float32 desire_rate             # 期望频率\n"
"float32 bandwidth               # 当前占用网络带宽\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
"================================================================================\n"
"MSG: dg_msgs/GeneralHardwareAndNodeState\n"
"# 通用的状态信息\n"
"string name                 # 对象名\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/NetworkedDevicesState\n"
"# 联网设备状态\n"
"string device_name          # 设备名\n"
"string ip_address           # 设备地址IPv4\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/CPUMemNetState\n"
"# CPU                            # /proc/stat\n"
"int32 cpu_count                  # cpu核心数\n"
"float64 cpu_usage                # cpu利用率\n"
"int32 cpu_load_1min              # cpu负载\n"
"int32 cpu_load_5min\n"
"int32 cpu_load_15min\n"
"int32 process_count              # 当前进程数\n"
"\n"
"# Mem                            # None\n"
"float32 mem_total                # 总内存大小 MB\n"
"float32 mem_free                 # 当前可用内存大小 MB\n"
"float32 mem_used_percent         # 内存使用率 %\n"
"\n"
"dg_msgs/DiskState[] disk_states  # 硬盘状态\n"
"dg_msgs/NetworkCardState[] network_card_state  # 网卡状态\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/DiskState\n"
"# 硬盘状态\n"
"string disk_name            # 硬盘盘符\n"
"float32 disk_total          # 硬盘总空间 GB\n"
"float32 disk_used           # 已经使用的空间 GB\n"
"float32 disk_avail          # 剩余可用空间\n"
"float32 disk_used_percent   # 硬盘使用率\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/NetworkCardState\n"
"# 网卡状态\n"
"string network_card_name        # 网卡名\n"
"string ip_address               # IP地址IPv4\n"
"float32 net_upload              # 网卡上传速度 KB/s\n"
"float32 net_download            # 网卡下载速度 KB/s\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/ChassisState\n"
"string chassis_state_json                    # 底盘各种参数的json文件\n"
"string chassis_type                          # 底盘类型\n"
"string chassis_name                          # 底盘名\n"
"\n"
"# [核心参数] - 是上面的子集\n"
"float32 battery                              # 电池电量\n"
"geometry_msgs/PoseStamped current_pose       # 底盘当前所在位置\n"
"bool is_charged                              # 当前是否在充电\n"
"\n"
"Header header                                # 头部信息 - 主要使用的是时间戳\n"
"dg_msgs/MonitorState state_info              # 状态信息\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/UniversalStateInfo\n"
"int32 state_index   # 状态索引值：统一0是正常，其他数字自定义\n"
"string node_name    # 当前节点名\n"
"string state_msgs   # 附加信息，相当于additional_msgs\n"
;
  }

  static const char* value(const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ros_topic_state);
      stream.next(m.ros_node_state);
      stream.next(m.ros_service_state);
      stream.next(m.daemon_state);
      stream.next(m.system_file_state);
      stream.next(m.networked_device_state);
      stream.next(m.cpu_mem_state);
      stream.next(m.chassis_state);
      stream.next(m.working_node_error);
      stream.next(m.last_update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HardwareAndNodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::HardwareAndNodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::HardwareAndNodeState_<ContainerAllocator>& v)
  {
    s << indent << "ros_topic_state[]" << std::endl;
    for (size_t i = 0; i < v.ros_topic_state.size(); ++i)
    {
      s << indent << "  ros_topic_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::ROSTopicState_<ContainerAllocator> >::stream(s, indent + "    ", v.ros_topic_state[i]);
    }
    s << indent << "ros_node_state[]" << std::endl;
    for (size_t i = 0; i < v.ros_node_state.size(); ++i)
    {
      s << indent << "  ros_node_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.ros_node_state[i]);
    }
    s << indent << "ros_service_state[]" << std::endl;
    for (size_t i = 0; i < v.ros_service_state.size(); ++i)
    {
      s << indent << "  ros_service_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.ros_service_state[i]);
    }
    s << indent << "daemon_state[]" << std::endl;
    for (size_t i = 0; i < v.daemon_state.size(); ++i)
    {
      s << indent << "  daemon_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.daemon_state[i]);
    }
    s << indent << "system_file_state[]" << std::endl;
    for (size_t i = 0; i < v.system_file_state.size(); ++i)
    {
      s << indent << "  system_file_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.system_file_state[i]);
    }
    s << indent << "networked_device_state[]" << std::endl;
    for (size_t i = 0; i < v.networked_device_state.size(); ++i)
    {
      s << indent << "  networked_device_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::NetworkedDevicesState_<ContainerAllocator> >::stream(s, indent + "    ", v.networked_device_state[i]);
    }
    s << indent << "cpu_mem_state: ";
    s << std::endl;
    Printer< ::dg_msgs::CPUMemNetState_<ContainerAllocator> >::stream(s, indent + "  ", v.cpu_mem_state);
    s << indent << "chassis_state: ";
    s << std::endl;
    Printer< ::dg_msgs::ChassisState_<ContainerAllocator> >::stream(s, indent + "  ", v.chassis_state);
    s << indent << "working_node_error[]" << std::endl;
    for (size_t i = 0; i < v.working_node_error.size(); ++i)
    {
      s << indent << "  working_node_error[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::UniversalStateInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.working_node_error[i]);
    }
    s << indent << "last_update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.last_update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_HARDWAREANDNODESTATE_H
