// Generated by gencpp from file dg_msgs/SoundAudioControlRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_SOUNDAUDIOCONTROLREQUEST_H
#define DG_MSGS_MESSAGE_SOUNDAUDIOCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct SoundAudioControlRequest_
{
  typedef SoundAudioControlRequest_<ContainerAllocator> Type;

  SoundAudioControlRequest_()
    : audio_name()
    , play_count(0)
    , volume(0)
    , cancle_play(false)  {
    }
  SoundAudioControlRequest_(const ContainerAllocator& _alloc)
    : audio_name(_alloc)
    , play_count(0)
    , volume(0)
    , cancle_play(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _audio_name_type;
  _audio_name_type audio_name;

   typedef int32_t _play_count_type;
  _play_count_type play_count;

   typedef int32_t _volume_type;
  _volume_type volume;

   typedef uint8_t _cancle_play_type;
  _cancle_play_type cancle_play;





  typedef boost::shared_ptr< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SoundAudioControlRequest_

typedef ::dg_msgs::SoundAudioControlRequest_<std::allocator<void> > SoundAudioControlRequest;

typedef boost::shared_ptr< ::dg_msgs::SoundAudioControlRequest > SoundAudioControlRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::SoundAudioControlRequest const> SoundAudioControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.audio_name == rhs.audio_name &&
    lhs.play_count == rhs.play_count &&
    lhs.volume == rhs.volume &&
    lhs.cancle_play == rhs.cancle_play;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ef9969b6ded47adbc865caa1d5d45d7";
  }

  static const char* value(const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ef9969b6ded47adULL;
  static const uint64_t static_value2 = 0xbc865caa1d5d45d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/SoundAudioControlRequest";
  }

  static const char* value(const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 控制音响的服务\n"
"string audio_name       # 音频名    \n"
"int32 play_count        # 播放次数              -1 无限循环播放; 0 默认播放一次; 1 播放一次\n"
"int32 volume            # 音量大小              [0,100] \n"
"bool cancle_play        # 是否终止播放当前音频    true/false\n"
;
  }

  static const char* value(const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.audio_name);
      stream.next(m.play_count);
      stream.next(m.volume);
      stream.next(m.cancle_play);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundAudioControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::SoundAudioControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "audio_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.audio_name);
    s << indent << "play_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.play_count);
    s << indent << "volume: ";
    Printer<int32_t>::stream(s, indent + "  ", v.volume);
    s << indent << "cancle_play: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cancle_play);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_SOUNDAUDIOCONTROLREQUEST_H
