// Generated by gencpp from file dg_msgs/CurrentImagePointResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CURRENTIMAGEPOINTRESPONSE_H
#define DG_MSGS_MESSAGE_CURRENTIMAGEPOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct CurrentImagePointResponse_
{
  typedef CurrentImagePointResponse_<ContainerAllocator> Type;

  CurrentImagePointResponse_()
    : result(0)
    , pose()
    , joint()
    , offset(0.0)
    , custom_message()  {
    }
  CurrentImagePointResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , pose(_alloc)
    , joint(_alloc)
    , offset(0.0)
    , custom_message(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _joint_type;
  _joint_type joint;

   typedef float _offset_type;
  _offset_type offset;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _custom_message_type;
  _custom_message_type custom_message;





  typedef boost::shared_ptr< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentImagePointResponse_

typedef ::dg_msgs::CurrentImagePointResponse_<std::allocator<void> > CurrentImagePointResponse;

typedef boost::shared_ptr< ::dg_msgs::CurrentImagePointResponse > CurrentImagePointResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::CurrentImagePointResponse const> CurrentImagePointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.pose == rhs.pose &&
    lhs.joint == rhs.joint &&
    lhs.offset == rhs.offset &&
    lhs.custom_message == rhs.custom_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c701e822a22691f7b5acbde45b528d64";
  }

  static const char* value(const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc701e822a22691f7ULL;
  static const uint64_t static_value2 = 0xb5acbde45b528d64ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CurrentImagePointResponse";
  }

  static const char* value(const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result        # 拍照点获取结果，0：成功；非0：失败（1：拍照点不合理）\n"
"geometry_msgs/PoseStamped pose\n"
"trajectory_msgs/JointTrajectoryPoint joint\n"
"float32 offset      # 升降柱伸缩量\n"
"string custom_message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.pose);
      stream.next(m.joint);
      stream.next(m.offset);
      stream.next(m.custom_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentImagePointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CurrentImagePointResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "joint: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.joint);
    s << indent << "offset: ";
    Printer<float>::stream(s, indent + "  ", v.offset);
    s << indent << "custom_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.custom_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CURRENTIMAGEPOINTRESPONSE_H
