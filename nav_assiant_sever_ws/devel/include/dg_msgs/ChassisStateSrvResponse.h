// Generated by gencpp from file dg_msgs/ChassisStateSrvResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CHASSISSTATESRVRESPONSE_H
#define DG_MSGS_MESSAGE_CHASSISSTATESRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/ChassisInfo.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct ChassisStateSrvResponse_
{
  typedef ChassisStateSrvResponse_<ContainerAllocator> Type;

  ChassisStateSrvResponse_()
    : chassis_info()  {
    }
  ChassisStateSrvResponse_(const ContainerAllocator& _alloc)
    : chassis_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dg_msgs::ChassisInfo_<ContainerAllocator>  _chassis_info_type;
  _chassis_info_type chassis_info;





  typedef boost::shared_ptr< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisStateSrvResponse_

typedef ::dg_msgs::ChassisStateSrvResponse_<std::allocator<void> > ChassisStateSrvResponse;

typedef boost::shared_ptr< ::dg_msgs::ChassisStateSrvResponse > ChassisStateSrvResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::ChassisStateSrvResponse const> ChassisStateSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.chassis_info == rhs.chassis_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6dae2c19e5871a707bd9c92ebb1cef2";
  }

  static const char* value(const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6dae2c19e5871a7ULL;
  static const uint64_t static_value2 = 0x07bd9c92ebb1cef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/ChassisStateSrvResponse";
  }

  static const char* value(const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ChassisInfo chassis_info\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ChassisInfo\n"
"EquipmentCommon equipment\n"
"float32 min_linear_speed\n"
"float32 max_linear_speed\n"
"float32 linear_speed_scaling\n"
"float32 min_angular_speed\n"
"float32 max_angular_speed\n"
"float32 angular_speed_scaling\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/EquipmentCommon\n"
"int32 equipment_id\n"
"string equipment_name\n"
"bool connected\n"
"uint64 connected_time\n"
"string model\n"
"string manufacturer\n"
;
  }

  static const char* value(const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chassis_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisStateSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::ChassisStateSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "chassis_info: ";
    s << std::endl;
    Printer< ::dg_msgs::ChassisInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.chassis_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CHASSISSTATESRVRESPONSE_H
