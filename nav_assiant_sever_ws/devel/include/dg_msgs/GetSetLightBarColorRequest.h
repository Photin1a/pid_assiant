// Generated by gencpp from file dg_msgs/GetSetLightBarColorRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_GETSETLIGHTBARCOLORREQUEST_H
#define DG_MSGS_MESSAGE_GETSETLIGHTBARCOLORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct GetSetLightBarColorRequest_
{
  typedef GetSetLightBarColorRequest_<ContainerAllocator> Type;

  GetSetLightBarColorRequest_()
    : ligth_bar_color()  {
    }
  GetSetLightBarColorRequest_(const ContainerAllocator& _alloc)
    : ligth_bar_color(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ligth_bar_color_type;
  _ligth_bar_color_type ligth_bar_color;





  typedef boost::shared_ptr< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetSetLightBarColorRequest_

typedef ::dg_msgs::GetSetLightBarColorRequest_<std::allocator<void> > GetSetLightBarColorRequest;

typedef boost::shared_ptr< ::dg_msgs::GetSetLightBarColorRequest > GetSetLightBarColorRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::GetSetLightBarColorRequest const> GetSetLightBarColorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ligth_bar_color == rhs.ligth_bar_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8b99cbc0dd126e1864a37a9a498dc8b";
  }

  static const char* value(const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8b99cbc0dd126e1ULL;
  static const uint64_t static_value2 = 0x864a37a9a498dc8bULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/GetSetLightBarColorRequest";
  }

  static const char* value(const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 获取/设置灯带颜色的服务\n"
"string ligth_bar_color          # 灯带颜色，如果是空字符串，则返回当前灯带颜色 ｜ 格式：color format 如：red flash 红灯闪烁, red form 红灯常亮，允许不区分大小写\n"
"# 艾智威灯带支持的以下几种状态\n"
"# none          无显示\n"
"# green breath  绿色呼吸\n"
"# green form    绿色常亮\n"
"# left turn     左转\n"
"# right turn    右转\n"
"# blue flash    蓝色闪烁\n"
"# red form      红色常亮\n"
"# red flash     红色闪烁\n"
"# yellow form   黄色常亮\n"
"# yellow flash  黄色闪烁\n"
"# white form    白色常亮\n"
"# green flash   绿色闪烁\n"
"# skyblue form  蓝色常亮\n"
"# purple form   紫色闪烁\n"
"# yellow breath 黄色呼吸\n"
"\n"
;
  }

  static const char* value(const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ligth_bar_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSetLightBarColorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::GetSetLightBarColorRequest_<ContainerAllocator>& v)
  {
    s << indent << "ligth_bar_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ligth_bar_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_GETSETLIGHTBARCOLORREQUEST_H
