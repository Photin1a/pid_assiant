// Generated by gencpp from file dg_msgs/XGGoToChargeRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_XGGOTOCHARGEREQUEST_H
#define DG_MSGS_MESSAGE_XGGOTOCHARGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct XGGoToChargeRequest_
{
  typedef XGGoToChargeRequest_<ContainerAllocator> Type;

  XGGoToChargeRequest_()
    : allow_switch_map(false)
    , charger_station()  {
    }
  XGGoToChargeRequest_(const ContainerAllocator& _alloc)
    : allow_switch_map(false)
    , charger_station(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _allow_switch_map_type;
  _allow_switch_map_type allow_switch_map;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _charger_station_type;
  _charger_station_type charger_station;





  typedef boost::shared_ptr< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct XGGoToChargeRequest_

typedef ::dg_msgs::XGGoToChargeRequest_<std::allocator<void> > XGGoToChargeRequest;

typedef boost::shared_ptr< ::dg_msgs::XGGoToChargeRequest > XGGoToChargeRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::XGGoToChargeRequest const> XGGoToChargeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.allow_switch_map == rhs.allow_switch_map &&
    lhs.charger_station == rhs.charger_station;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "379711aea633b6198f8abc72fc557682";
  }

  static const char* value(const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x379711aea633b619ULL;
  static const uint64_t static_value2 = 0x8f8abc72fc557682ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/XGGoToChargeRequest";
  }

  static const char* value(const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 关键变量说明:\n"
"# allow_switch_map: 是否允许切换地图，当车在坑道内的时候，底盘会对电梯进行调度\n"
"\n"
"bool allow_switch_map       # 【实验变量，暂未使用】是否允许自动切换地图并执行回充【严禁缺省】\n"
"string charger_station      # 充电站站点名，如果缺省则会根据task_config的配置信息自动寻找最近的充电站\n"
;
  }

  static const char* value(const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.allow_switch_map);
      stream.next(m.charger_station);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XGGoToChargeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::XGGoToChargeRequest_<ContainerAllocator>& v)
  {
    s << indent << "allow_switch_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.allow_switch_map);
    s << indent << "charger_station: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.charger_station);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_XGGOTOCHARGEREQUEST_H
