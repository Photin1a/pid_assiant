// Generated by gencpp from file dg_msgs/AssembleState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ASSEMBLESTATE_H
#define DG_MSGS_MESSAGE_ASSEMBLESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct AssembleState_
{
  typedef AssembleState_<ContainerAllocator> Type;

  AssembleState_()
    : is_emergency(false)
    , is_auto(false)
    , is_rescue(false)
    , is_reset(false)  {
    }
  AssembleState_(const ContainerAllocator& _alloc)
    : is_emergency(false)
    , is_auto(false)
    , is_rescue(false)
    , is_reset(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_emergency_type;
  _is_emergency_type is_emergency;

   typedef uint8_t _is_auto_type;
  _is_auto_type is_auto;

   typedef uint8_t _is_rescue_type;
  _is_rescue_type is_rescue;

   typedef uint8_t _is_reset_type;
  _is_reset_type is_reset;





  typedef boost::shared_ptr< ::dg_msgs::AssembleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::AssembleState_<ContainerAllocator> const> ConstPtr;

}; // struct AssembleState_

typedef ::dg_msgs::AssembleState_<std::allocator<void> > AssembleState;

typedef boost::shared_ptr< ::dg_msgs::AssembleState > AssembleStatePtr;
typedef boost::shared_ptr< ::dg_msgs::AssembleState const> AssembleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::AssembleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::AssembleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::AssembleState_<ContainerAllocator1> & lhs, const ::dg_msgs::AssembleState_<ContainerAllocator2> & rhs)
{
  return lhs.is_emergency == rhs.is_emergency &&
    lhs.is_auto == rhs.is_auto &&
    lhs.is_rescue == rhs.is_rescue &&
    lhs.is_reset == rhs.is_reset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::AssembleState_<ContainerAllocator1> & lhs, const ::dg_msgs::AssembleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AssembleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AssembleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AssembleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AssembleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AssembleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AssembleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::AssembleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38dfb48a7efcd005d49ab62be37595f7";
  }

  static const char* value(const ::dg_msgs::AssembleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38dfb48a7efcd005ULL;
  static const uint64_t static_value2 = 0xd49ab62be37595f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::AssembleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/AssembleState";
  }

  static const char* value(const ::dg_msgs::AssembleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::AssembleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 上装箱体状态信息\n"
"bool is_emergency           # 是否是急停\n"
"bool is_auto                # 是否是自动档\n"
"bool is_rescue              # 是否是救援模式\n"
"bool is_reset               # 是否是复位\n"
;
  }

  static const char* value(const ::dg_msgs::AssembleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::AssembleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_emergency);
      stream.next(m.is_auto);
      stream.next(m.is_rescue);
      stream.next(m.is_reset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssembleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::AssembleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::AssembleState_<ContainerAllocator>& v)
  {
    s << indent << "is_emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_emergency);
    s << indent << "is_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_auto);
    s << indent << "is_rescue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_rescue);
    s << indent << "is_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_reset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ASSEMBLESTATE_H
