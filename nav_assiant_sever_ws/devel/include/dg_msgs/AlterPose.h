// Generated by gencpp from file dg_msgs/AlterPose.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ALTERPOSE_H
#define DG_MSGS_MESSAGE_ALTERPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct AlterPose_
{
  typedef AlterPose_<ContainerAllocator> Type;

  AlterPose_()
    : id()
    , pose()
    , lift_data(0.0)  {
    }
  AlterPose_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pose(_alloc)
    , lift_data(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _lift_data_type;
  _lift_data_type lift_data;





  typedef boost::shared_ptr< ::dg_msgs::AlterPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::AlterPose_<ContainerAllocator> const> ConstPtr;

}; // struct AlterPose_

typedef ::dg_msgs::AlterPose_<std::allocator<void> > AlterPose;

typedef boost::shared_ptr< ::dg_msgs::AlterPose > AlterPosePtr;
typedef boost::shared_ptr< ::dg_msgs::AlterPose const> AlterPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::AlterPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::AlterPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::AlterPose_<ContainerAllocator1> & lhs, const ::dg_msgs::AlterPose_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pose == rhs.pose &&
    lhs.lift_data == rhs.lift_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::AlterPose_<ContainerAllocator1> & lhs, const ::dg_msgs::AlterPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AlterPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AlterPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AlterPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AlterPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AlterPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AlterPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::AlterPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4803ab626dec65d88283829bd49d8744";
  }

  static const char* value(const ::dg_msgs::AlterPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4803ab626dec65d8ULL;
  static const uint64_t static_value2 = 0x8283829bd49d8744ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::AlterPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/AlterPose";
  }

  static const char* value(const ::dg_msgs::AlterPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::AlterPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"geometry_msgs/Pose pose\n"
"float64  lift_data\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dg_msgs::AlterPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::AlterPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pose);
      stream.next(m.lift_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlterPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::AlterPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::AlterPose_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "lift_data: ";
    Printer<double>::stream(s, indent + "  ", v.lift_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ALTERPOSE_H
