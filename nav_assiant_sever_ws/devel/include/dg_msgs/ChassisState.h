// Generated by gencpp from file dg_msgs/ChassisState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CHASSISSTATE_H
#define DG_MSGS_MESSAGE_CHASSISSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/Header.h>
#include <dg_msgs/MonitorState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct ChassisState_
{
  typedef ChassisState_<ContainerAllocator> Type;

  ChassisState_()
    : chassis_state_json()
    , chassis_type()
    , chassis_name()
    , battery(0.0)
    , current_pose()
    , is_charged(false)
    , header()
    , state_info()  {
    }
  ChassisState_(const ContainerAllocator& _alloc)
    : chassis_state_json(_alloc)
    , chassis_type(_alloc)
    , chassis_name(_alloc)
    , battery(0.0)
    , current_pose(_alloc)
    , is_charged(false)
    , header(_alloc)
    , state_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_state_json_type;
  _chassis_state_json_type chassis_state_json;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_type_type;
  _chassis_type_type chassis_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_name_type;
  _chassis_name_type chassis_name;

   typedef float _battery_type;
  _battery_type battery;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;

   typedef uint8_t _is_charged_type;
  _is_charged_type is_charged;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::dg_msgs::MonitorState_<ContainerAllocator>  _state_info_type;
  _state_info_type state_info;





  typedef boost::shared_ptr< ::dg_msgs::ChassisState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::ChassisState_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisState_

typedef ::dg_msgs::ChassisState_<std::allocator<void> > ChassisState;

typedef boost::shared_ptr< ::dg_msgs::ChassisState > ChassisStatePtr;
typedef boost::shared_ptr< ::dg_msgs::ChassisState const> ChassisStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::ChassisState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::ChassisState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::ChassisState_<ContainerAllocator1> & lhs, const ::dg_msgs::ChassisState_<ContainerAllocator2> & rhs)
{
  return lhs.chassis_state_json == rhs.chassis_state_json &&
    lhs.chassis_type == rhs.chassis_type &&
    lhs.chassis_name == rhs.chassis_name &&
    lhs.battery == rhs.battery &&
    lhs.current_pose == rhs.current_pose &&
    lhs.is_charged == rhs.is_charged &&
    lhs.header == rhs.header &&
    lhs.state_info == rhs.state_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::ChassisState_<ContainerAllocator1> & lhs, const ::dg_msgs::ChassisState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ChassisState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ChassisState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ChassisState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ChassisState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ChassisState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ChassisState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::ChassisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75fcdbda3ff2c5f09f982d836b82cd48";
  }

  static const char* value(const ::dg_msgs::ChassisState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75fcdbda3ff2c5f0ULL;
  static const uint64_t static_value2 = 0x9f982d836b82cd48ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::ChassisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/ChassisState";
  }

  static const char* value(const ::dg_msgs::ChassisState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::ChassisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string chassis_state_json                    # 底盘各种参数的json文件\n"
"string chassis_type                          # 底盘类型\n"
"string chassis_name                          # 底盘名\n"
"\n"
"# [核心参数] - 是上面的子集\n"
"float32 battery                              # 电池电量\n"
"geometry_msgs/PoseStamped current_pose       # 底盘当前所在位置\n"
"bool is_charged                              # 当前是否在充电\n"
"\n"
"Header header                                # 头部信息 - 主要使用的是时间戳\n"
"dg_msgs/MonitorState state_info              # 状态信息\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
;
  }

  static const char* value(const ::dg_msgs::ChassisState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::ChassisState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chassis_state_json);
      stream.next(m.chassis_type);
      stream.next(m.chassis_name);
      stream.next(m.battery);
      stream.next(m.current_pose);
      stream.next(m.is_charged);
      stream.next(m.header);
      stream.next(m.state_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::ChassisState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::ChassisState_<ContainerAllocator>& v)
  {
    s << indent << "chassis_state_json: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_state_json);
    s << indent << "chassis_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_type);
    s << indent << "chassis_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_name);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
    s << indent << "is_charged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charged);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_info: ";
    s << std::endl;
    Printer< ::dg_msgs::MonitorState_<ContainerAllocator> >::stream(s, indent + "  ", v.state_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CHASSISSTATE_H
