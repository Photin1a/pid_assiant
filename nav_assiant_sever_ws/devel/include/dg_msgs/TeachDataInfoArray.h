// Generated by gencpp from file dg_msgs/TeachDataInfoArray.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_TEACHDATAINFOARRAY_H
#define DG_MSGS_MESSAGE_TEACHDATAINFOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/TeachDataInfo.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct TeachDataInfoArray_
{
  typedef TeachDataInfoArray_<ContainerAllocator> Type;

  TeachDataInfoArray_()
    : TeachData()  {
    }
  TeachDataInfoArray_(const ContainerAllocator& _alloc)
    : TeachData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dg_msgs::TeachDataInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::TeachDataInfo_<ContainerAllocator> >> _TeachData_type;
  _TeachData_type TeachData;





  typedef boost::shared_ptr< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct TeachDataInfoArray_

typedef ::dg_msgs::TeachDataInfoArray_<std::allocator<void> > TeachDataInfoArray;

typedef boost::shared_ptr< ::dg_msgs::TeachDataInfoArray > TeachDataInfoArrayPtr;
typedef boost::shared_ptr< ::dg_msgs::TeachDataInfoArray const> TeachDataInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator1> & lhs, const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.TeachData == rhs.TeachData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator1> & lhs, const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4e006fa993775aa9be2a4055f4cff48";
  }

  static const char* value(const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4e006fa993775aaULL;
  static const uint64_t static_value2 = 0x9be2a4055f4cff48ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/TeachDataInfoArray";
  }

  static const char* value(const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TeachDataInfo[]     TeachData\n"
"================================================================================\n"
"MSG: dg_msgs/TeachDataInfo\n"
"geometry_msgs/PoseStamped pose_stop_trainhead\n"
"geometry_msgs/PoseStamped pose_stop_region\n"
"int32                     model_type\n"
"string                    model_path\n"
"geometry_msgs/PoseArray   camera_region\n"
"int32                     region_type           # 区域类型，0直接复用，1镜像复用，2旋转180复用\n"
"float64[]                 matrix_region_init\n"
"float64[]                 matrix_region_trainhead\n"
"int32                     reg_type              # 配准采集数据类型， 0为相机，1为雷达\n"
"string                    lidar_topic\n"
"CorrectionPoint           correction_point\n"
"CropBox                   box_target\n"
"CropBox                   box_source\n"
"int32                     cruising_route_type\n"
"int32                     geometry_completion_type\n"
"geometry_msgs/PoseStamped pose_regionframe_region\n"
"geometry_msgs/PoseStamped pose_regionframe_trainhead\n"
"trajectory_msgs/JointTrajectoryPoint[]                          correction_joint\n"
"string                      region_frame_path\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/CorrectionPoint\n"
"string number                                   # 设备组编号\n"
"geometry_msgs/PoseStamped pose                  # 相机目标点的pose\n"
"float32 offset                                  # 升降柱伸缩量\n"
"string custom_message\n"
"================================================================================\n"
"MSG: dg_msgs/CropBox\n"
"float32[] center_\n"
"float32[] R_euler\n"
"float32[] extent_\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TeachData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeachDataInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::TeachDataInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::TeachDataInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "TeachData[]" << std::endl;
    for (size_t i = 0; i < v.TeachData.size(); ++i)
    {
      s << indent << "  TeachData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::TeachDataInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.TeachData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_TEACHDATAINFOARRAY_H
