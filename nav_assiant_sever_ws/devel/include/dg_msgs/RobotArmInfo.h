// Generated by gencpp from file dg_msgs/RobotArmInfo.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROBOTARMINFO_H
#define DG_MSGS_MESSAGE_ROBOTARMINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/EquipmentCommon.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct RobotArmInfo_
{
  typedef RobotArmInfo_<ContainerAllocator> Type;

  RobotArmInfo_()
    : equipment()
    , number()
    , state(0)
    , enabled(false)
    , protective_stop(false)
    , emergency_stop(false)
    , drag_status(false)
    , recording(false)
    , moving_stop(false)
    , speed_ratio(0.0)
    , error_status(false)
    , error_msgs()
    , payload()  {
    }
  RobotArmInfo_(const ContainerAllocator& _alloc)
    : equipment(_alloc)
    , number(_alloc)
    , state(0)
    , enabled(false)
    , protective_stop(false)
    , emergency_stop(false)
    , drag_status(false)
    , recording(false)
    , moving_stop(false)
    , speed_ratio(0.0)
    , error_status(false)
    , error_msgs(_alloc)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dg_msgs::EquipmentCommon_<ContainerAllocator>  _equipment_type;
  _equipment_type equipment;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef int32_t _state_type;
  _state_type state;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _protective_stop_type;
  _protective_stop_type protective_stop;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef uint8_t _drag_status_type;
  _drag_status_type drag_status;

   typedef uint8_t _recording_type;
  _recording_type recording;

   typedef uint8_t _moving_stop_type;
  _moving_stop_type moving_stop;

   typedef double _speed_ratio_type;
  _speed_ratio_type speed_ratio;

   typedef uint8_t _error_status_type;
  _error_status_type error_status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _error_msgs_type;
  _error_msgs_type error_msgs;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::dg_msgs::RobotArmInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::RobotArmInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmInfo_

typedef ::dg_msgs::RobotArmInfo_<std::allocator<void> > RobotArmInfo;

typedef boost::shared_ptr< ::dg_msgs::RobotArmInfo > RobotArmInfoPtr;
typedef boost::shared_ptr< ::dg_msgs::RobotArmInfo const> RobotArmInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::RobotArmInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::RobotArmInfo_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmInfo_<ContainerAllocator2> & rhs)
{
  return lhs.equipment == rhs.equipment &&
    lhs.number == rhs.number &&
    lhs.state == rhs.state &&
    lhs.enabled == rhs.enabled &&
    lhs.protective_stop == rhs.protective_stop &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.drag_status == rhs.drag_status &&
    lhs.recording == rhs.recording &&
    lhs.moving_stop == rhs.moving_stop &&
    lhs.speed_ratio == rhs.speed_ratio &&
    lhs.error_status == rhs.error_status &&
    lhs.error_msgs == rhs.error_msgs &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::RobotArmInfo_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c14cafe5db166d12d88087baffc1cb1c";
  }

  static const char* value(const ::dg_msgs::RobotArmInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc14cafe5db166d12ULL;
  static const uint64_t static_value2 = 0xd88087baffc1cb1cULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/RobotArmInfo";
  }

  static const char* value(const ::dg_msgs::RobotArmInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "EquipmentCommon equipment\n"
"string number           # 设备组编号\n"
"int32 state\n"
"bool enabled            # 机械臂是否使能标志\n"
"bool protective_stop    # 机械臂是否检测到碰撞\n"
"bool emergency_stop     # 机械臂是否急停\n"
"bool drag_status        # 机械臂是否处于拖拽状态\n"
"bool recording          # 机械臂是否处于录制状态\n"
"bool moving_stop        # 机械臂是否处于运动状态\n"
"float64 speed_ratio     # 机械臂当前速度\n"
"bool error_status       # 机械臂是否处于报错状态\n"
"string[] error_msgs     # 机械臂的错误信息反馈\n"
"string payload          # 自定义信息，用于存放不同型号机械臂信息\n"
"================================================================================\n"
"MSG: dg_msgs/EquipmentCommon\n"
"int32 equipment_id\n"
"string equipment_name\n"
"bool connected\n"
"uint64 connected_time\n"
"string model\n"
"string manufacturer\n"
;
  }

  static const char* value(const ::dg_msgs::RobotArmInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.equipment);
      stream.next(m.number);
      stream.next(m.state);
      stream.next(m.enabled);
      stream.next(m.protective_stop);
      stream.next(m.emergency_stop);
      stream.next(m.drag_status);
      stream.next(m.recording);
      stream.next(m.moving_stop);
      stream.next(m.speed_ratio);
      stream.next(m.error_status);
      stream.next(m.error_msgs);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::RobotArmInfo_<ContainerAllocator>& v)
  {
    s << indent << "equipment: ";
    s << std::endl;
    Printer< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >::stream(s, indent + "  ", v.equipment);
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "protective_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.protective_stop);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "drag_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drag_status);
    s << indent << "recording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recording);
    s << indent << "moving_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_stop);
    s << indent << "speed_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.speed_ratio);
    s << indent << "error_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_status);
    s << indent << "error_msgs[]" << std::endl;
    for (size_t i = 0; i < v.error_msgs.size(); ++i)
    {
      s << indent << "  error_msgs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_msgs[i]);
    }
    s << indent << "payload: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.payload);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROBOTARMINFO_H
