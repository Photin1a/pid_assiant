// Generated by gencpp from file dg_msgs/StopRecordingResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_STOPRECORDINGRESPONSE_H
#define DG_MSGS_MESSAGE_STOPRECORDINGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct StopRecordingResponse_
{
  typedef StopRecordingResponse_<ContainerAllocator> Type;

  StopRecordingResponse_()
    : result(0)
    , trajectory()  {
    }
  StopRecordingResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >> _trajectory_type;
  _trajectory_type trajectory;





  typedef boost::shared_ptr< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StopRecordingResponse_

typedef ::dg_msgs::StopRecordingResponse_<std::allocator<void> > StopRecordingResponse;

typedef boost::shared_ptr< ::dg_msgs::StopRecordingResponse > StopRecordingResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::StopRecordingResponse const> StopRecordingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::StopRecordingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::StopRecordingResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::StopRecordingResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.trajectory == rhs.trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::StopRecordingResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::StopRecordingResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d5d8507da4af23d027f5713eb4af792";
  }

  static const char* value(const ::dg_msgs::StopRecordingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d5d8507da4af23dULL;
  static const uint64_t static_value2 = 0x027f5713eb4af792ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/StopRecordingResponse";
  }

  static const char* value(const ::dg_msgs::StopRecordingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result        # 0: 成功  非0：失败\n"
"trajectory_msgs/JointTrajectoryPoint[] trajectory      # 机械臂轨迹\n"
"\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::dg_msgs::StopRecordingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopRecordingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::StopRecordingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::StopRecordingResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "trajectory[]" << std::endl;
    for (size_t i = 0; i < v.trajectory.size(); ++i)
    {
      s << indent << "  trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_STOPRECORDINGRESPONSE_H
