// Generated by gencpp from file dg_msgs/CorrectionJoint.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CORRECTIONJOINT_H
#define DG_MSGS_MESSAGE_CORRECTIONJOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct CorrectionJoint_
{
  typedef CorrectionJoint_<ContainerAllocator> Type;

  CorrectionJoint_()
    : number()
    , joints()  {
    }
  CorrectionJoint_(const ContainerAllocator& _alloc)
    : number(_alloc)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >> _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::dg_msgs::CorrectionJoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CorrectionJoint_<ContainerAllocator> const> ConstPtr;

}; // struct CorrectionJoint_

typedef ::dg_msgs::CorrectionJoint_<std::allocator<void> > CorrectionJoint;

typedef boost::shared_ptr< ::dg_msgs::CorrectionJoint > CorrectionJointPtr;
typedef boost::shared_ptr< ::dg_msgs::CorrectionJoint const> CorrectionJointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CorrectionJoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CorrectionJoint_<ContainerAllocator1> & lhs, const ::dg_msgs::CorrectionJoint_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CorrectionJoint_<ContainerAllocator1> & lhs, const ::dg_msgs::CorrectionJoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CorrectionJoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CorrectionJoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CorrectionJoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84713a8da3c3c07def323d8336d70de0";
  }

  static const char* value(const ::dg_msgs::CorrectionJoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84713a8da3c3c07dULL;
  static const uint64_t static_value2 = 0xef323d8336d70de0ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CorrectionJoint";
  }

  static const char* value(const ::dg_msgs::CorrectionJoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#纠偏轨迹\n"
"string number       # 设备编码\n"
"trajectory_msgs/JointTrajectoryPoint[] joints # 机械臂关节位置\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::dg_msgs::CorrectionJoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CorrectionJoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CorrectionJoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CorrectionJoint_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CORRECTIONJOINT_H
