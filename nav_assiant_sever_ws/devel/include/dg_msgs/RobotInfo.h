// Generated by gencpp from file dg_msgs/RobotInfo.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROBOTINFO_H
#define DG_MSGS_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct RobotInfo_
{
  typedef RobotInfo_<ContainerAllocator> Type;

  RobotInfo_()
    : robot_name()
    , robot_model()
    , state()
    , battery_level(0)
    , exception_code(0)
    , exception_message()  {
    }
  RobotInfo_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , robot_model(_alloc)
    , state(_alloc)
    , battery_level(0)
    , exception_code(0)
    , exception_message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_model_type;
  _robot_model_type robot_model;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef int32_t _battery_level_type;
  _battery_level_type battery_level;

   typedef int32_t _exception_code_type;
  _exception_code_type exception_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _exception_message_type;
  _exception_message_type exception_message;





  typedef boost::shared_ptr< ::dg_msgs::RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfo_

typedef ::dg_msgs::RobotInfo_<std::allocator<void> > RobotInfo;

typedef boost::shared_ptr< ::dg_msgs::RobotInfo > RobotInfoPtr;
typedef boost::shared_ptr< ::dg_msgs::RobotInfo const> RobotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::RobotInfo_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.robot_model == rhs.robot_model &&
    lhs.state == rhs.state &&
    lhs.battery_level == rhs.battery_level &&
    lhs.exception_code == rhs.exception_code &&
    lhs.exception_message == rhs.exception_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::RobotInfo_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd6f740e81722148b147dc17f6287738";
  }

  static const char* value(const ::dg_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd6f740e81722148ULL;
  static const uint64_t static_value2 = 0xb147dc17f6287738ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/RobotInfo";
  }

  static const char* value(const ::dg_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n"
"string robot_model\n"
"string state    # 机器人状态，standby（开机之后，正常状态），working（采集状态），teaching（示教），emergency（急停），exception（异常状态，有报错信息）\n"
"int32 battery_level # 0 = empty, 100 = full\n"
"int32 exception_code        # 异常码\n"
"string exception_message    # 异常信息\n"
"\n"
;
  }

  static const char* value(const ::dg_msgs::RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.robot_model);
      stream.next(m.state);
      stream.next(m.battery_level);
      stream.next(m.exception_code);
      stream.next(m.exception_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_name);
    s << indent << "robot_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_model);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "battery_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_level);
    s << indent << "exception_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exception_code);
    s << indent << "exception_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.exception_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROBOTINFO_H
