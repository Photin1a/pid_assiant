// Generated by gencpp from file dg_msgs/AcquisitionTaskActionGoal.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ACQUISITIONTASKACTIONGOAL_H
#define DG_MSGS_MESSAGE_ACQUISITIONTASKACTIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <dg_msgs/AcquisitionTaskGoal.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct AcquisitionTaskActionGoal_
{
  typedef AcquisitionTaskActionGoal_<ContainerAllocator> Type;

  AcquisitionTaskActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  AcquisitionTaskActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::dg_msgs::AcquisitionTaskGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct AcquisitionTaskActionGoal_

typedef ::dg_msgs::AcquisitionTaskActionGoal_<std::allocator<void> > AcquisitionTaskActionGoal;

typedef boost::shared_ptr< ::dg_msgs::AcquisitionTaskActionGoal > AcquisitionTaskActionGoalPtr;
typedef boost::shared_ptr< ::dg_msgs::AcquisitionTaskActionGoal const> AcquisitionTaskActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator1> & lhs, const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator1> & lhs, const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "521935db450a79ab4f4af071610df149";
  }

  static const char* value(const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x521935db450a79abULL;
  static const uint64_t static_value2 = 0x4f4af071610df149ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/AcquisitionTaskActionGoal";
  }

  static const char* value(const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"AcquisitionTaskGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/AcquisitionTaskGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string id\n"
"geometry_msgs/PoseStamped pose                          # 停车点位置(相对于车头（train_head）坐标系下的位置关系)\n"
"geometry_msgs/PoseStamped relative_pose                 # 停车点位置(相对于区域（region）坐标系下的位置关系)\n"
"int32 model_type                                        # 模型类型（车头： 1，区域： 2）\n"
"string model_path                                       # 车头、区域模型文件路径\n"
"string region_frame_path                                # 区域配准帧文件路径\n"
"float64[] matrix_region_regionframe                     # 区域到区域配准帧的配准结果\n"
"\n"
"string directory                                        # 图片存放目录\n"
"PointSequence[] image_points                            # 像点\n"
"string custom_message                                   # 自定义信息\n"
"\n"
"int32 region_type                                       # 区域类型，0直接复用，1镜像复用，2旋转180复用\n"
"float64[] matrix_region_init                            # 区域初始矩阵，镜像复用和旋转复用，在进行配准时需要提前对区域进行镜像和旋转\n"
"float64[] matrix_region_trainhead                       # 区域转换矩阵，区域在车头坐标系下的位置关系, 作为配准时的target的初始值\n"
"int32 reg_type                                          # 配准采集数据类型， 0为相机，1为雷达\n"
"string lidar_topic                                      # 雷达topic，用于确定使用哪个雷达采集数据\n"
"CorrectionPoint correction_point                        # 纠偏点，配准采集选择相机，相机需要移动到correction_point里传进来的pose, pose是存储在区域坐标系下的，配合relative_pose使用\n"
"CorrectionJoint correction_joint                        # 纠偏轨迹\n"
"CropBox box_target                                      # 配准所需要的target框\n"
"CropBox box_source                                      # 配准所需要的source框\n"
"\n"
"int32 cruising_route_type								# 0 坑道内巡检路线，1 车侧巡检路线\n"
"int32 geometry_completion_type							# 几何体补全类型，0 柱体\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/PointSequence\n"
"string number      # 设备组编号\n"
"ImagePoint[] points    # 机械臂拍照点位\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ImagePoint\n"
"geometry_msgs/PoseStamped pose\n"
"trajectory_msgs/JointTrajectoryPoint joint\n"
"float32 offset      # 升降柱伸缩量\n"
"string custom_message\n"
"ImageGoal image_goal\n"
"string point_file_name\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ImageGoal\n"
"string id          # ID\n"
"string number     # 设备编号\n"
"int32 types     # 拍照类型，灰度为`1`，彩色为`2`，深度为`4`，点云为`8`，多种类型时按位相与\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/CorrectionPoint\n"
"string number                                   # 设备组编号\n"
"geometry_msgs/PoseStamped pose                  # 相机目标点的pose\n"
"float32 offset                                  # 升降柱伸缩量\n"
"string custom_message\n"
"================================================================================\n"
"MSG: dg_msgs/CorrectionJoint\n"
"#纠偏轨迹\n"
"string number       # 设备编码\n"
"trajectory_msgs/JointTrajectoryPoint[] joints # 机械臂关节位置\n"
"================================================================================\n"
"MSG: dg_msgs/CropBox\n"
"float32[] center_\n"
"float32[] R_euler\n"
"float32[] extent_\n"
;
  }

  static const char* value(const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AcquisitionTaskActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::AcquisitionTaskActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::dg_msgs::AcquisitionTaskGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ACQUISITIONTASKACTIONGOAL_H
