// Generated by gencpp from file dg_msgs/XGPillerCenterRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_XGPILLERCENTERREQUEST_H
#define DG_MSGS_MESSAGE_XGPILLERCENTERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct XGPillerCenterRequest_
{
  typedef XGPillerCenterRequest_<ContainerAllocator> Type;

  XGPillerCenterRequest_()
    : detect_dis(0.0)  {
    }
  XGPillerCenterRequest_(const ContainerAllocator& _alloc)
    : detect_dis(0.0)  {
  (void)_alloc;
    }



   typedef float _detect_dis_type;
  _detect_dis_type detect_dis;





  typedef boost::shared_ptr< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct XGPillerCenterRequest_

typedef ::dg_msgs::XGPillerCenterRequest_<std::allocator<void> > XGPillerCenterRequest;

typedef boost::shared_ptr< ::dg_msgs::XGPillerCenterRequest > XGPillerCenterRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::XGPillerCenterRequest const> XGPillerCenterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.detect_dis == rhs.detect_dis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea150c0acebf3bc8e38a3c829e37e505";
  }

  static const char* value(const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea150c0acebf3bc8ULL;
  static const uint64_t static_value2 = 0xe38a3c829e37e505ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/XGPillerCenterRequest";
  }

  static const char* value(const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 detect_dis          # 距离motion_link的检测距离\n"
;
  }

  static const char* value(const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect_dis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XGPillerCenterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::XGPillerCenterRequest_<ContainerAllocator>& v)
  {
    s << indent << "detect_dis: ";
    Printer<float>::stream(s, indent + "  ", v.detect_dis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_XGPILLERCENTERREQUEST_H
