// Generated by gencpp from file dg_msgs/CameraTargetOrderRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CAMERATARGETORDERREQUEST_H
#define DG_MSGS_MESSAGE_CAMERATARGETORDERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct CameraTargetOrderRequest_
{
  typedef CameraTargetOrderRequest_<ContainerAllocator> Type;

  CameraTargetOrderRequest_()
    : pose_camera_baselink_array()
    , begin_joint()
    , end_joint()
    , lift_data()  {
    }
  CameraTargetOrderRequest_(const ContainerAllocator& _alloc)
    : pose_camera_baselink_array(_alloc)
    , begin_joint(_alloc)
    , end_joint(_alloc)
    , lift_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _pose_camera_baselink_array_type;
  _pose_camera_baselink_array_type pose_camera_baselink_array;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _begin_joint_type;
  _begin_joint_type begin_joint;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _end_joint_type;
  _end_joint_type end_joint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _lift_data_type;
  _lift_data_type lift_data;





  typedef boost::shared_ptr< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CameraTargetOrderRequest_

typedef ::dg_msgs::CameraTargetOrderRequest_<std::allocator<void> > CameraTargetOrderRequest;

typedef boost::shared_ptr< ::dg_msgs::CameraTargetOrderRequest > CameraTargetOrderRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::CameraTargetOrderRequest const> CameraTargetOrderRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose_camera_baselink_array == rhs.pose_camera_baselink_array &&
    lhs.begin_joint == rhs.begin_joint &&
    lhs.end_joint == rhs.end_joint &&
    lhs.lift_data == rhs.lift_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96d829781359ee3a89af49c3b0db055d";
  }

  static const char* value(const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96d829781359ee3aULL;
  static const uint64_t static_value2 = 0x89af49c3b0db055dULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CameraTargetOrderRequest";
  }

  static const char* value(const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseArray pose_camera_baselink_array\n"
"std_msgs/Float64MultiArray begin_joint\n"
"std_msgs/Float64MultiArray end_joint\n"
"float64[]                                  lift_data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_camera_baselink_array);
      stream.next(m.begin_joint);
      stream.next(m.end_joint);
      stream.next(m.lift_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraTargetOrderRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CameraTargetOrderRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose_camera_baselink_array: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_camera_baselink_array);
    s << indent << "begin_joint: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.begin_joint);
    s << indent << "end_joint: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.end_joint);
    s << indent << "lift_data[]" << std::endl;
    for (size_t i = 0; i < v.lift_data.size(); ++i)
    {
      s << indent << "  lift_data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lift_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CAMERATARGETORDERREQUEST_H
