// Generated by gencpp from file dg_msgs/CollisionTestResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_COLLISIONTESTRESPONSE_H
#define DG_MSGS_MESSAGE_COLLISIONTESTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct CollisionTestResponse_
{
  typedef CollisionTestResponse_<ContainerAllocator> Type;

  CollisionTestResponse_()
    : Is_collision(false)
    , collision_joint()  {
    }
  CollisionTestResponse_(const ContainerAllocator& _alloc)
    : Is_collision(false)
    , collision_joint(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _Is_collision_type;
  _Is_collision_type Is_collision;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _collision_joint_type;
  _collision_joint_type collision_joint;





  typedef boost::shared_ptr< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CollisionTestResponse_

typedef ::dg_msgs::CollisionTestResponse_<std::allocator<void> > CollisionTestResponse;

typedef boost::shared_ptr< ::dg_msgs::CollisionTestResponse > CollisionTestResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::CollisionTestResponse const> CollisionTestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CollisionTestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CollisionTestResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CollisionTestResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Is_collision == rhs.Is_collision &&
    lhs.collision_joint == rhs.collision_joint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CollisionTestResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CollisionTestResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf09aec3412804357417651c82888ed6";
  }

  static const char* value(const ::dg_msgs::CollisionTestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf09aec341280435ULL;
  static const uint64_t static_value2 = 0x7417651c82888ed6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CollisionTestResponse";
  }

  static const char* value(const ::dg_msgs::CollisionTestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Is_collision\n"
"string[] collision_joint\n"
;
  }

  static const char* value(const ::dg_msgs::CollisionTestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Is_collision);
      stream.next(m.collision_joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisionTestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CollisionTestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CollisionTestResponse_<ContainerAllocator>& v)
  {
    s << indent << "Is_collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_collision);
    s << indent << "collision_joint[]" << std::endl;
    for (size_t i = 0; i < v.collision_joint.size(); ++i)
    {
      s << indent << "  collision_joint[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.collision_joint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_COLLISIONTESTRESPONSE_H
