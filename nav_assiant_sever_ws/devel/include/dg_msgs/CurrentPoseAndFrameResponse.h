// Generated by gencpp from file dg_msgs/CurrentPoseAndFrameResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMERESPONSE_H
#define DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct CurrentPoseAndFrameResponse_
{
  typedef CurrentPoseAndFrameResponse_<ContainerAllocator> Type;

  CurrentPoseAndFrameResponse_()
    : result(0)
    , pose()
    , data_file_path()  {
    }
  CurrentPoseAndFrameResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , pose(_alloc)
    , data_file_path(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_file_path_type;
  _data_file_path_type data_file_path;





  typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentPoseAndFrameResponse_

typedef ::dg_msgs::CurrentPoseAndFrameResponse_<std::allocator<void> > CurrentPoseAndFrameResponse;

typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameResponse > CurrentPoseAndFrameResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameResponse const> CurrentPoseAndFrameResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.pose == rhs.pose &&
    lhs.data_file_path == rhs.data_file_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f463f8e622160c20ef7649d2827224d9";
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf463f8e622160c20ULL;
  static const uint64_t static_value2 = 0xef7649d2827224d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CurrentPoseAndFrameResponse";
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result                       # 0: 成功  非0：失败\n"
"geometry_msgs/PoseStamped pose     # 当前机器人全局坐标\n"
"string data_file_path              # 采集数据存放路径\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.pose);
      stream.next(m.data_file_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentPoseAndFrameResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CurrentPoseAndFrameResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "data_file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data_file_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMERESPONSE_H
