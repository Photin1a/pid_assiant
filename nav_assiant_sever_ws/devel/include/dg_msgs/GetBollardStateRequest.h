// Generated by gencpp from file dg_msgs/GetBollardStateRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_GETBOLLARDSTATEREQUEST_H
#define DG_MSGS_MESSAGE_GETBOLLARDSTATEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct GetBollardStateRequest_
{
  typedef GetBollardStateRequest_<ContainerAllocator> Type;

  GetBollardStateRequest_()
    : bollard_index(0)  {
    }
  GetBollardStateRequest_(const ContainerAllocator& _alloc)
    : bollard_index(0)  {
  (void)_alloc;
    }



   typedef int32_t _bollard_index_type;
  _bollard_index_type bollard_index;





  typedef boost::shared_ptr< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetBollardStateRequest_

typedef ::dg_msgs::GetBollardStateRequest_<std::allocator<void> > GetBollardStateRequest;

typedef boost::shared_ptr< ::dg_msgs::GetBollardStateRequest > GetBollardStateRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::GetBollardStateRequest const> GetBollardStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.bollard_index == rhs.bollard_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4e4c048ccf1d3acdeec8c85b63f11ee";
  }

  static const char* value(const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4e4c048ccf1d3acULL;
  static const uint64_t static_value2 = 0xdeec8c85b63f11eeULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/GetBollardStateRequest";
  }

  static const char* value(const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 获得升降柱状态\n"
"int32 bollard_index         # 升降柱编号\n"
;
  }

  static const char* value(const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bollard_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetBollardStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::GetBollardStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::GetBollardStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "bollard_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bollard_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_GETBOLLARDSTATEREQUEST_H
