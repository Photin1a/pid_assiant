// Generated by gencpp from file dg_msgs/ImageResult.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_IMAGERESULT_H
#define DG_MSGS_MESSAGE_IMAGERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct ImageResult_
{
  typedef ImageResult_<ContainerAllocator> Type;

  ImageResult_()
    : id()
    , result(0)
    , gray()
    , rgb()
    , depth()
    , point_cloud()
    , intrinsic()  {
    }
  ImageResult_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , result(0)
    , gray(_alloc)
    , rgb(_alloc)
    , depth(_alloc)
    , point_cloud(_alloc)
    , intrinsic(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef int32_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gray_type;
  _gray_type gray;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rgb_type;
  _rgb_type rgb;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _depth_type;
  _depth_type depth;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _point_cloud_type;
  _point_cloud_type point_cloud;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _intrinsic_type;
  _intrinsic_type intrinsic;





  typedef boost::shared_ptr< ::dg_msgs::ImageResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::ImageResult_<ContainerAllocator> const> ConstPtr;

}; // struct ImageResult_

typedef ::dg_msgs::ImageResult_<std::allocator<void> > ImageResult;

typedef boost::shared_ptr< ::dg_msgs::ImageResult > ImageResultPtr;
typedef boost::shared_ptr< ::dg_msgs::ImageResult const> ImageResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::ImageResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::ImageResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::ImageResult_<ContainerAllocator1> & lhs, const ::dg_msgs::ImageResult_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.result == rhs.result &&
    lhs.gray == rhs.gray &&
    lhs.rgb == rhs.rgb &&
    lhs.depth == rhs.depth &&
    lhs.point_cloud == rhs.point_cloud &&
    lhs.intrinsic == rhs.intrinsic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::ImageResult_<ContainerAllocator1> & lhs, const ::dg_msgs::ImageResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ImageResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ImageResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ImageResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ImageResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ImageResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ImageResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::ImageResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "929c9d255c2b3abf0da93c2483ac7bec";
  }

  static const char* value(const ::dg_msgs::ImageResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x929c9d255c2b3abfULL;
  static const uint64_t static_value2 = 0x0da93c2483ac7becULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::ImageResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/ImageResult";
  }

  static const char* value(const ::dg_msgs::ImageResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::ImageResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"int32 result        # 拍照结果 0: 成功  非0：失败\n"
"string gray         # 灰度图路径\n"
"string rgb          # 彩色图路径\n"
"string depth        # 深度图路径\n"
"string point_cloud  # 点云路径\n"
"float32[] intrinsic # 相机内参\n"
;
  }

  static const char* value(const ::dg_msgs::ImageResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::ImageResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.result);
      stream.next(m.gray);
      stream.next(m.rgb);
      stream.next(m.depth);
      stream.next(m.point_cloud);
      stream.next(m.intrinsic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::ImageResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::ImageResult_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "gray: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gray);
    s << indent << "rgb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rgb);
    s << indent << "depth: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.depth);
    s << indent << "point_cloud: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.point_cloud);
    s << indent << "intrinsic[]" << std::endl;
    for (size_t i = 0; i < v.intrinsic.size(); ++i)
    {
      s << indent << "  intrinsic[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.intrinsic[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_IMAGERESULT_H
