// Generated by gencpp from file dg_msgs/SpeedScaleRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_SPEEDSCALEREQUEST_H
#define DG_MSGS_MESSAGE_SPEEDSCALEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct SpeedScaleRequest_
{
  typedef SpeedScaleRequest_<ContainerAllocator> Type;

  SpeedScaleRequest_()
    : linear_scale(0.0)
    , angular_scale(0.0)  {
    }
  SpeedScaleRequest_(const ContainerAllocator& _alloc)
    : linear_scale(0.0)
    , angular_scale(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_scale_type;
  _linear_scale_type linear_scale;

   typedef float _angular_scale_type;
  _angular_scale_type angular_scale;





  typedef boost::shared_ptr< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedScaleRequest_

typedef ::dg_msgs::SpeedScaleRequest_<std::allocator<void> > SpeedScaleRequest;

typedef boost::shared_ptr< ::dg_msgs::SpeedScaleRequest > SpeedScaleRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::SpeedScaleRequest const> SpeedScaleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.linear_scale == rhs.linear_scale &&
    lhs.angular_scale == rhs.angular_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78ac8ff80e55b334b8429a979bb2a197";
  }

  static const char* value(const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78ac8ff80e55b334ULL;
  static const uint64_t static_value2 = 0xb8429a979bb2a197ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/SpeedScaleRequest";
  }

  static const char* value(const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear_scale\n"
"float32 angular_scale\n"
;
  }

  static const char* value(const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_scale);
      stream.next(m.angular_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedScaleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::SpeedScaleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::SpeedScaleRequest_<ContainerAllocator>& v)
  {
    s << indent << "linear_scale: ";
    Printer<float>::stream(s, indent + "  ", v.linear_scale);
    s << indent << "angular_scale: ";
    Printer<float>::stream(s, indent + "  ", v.angular_scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_SPEEDSCALEREQUEST_H
