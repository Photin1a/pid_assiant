// Generated by gencpp from file dg_msgs/AntiCollisionWheelState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ANTICOLLISIONWHEELSTATE_H
#define DG_MSGS_MESSAGE_ANTICOLLISIONWHEELSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct AntiCollisionWheelState_
{
  typedef AntiCollisionWheelState_<ContainerAllocator> Type;

  AntiCollisionWheelState_()
    : wheel_name()
    , is_get_state(false)
    , position(0.0)
    , speed(0.0)
    , state_word(0)  {
    }
  AntiCollisionWheelState_(const ContainerAllocator& _alloc)
    : wheel_name(_alloc)
    , is_get_state(false)
    , position(0.0)
    , speed(0.0)
    , state_word(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _wheel_name_type;
  _wheel_name_type wheel_name;

   typedef uint8_t _is_get_state_type;
  _is_get_state_type is_get_state;

   typedef float _position_type;
  _position_type position;

   typedef float _speed_type;
  _speed_type speed;

   typedef int32_t _state_word_type;
  _state_word_type state_word;





  typedef boost::shared_ptr< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> const> ConstPtr;

}; // struct AntiCollisionWheelState_

typedef ::dg_msgs::AntiCollisionWheelState_<std::allocator<void> > AntiCollisionWheelState;

typedef boost::shared_ptr< ::dg_msgs::AntiCollisionWheelState > AntiCollisionWheelStatePtr;
typedef boost::shared_ptr< ::dg_msgs::AntiCollisionWheelState const> AntiCollisionWheelStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator1> & lhs, const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_name == rhs.wheel_name &&
    lhs.is_get_state == rhs.is_get_state &&
    lhs.position == rhs.position &&
    lhs.speed == rhs.speed &&
    lhs.state_word == rhs.state_word;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator1> & lhs, const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a269fe39cc5307abc0b5ce3d3619c54a";
  }

  static const char* value(const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa269fe39cc5307abULL;
  static const uint64_t static_value2 = 0xc0b5ce3d3619c54aULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/AntiCollisionWheelState";
  }

  static const char* value(const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 防撞轮状态 - 设置和获取通用\n"
"string wheel_name           # 防撞轮名\n"
"bool is_get_state           # 当前请求是否是获得状态，如果为true为请求状态，false则为设置状态\n"
"float32 position            # 位置\n"
"float32 speed               # 速度\n"
"int32 state_word            # 状态字\n"
;
  }

  static const char* value(const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_name);
      stream.next(m.is_get_state);
      stream.next(m.position);
      stream.next(m.speed);
      stream.next(m.state_word);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AntiCollisionWheelState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::AntiCollisionWheelState_<ContainerAllocator>& v)
  {
    s << indent << "wheel_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.wheel_name);
    s << indent << "is_get_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_get_state);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "state_word: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state_word);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ANTICOLLISIONWHEELSTATE_H
