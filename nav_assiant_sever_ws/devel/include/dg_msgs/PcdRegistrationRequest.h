// Generated by gencpp from file dg_msgs/PcdRegistrationRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_PCDREGISTRATIONREQUEST_H
#define DG_MSGS_MESSAGE_PCDREGISTRATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/PointCloud2.h>
#include <dg_msgs/CropBox.h>
#include <dg_msgs/CropBox.h>
#include <geometry_msgs/Transform.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct PcdRegistrationRequest_
{
  typedef PcdRegistrationRequest_<ContainerAllocator> Type;

  PcdRegistrationRequest_()
    : data_collect(0)
    , topic_lidar()
    , collection_frames(0)
    , path_source()
    , path_target()
    , pcd_target()
    , statistical_filter_source(false)
    , statistical_filter_target(false)
    , use_fpfh(false)
    , crop(false)
    , cropbox_source()
    , cropbox_target()
    , init_pose()  {
    }
  PcdRegistrationRequest_(const ContainerAllocator& _alloc)
    : data_collect(0)
    , topic_lidar(_alloc)
    , collection_frames(0)
    , path_source(_alloc)
    , path_target(_alloc)
    , pcd_target(_alloc)
    , statistical_filter_source(false)
    , statistical_filter_target(false)
    , use_fpfh(false)
    , crop(false)
    , cropbox_source(_alloc)
    , cropbox_target(_alloc)
    , init_pose(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _data_collect_type;
  _data_collect_type data_collect;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_lidar_type;
  _topic_lidar_type topic_lidar;

   typedef int32_t _collection_frames_type;
  _collection_frames_type collection_frames;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_source_type;
  _path_source_type path_source;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_target_type;
  _path_target_type path_target;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pcd_target_type;
  _pcd_target_type pcd_target;

   typedef uint8_t _statistical_filter_source_type;
  _statistical_filter_source_type statistical_filter_source;

   typedef uint8_t _statistical_filter_target_type;
  _statistical_filter_target_type statistical_filter_target;

   typedef uint8_t _use_fpfh_type;
  _use_fpfh_type use_fpfh;

   typedef uint8_t _crop_type;
  _crop_type crop;

   typedef  ::dg_msgs::CropBox_<ContainerAllocator>  _cropbox_source_type;
  _cropbox_source_type cropbox_source;

   typedef  ::dg_msgs::CropBox_<ContainerAllocator>  _cropbox_target_type;
  _cropbox_target_type cropbox_target;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _init_pose_type;
  _init_pose_type init_pose;





  typedef boost::shared_ptr< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PcdRegistrationRequest_

typedef ::dg_msgs::PcdRegistrationRequest_<std::allocator<void> > PcdRegistrationRequest;

typedef boost::shared_ptr< ::dg_msgs::PcdRegistrationRequest > PcdRegistrationRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::PcdRegistrationRequest const> PcdRegistrationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data_collect == rhs.data_collect &&
    lhs.topic_lidar == rhs.topic_lidar &&
    lhs.collection_frames == rhs.collection_frames &&
    lhs.path_source == rhs.path_source &&
    lhs.path_target == rhs.path_target &&
    lhs.pcd_target == rhs.pcd_target &&
    lhs.statistical_filter_source == rhs.statistical_filter_source &&
    lhs.statistical_filter_target == rhs.statistical_filter_target &&
    lhs.use_fpfh == rhs.use_fpfh &&
    lhs.crop == rhs.crop &&
    lhs.cropbox_source == rhs.cropbox_source &&
    lhs.cropbox_target == rhs.cropbox_target &&
    lhs.init_pose == rhs.init_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ca9bf47f7157e39aff94ce7969f406a";
  }

  static const char* value(const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ca9bf47f7157e39ULL;
  static const uint64_t static_value2 = 0xaff94ce7969f406aULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/PcdRegistrationRequest";
  }

  static const char* value(const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 data_collect\n"
"string topic_lidar\n"
"int32 collection_frames\n"
"string path_source\n"
"string path_target\n"
"sensor_msgs/PointCloud2 pcd_target\n"
"bool statistical_filter_source\n"
"bool statistical_filter_target\n"
"bool use_fpfh\n"
"bool crop\n"
"CropBox cropbox_source\n"
"CropBox cropbox_target\n"
"geometry_msgs/Transform init_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/CropBox\n"
"float32[] center_\n"
"float32[] R_euler\n"
"float32[] extent_\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_collect);
      stream.next(m.topic_lidar);
      stream.next(m.collection_frames);
      stream.next(m.path_source);
      stream.next(m.path_target);
      stream.next(m.pcd_target);
      stream.next(m.statistical_filter_source);
      stream.next(m.statistical_filter_target);
      stream.next(m.use_fpfh);
      stream.next(m.crop);
      stream.next(m.cropbox_source);
      stream.next(m.cropbox_target);
      stream.next(m.init_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PcdRegistrationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::PcdRegistrationRequest_<ContainerAllocator>& v)
  {
    s << indent << "data_collect: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data_collect);
    s << indent << "topic_lidar: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic_lidar);
    s << indent << "collection_frames: ";
    Printer<int32_t>::stream(s, indent + "  ", v.collection_frames);
    s << indent << "path_source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_source);
    s << indent << "path_target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_target);
    s << indent << "pcd_target: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.pcd_target);
    s << indent << "statistical_filter_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.statistical_filter_source);
    s << indent << "statistical_filter_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.statistical_filter_target);
    s << indent << "use_fpfh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_fpfh);
    s << indent << "crop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crop);
    s << indent << "cropbox_source: ";
    s << std::endl;
    Printer< ::dg_msgs::CropBox_<ContainerAllocator> >::stream(s, indent + "  ", v.cropbox_source);
    s << indent << "cropbox_target: ";
    s << std::endl;
    Printer< ::dg_msgs::CropBox_<ContainerAllocator> >::stream(s, indent + "  ", v.cropbox_target);
    s << indent << "init_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.init_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_PCDREGISTRATIONREQUEST_H
