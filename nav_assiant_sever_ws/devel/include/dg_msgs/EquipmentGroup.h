// Generated by gencpp from file dg_msgs/EquipmentGroup.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_EQUIPMENTGROUP_H
#define DG_MSGS_MESSAGE_EQUIPMENTGROUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/SlideTableInfo.h>
#include <dg_msgs/LiftingColumnInfo.h>
#include <dg_msgs/RobotArmInfo.h>
#include <dg_msgs/CameraInfo.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct EquipmentGroup_
{
  typedef EquipmentGroup_<ContainerAllocator> Type;

  EquipmentGroup_()
    : name()
    , number()
    , slide_table()
    , lifting_column()
    , robot_arm()
    , cameras()  {
    }
  EquipmentGroup_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , number(_alloc)
    , slide_table(_alloc)
    , lifting_column(_alloc)
    , robot_arm(_alloc)
    , cameras(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef  ::dg_msgs::SlideTableInfo_<ContainerAllocator>  _slide_table_type;
  _slide_table_type slide_table;

   typedef  ::dg_msgs::LiftingColumnInfo_<ContainerAllocator>  _lifting_column_type;
  _lifting_column_type lifting_column;

   typedef  ::dg_msgs::RobotArmInfo_<ContainerAllocator>  _robot_arm_type;
  _robot_arm_type robot_arm;

   typedef std::vector< ::dg_msgs::CameraInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::dg_msgs::CameraInfo_<ContainerAllocator> >> _cameras_type;
  _cameras_type cameras;





  typedef boost::shared_ptr< ::dg_msgs::EquipmentGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::EquipmentGroup_<ContainerAllocator> const> ConstPtr;

}; // struct EquipmentGroup_

typedef ::dg_msgs::EquipmentGroup_<std::allocator<void> > EquipmentGroup;

typedef boost::shared_ptr< ::dg_msgs::EquipmentGroup > EquipmentGroupPtr;
typedef boost::shared_ptr< ::dg_msgs::EquipmentGroup const> EquipmentGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::EquipmentGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::EquipmentGroup_<ContainerAllocator1> & lhs, const ::dg_msgs::EquipmentGroup_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.number == rhs.number &&
    lhs.slide_table == rhs.slide_table &&
    lhs.lifting_column == rhs.lifting_column &&
    lhs.robot_arm == rhs.robot_arm &&
    lhs.cameras == rhs.cameras;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::EquipmentGroup_<ContainerAllocator1> & lhs, const ::dg_msgs::EquipmentGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::EquipmentGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::EquipmentGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::EquipmentGroup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f0794ee84d32d51d621caef93d18cf5";
  }

  static const char* value(const ::dg_msgs::EquipmentGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f0794ee84d32d51ULL;
  static const uint64_t static_value2 = 0xd621caef93d18cf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/EquipmentGroup";
  }

  static const char* value(const ::dg_msgs::EquipmentGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name             # 设备组名称\n"
"string number           # 设备组编号\n"
"SlideTableInfo slide_table\n"
"LiftingColumnInfo lifting_column\n"
"RobotArmInfo robot_arm\n"
"CameraInfo[] cameras\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/SlideTableInfo\n"
"EquipmentCommon equipment\n"
"string number           # 设备组编号\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/EquipmentCommon\n"
"int32 equipment_id\n"
"string equipment_name\n"
"bool connected\n"
"uint64 connected_time\n"
"string model\n"
"string manufacturer\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/LiftingColumnInfo\n"
"EquipmentCommon equipment\n"
"string number           # 设备组编号\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/RobotArmInfo\n"
"EquipmentCommon equipment\n"
"string number           # 设备组编号\n"
"int32 state\n"
"bool enabled            # 机械臂是否使能标志\n"
"bool protective_stop    # 机械臂是否检测到碰撞\n"
"bool emergency_stop     # 机械臂是否急停\n"
"bool drag_status        # 机械臂是否处于拖拽状态\n"
"bool recording          # 机械臂是否处于录制状态\n"
"bool moving_stop        # 机械臂是否处于运动状态\n"
"float64 speed_ratio     # 机械臂当前速度\n"
"bool error_status       # 机械臂是否处于报错状态\n"
"string[] error_msgs     # 机械臂的错误信息反馈\n"
"string payload          # 自定义信息，用于存放不同型号机械臂信息\n"
"================================================================================\n"
"MSG: dg_msgs/CameraInfo\n"
"EquipmentCommon equipment\n"
"string number           # 设备组编号\n"
"string sn_number\n"
"int32 type\n"
"float32[] intrinsics\n"
;
  }

  static const char* value(const ::dg_msgs::EquipmentGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.number);
      stream.next(m.slide_table);
      stream.next(m.lifting_column);
      stream.next(m.robot_arm);
      stream.next(m.cameras);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EquipmentGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::EquipmentGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::EquipmentGroup_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "slide_table: ";
    s << std::endl;
    Printer< ::dg_msgs::SlideTableInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.slide_table);
    s << indent << "lifting_column: ";
    s << std::endl;
    Printer< ::dg_msgs::LiftingColumnInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.lifting_column);
    s << indent << "robot_arm: ";
    s << std::endl;
    Printer< ::dg_msgs::RobotArmInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_arm);
    s << indent << "cameras[]" << std::endl;
    for (size_t i = 0; i < v.cameras.size(); ++i)
    {
      s << indent << "  cameras[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dg_msgs::CameraInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.cameras[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_EQUIPMENTGROUP_H
