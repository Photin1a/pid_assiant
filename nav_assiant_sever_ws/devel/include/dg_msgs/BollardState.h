// Generated by gencpp from file dg_msgs/BollardState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_BOLLARDSTATE_H
#define DG_MSGS_MESSAGE_BOLLARDSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct BollardState_
{
  typedef BollardState_<ContainerAllocator> Type;

  BollardState_()
    : number()
    , bollard_name()
    , absolute_height(0.0)
    , speed(0.0)
    , is_aviable(false)
    , is_moving(false)  {
    }
  BollardState_(const ContainerAllocator& _alloc)
    : number(_alloc)
    , bollard_name(_alloc)
    , absolute_height(0.0)
    , speed(0.0)
    , is_aviable(false)
    , is_moving(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bollard_name_type;
  _bollard_name_type bollard_name;

   typedef float _absolute_height_type;
  _absolute_height_type absolute_height;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _is_aviable_type;
  _is_aviable_type is_aviable;

   typedef uint8_t _is_moving_type;
  _is_moving_type is_moving;





  typedef boost::shared_ptr< ::dg_msgs::BollardState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::BollardState_<ContainerAllocator> const> ConstPtr;

}; // struct BollardState_

typedef ::dg_msgs::BollardState_<std::allocator<void> > BollardState;

typedef boost::shared_ptr< ::dg_msgs::BollardState > BollardStatePtr;
typedef boost::shared_ptr< ::dg_msgs::BollardState const> BollardStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::BollardState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::BollardState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::BollardState_<ContainerAllocator1> & lhs, const ::dg_msgs::BollardState_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.bollard_name == rhs.bollard_name &&
    lhs.absolute_height == rhs.absolute_height &&
    lhs.speed == rhs.speed &&
    lhs.is_aviable == rhs.is_aviable &&
    lhs.is_moving == rhs.is_moving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::BollardState_<ContainerAllocator1> & lhs, const ::dg_msgs::BollardState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::BollardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::BollardState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::BollardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::BollardState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::BollardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::BollardState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::BollardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97182af4acca076bb0c4ed889ad3c8a0";
  }

  static const char* value(const ::dg_msgs::BollardState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97182af4acca076bULL;
  static const uint64_t static_value2 = 0xb0c4ed889ad3c8a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::BollardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/BollardState";
  }

  static const char* value(const ::dg_msgs::BollardState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::BollardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 升降柱状态信息\n"
"string number               # 设备组编号\n"
"string bollard_name         # 升降柱名\n"
"float32 absolute_height     # 升降柱绝对高度\n"
"float32 speed               # 升降柱速度\n"
"bool is_aviable             # 当前是否可用；急停被按下、当前处于自动、modbus指针没有成功建立\n"
"bool is_moving              # 当前是否正在运动\n"
;
  }

  static const char* value(const ::dg_msgs::BollardState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::BollardState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.bollard_name);
      stream.next(m.absolute_height);
      stream.next(m.speed);
      stream.next(m.is_aviable);
      stream.next(m.is_moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BollardState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::BollardState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::BollardState_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "bollard_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bollard_name);
    s << indent << "absolute_height: ";
    Printer<float>::stream(s, indent + "  ", v.absolute_height);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "is_aviable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_aviable);
    s << indent << "is_moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_BOLLARDSTATE_H
