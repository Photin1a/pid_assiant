// Generated by gencpp from file dg_msgs/GeneralHardwareAndNodeState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_GENERALHARDWAREANDNODESTATE_H
#define DG_MSGS_MESSAGE_GENERALHARDWAREANDNODESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/MonitorState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct GeneralHardwareAndNodeState_
{
  typedef GeneralHardwareAndNodeState_<ContainerAllocator> Type;

  GeneralHardwareAndNodeState_()
    : name()
    , state_info()  {
    }
  GeneralHardwareAndNodeState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , state_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::dg_msgs::MonitorState_<ContainerAllocator>  _state_info_type;
  _state_info_type state_info;





  typedef boost::shared_ptr< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> const> ConstPtr;

}; // struct GeneralHardwareAndNodeState_

typedef ::dg_msgs::GeneralHardwareAndNodeState_<std::allocator<void> > GeneralHardwareAndNodeState;

typedef boost::shared_ptr< ::dg_msgs::GeneralHardwareAndNodeState > GeneralHardwareAndNodeStatePtr;
typedef boost::shared_ptr< ::dg_msgs::GeneralHardwareAndNodeState const> GeneralHardwareAndNodeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator1> & lhs, const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.state_info == rhs.state_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator1> & lhs, const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8286b537435a2ee37a9de658f76fd67d";
  }

  static const char* value(const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8286b537435a2ee3ULL;
  static const uint64_t static_value2 = 0x7a9de658f76fd67dULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/GeneralHardwareAndNodeState";
  }

  static const char* value(const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 通用的状态信息\n"
"string name                 # 对象名\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
;
  }

  static const char* value(const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.state_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeneralHardwareAndNodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::GeneralHardwareAndNodeState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "state_info: ";
    s << std::endl;
    Printer< ::dg_msgs::MonitorState_<ContainerAllocator> >::stream(s, indent + "  ", v.state_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_GENERALHARDWAREANDNODESTATE_H
