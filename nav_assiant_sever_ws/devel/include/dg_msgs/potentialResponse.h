// Generated by gencpp from file dg_msgs/potentialResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_POTENTIALRESPONSE_H
#define DG_MSGS_MESSAGE_POTENTIALRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct potentialResponse_
{
  typedef potentialResponse_<ContainerAllocator> Type;

  potentialResponse_()
    : ret(0)
    , joints_new_real()
    , pose_new_real()
    , data_error(0.0)  {
    }
  potentialResponse_(const ContainerAllocator& _alloc)
    : ret(0)
    , joints_new_real(_alloc)
    , pose_new_real(_alloc)
    , data_error(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ret_type;
  _ret_type ret;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joints_new_real_type;
  _joints_new_real_type joints_new_real;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_new_real_type;
  _pose_new_real_type pose_new_real;

   typedef double _data_error_type;
  _data_error_type data_error;





  typedef boost::shared_ptr< ::dg_msgs::potentialResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::potentialResponse_<ContainerAllocator> const> ConstPtr;

}; // struct potentialResponse_

typedef ::dg_msgs::potentialResponse_<std::allocator<void> > potentialResponse;

typedef boost::shared_ptr< ::dg_msgs::potentialResponse > potentialResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::potentialResponse const> potentialResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::potentialResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::potentialResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::potentialResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::potentialResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ret == rhs.ret &&
    lhs.joints_new_real == rhs.joints_new_real &&
    lhs.pose_new_real == rhs.pose_new_real &&
    lhs.data_error == rhs.data_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::potentialResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::potentialResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::potentialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::potentialResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::potentialResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::potentialResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::potentialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::potentialResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::potentialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db4b01c841da9916e59cfb7bcbfa4040";
  }

  static const char* value(const ::dg_msgs::potentialResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb4b01c841da9916ULL;
  static const uint64_t static_value2 = 0xe59cfb7bcbfa4040ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::potentialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/potentialResponse";
  }

  static const char* value(const ::dg_msgs::potentialResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::potentialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32                   ret\n"
"float64[]                               joints_new_real\n"
"geometry_msgs/Pose    pose_new_real\n"
"float64         data_error\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dg_msgs::potentialResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::potentialResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ret);
      stream.next(m.joints_new_real);
      stream.next(m.pose_new_real);
      stream.next(m.data_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct potentialResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::potentialResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::potentialResponse_<ContainerAllocator>& v)
  {
    s << indent << "ret: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ret);
    s << indent << "joints_new_real[]" << std::endl;
    for (size_t i = 0; i < v.joints_new_real.size(); ++i)
    {
      s << indent << "  joints_new_real[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints_new_real[i]);
    }
    s << indent << "pose_new_real: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_new_real);
    s << indent << "data_error: ";
    Printer<double>::stream(s, indent + "  ", v.data_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_POTENTIALRESPONSE_H
