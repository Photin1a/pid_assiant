// Generated by gencpp from file dg_msgs/MoveToNavPointRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_MOVETONAVPOINTREQUEST_H
#define DG_MSGS_MESSAGE_MOVETONAVPOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct MoveToNavPointRequest_
{
  typedef MoveToNavPointRequest_<ContainerAllocator> Type;

  MoveToNavPointRequest_()
    : distance(0.0)
    , check_state(false)  {
    }
  MoveToNavPointRequest_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , check_state(false)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef uint8_t _check_state_type;
  _check_state_type check_state;





  typedef boost::shared_ptr< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToNavPointRequest_

typedef ::dg_msgs::MoveToNavPointRequest_<std::allocator<void> > MoveToNavPointRequest;

typedef boost::shared_ptr< ::dg_msgs::MoveToNavPointRequest > MoveToNavPointRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::MoveToNavPointRequest const> MoveToNavPointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.check_state == rhs.check_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bebdd415c2baa769bb632ce67520f8a";
  }

  static const char* value(const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bebdd415c2baa76ULL;
  static const uint64_t static_value2 = 0x9bb632ce67520f8aULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/MoveToNavPointRequest";
  }

  static const char* value(const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance            # 站点导航模式下移动距离，> 0 向前，< 0 向后\n"
"bool check_state            # 是否要求机械臂必须要在home点：true底盘运动前机械臂必须要在home位，否则直接返回运动失败；false则不对机械臂进行检查，完全信任人工操作\n"
;
  }

  static const char* value(const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.check_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToNavPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::MoveToNavPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "check_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_MOVETONAVPOINTREQUEST_H
