// Generated by gencpp from file dg_msgs/CurrentPoseAndFrameRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMEREQUEST_H
#define DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct CurrentPoseAndFrameRequest_
{
  typedef CurrentPoseAndFrameRequest_<ContainerAllocator> Type;

  CurrentPoseAndFrameRequest_()
    : sensor_type()
    , sensor_id()
    , directory()
    , frame_type()  {
    }
  CurrentPoseAndFrameRequest_(const ContainerAllocator& _alloc)
    : sensor_type(_alloc)
    , sensor_id(_alloc)
    , directory(_alloc)
    , frame_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_type_type;
  _sensor_type_type sensor_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _directory_type;
  _directory_type directory;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_type_type;
  _frame_type_type frame_type;





  typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentPoseAndFrameRequest_

typedef ::dg_msgs::CurrentPoseAndFrameRequest_<std::allocator<void> > CurrentPoseAndFrameRequest;

typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameRequest > CurrentPoseAndFrameRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::CurrentPoseAndFrameRequest const> CurrentPoseAndFrameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_type == rhs.sensor_type &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.directory == rhs.directory &&
    lhs.frame_type == rhs.frame_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3c2927265057c7c63498a08d017d864";
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3c2927265057c7cULL;
  static const uint64_t static_value2 = 0x63498a08d017d864ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CurrentPoseAndFrameRequest";
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 采集区域帧/车头帧\n"
"string sensor_type         # 雷达（lidar）、精扫相机（camera）\n"
"string sensor_id           # 雷达topic  相机分组编号\n"
"string directory           # 数据存放目录\n"
"string frame_type          # 帧类型：车头配准帧（head）区域配准帧（region）\n"
;
  }

  static const char* value(const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_type);
      stream.next(m.sensor_id);
      stream.next(m.directory);
      stream.next(m.frame_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentPoseAndFrameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CurrentPoseAndFrameRequest_<ContainerAllocator>& v)
  {
    s << indent << "sensor_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_type);
    s << indent << "sensor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "directory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.directory);
    s << indent << "frame_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CURRENTPOSEANDFRAMEREQUEST_H
