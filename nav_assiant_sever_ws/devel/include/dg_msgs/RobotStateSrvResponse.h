// Generated by gencpp from file dg_msgs/RobotStateSrvResponse.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROBOTSTATESRVRESPONSE_H
#define DG_MSGS_MESSAGE_ROBOTSTATESRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/RobotInfo.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct RobotStateSrvResponse_
{
  typedef RobotStateSrvResponse_<ContainerAllocator> Type;

  RobotStateSrvResponse_()
    : robot_info()  {
    }
  RobotStateSrvResponse_(const ContainerAllocator& _alloc)
    : robot_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dg_msgs::RobotInfo_<ContainerAllocator>  _robot_info_type;
  _robot_info_type robot_info;





  typedef boost::shared_ptr< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStateSrvResponse_

typedef ::dg_msgs::RobotStateSrvResponse_<std::allocator<void> > RobotStateSrvResponse;

typedef boost::shared_ptr< ::dg_msgs::RobotStateSrvResponse > RobotStateSrvResponsePtr;
typedef boost::shared_ptr< ::dg_msgs::RobotStateSrvResponse const> RobotStateSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.robot_info == rhs.robot_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fd23f71870ecd30e0ef7b9251da4ebc";
  }

  static const char* value(const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fd23f71870ecd30ULL;
  static const uint64_t static_value2 = 0xe0ef7b9251da4ebcULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/RobotStateSrvResponse";
  }

  static const char* value(const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotInfo robot_info\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/RobotInfo\n"
"string robot_name\n"
"string robot_model\n"
"string state    # 机器人状态，standby（开机之后，正常状态），working（采集状态），teaching（示教），emergency（急停），exception（异常状态，有报错信息）\n"
"int32 battery_level # 0 = empty, 100 = full\n"
"int32 exception_code        # 异常码\n"
"string exception_message    # 异常信息\n"
"\n"
;
  }

  static const char* value(const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStateSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::RobotStateSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "robot_info: ";
    s << std::endl;
    Printer< ::dg_msgs::RobotInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROBOTSTATESRVRESPONSE_H
