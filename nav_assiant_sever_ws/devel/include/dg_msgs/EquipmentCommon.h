// Generated by gencpp from file dg_msgs/EquipmentCommon.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_EQUIPMENTCOMMON_H
#define DG_MSGS_MESSAGE_EQUIPMENTCOMMON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct EquipmentCommon_
{
  typedef EquipmentCommon_<ContainerAllocator> Type;

  EquipmentCommon_()
    : equipment_id(0)
    , equipment_name()
    , connected(false)
    , connected_time(0)
    , model()
    , manufacturer()  {
    }
  EquipmentCommon_(const ContainerAllocator& _alloc)
    : equipment_id(0)
    , equipment_name(_alloc)
    , connected(false)
    , connected_time(0)
    , model(_alloc)
    , manufacturer(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _equipment_id_type;
  _equipment_id_type equipment_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _equipment_name_type;
  _equipment_name_type equipment_name;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef uint64_t _connected_time_type;
  _connected_time_type connected_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_type;
  _model_type model;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _manufacturer_type;
  _manufacturer_type manufacturer;





  typedef boost::shared_ptr< ::dg_msgs::EquipmentCommon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::EquipmentCommon_<ContainerAllocator> const> ConstPtr;

}; // struct EquipmentCommon_

typedef ::dg_msgs::EquipmentCommon_<std::allocator<void> > EquipmentCommon;

typedef boost::shared_ptr< ::dg_msgs::EquipmentCommon > EquipmentCommonPtr;
typedef boost::shared_ptr< ::dg_msgs::EquipmentCommon const> EquipmentCommonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::EquipmentCommon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::EquipmentCommon_<ContainerAllocator1> & lhs, const ::dg_msgs::EquipmentCommon_<ContainerAllocator2> & rhs)
{
  return lhs.equipment_id == rhs.equipment_id &&
    lhs.equipment_name == rhs.equipment_name &&
    lhs.connected == rhs.connected &&
    lhs.connected_time == rhs.connected_time &&
    lhs.model == rhs.model &&
    lhs.manufacturer == rhs.manufacturer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::EquipmentCommon_<ContainerAllocator1> & lhs, const ::dg_msgs::EquipmentCommon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::EquipmentCommon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::EquipmentCommon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::EquipmentCommon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f069498b74d3b3fdeaf4df87eac49670";
  }

  static const char* value(const ::dg_msgs::EquipmentCommon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf069498b74d3b3fdULL;
  static const uint64_t static_value2 = 0xeaf4df87eac49670ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/EquipmentCommon";
  }

  static const char* value(const ::dg_msgs::EquipmentCommon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 equipment_id\n"
"string equipment_name\n"
"bool connected\n"
"uint64 connected_time\n"
"string model\n"
"string manufacturer\n"
;
  }

  static const char* value(const ::dg_msgs::EquipmentCommon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.equipment_id);
      stream.next(m.equipment_name);
      stream.next(m.connected);
      stream.next(m.connected_time);
      stream.next(m.model);
      stream.next(m.manufacturer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EquipmentCommon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::EquipmentCommon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::EquipmentCommon_<ContainerAllocator>& v)
  {
    s << indent << "equipment_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.equipment_id);
    s << indent << "equipment_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.equipment_name);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "connected_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.connected_time);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model);
    s << indent << "manufacturer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.manufacturer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_EQUIPMENTCOMMON_H
