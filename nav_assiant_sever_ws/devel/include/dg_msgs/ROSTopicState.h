// Generated by gencpp from file dg_msgs/ROSTopicState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROSTOPICSTATE_H
#define DG_MSGS_MESSAGE_ROSTOPICSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/MonitorState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct ROSTopicState_
{
  typedef ROSTopicState_<ContainerAllocator> Type;

  ROSTopicState_()
    : topic_name()
    , publish_node()
    , publish_rate(0.0)
    , desire_rate(0.0)
    , bandwidth(0.0)
    , state_info()  {
    }
  ROSTopicState_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , publish_node(_alloc)
    , publish_rate(0.0)
    , desire_rate(0.0)
    , bandwidth(0.0)
    , state_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_name_type;
  _topic_name_type topic_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _publish_node_type;
  _publish_node_type publish_node;

   typedef float _publish_rate_type;
  _publish_rate_type publish_rate;

   typedef float _desire_rate_type;
  _desire_rate_type desire_rate;

   typedef float _bandwidth_type;
  _bandwidth_type bandwidth;

   typedef  ::dg_msgs::MonitorState_<ContainerAllocator>  _state_info_type;
  _state_info_type state_info;





  typedef boost::shared_ptr< ::dg_msgs::ROSTopicState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::ROSTopicState_<ContainerAllocator> const> ConstPtr;

}; // struct ROSTopicState_

typedef ::dg_msgs::ROSTopicState_<std::allocator<void> > ROSTopicState;

typedef boost::shared_ptr< ::dg_msgs::ROSTopicState > ROSTopicStatePtr;
typedef boost::shared_ptr< ::dg_msgs::ROSTopicState const> ROSTopicStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::ROSTopicState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::ROSTopicState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::ROSTopicState_<ContainerAllocator1> & lhs, const ::dg_msgs::ROSTopicState_<ContainerAllocator2> & rhs)
{
  return lhs.topic_name == rhs.topic_name &&
    lhs.publish_node == rhs.publish_node &&
    lhs.publish_rate == rhs.publish_rate &&
    lhs.desire_rate == rhs.desire_rate &&
    lhs.bandwidth == rhs.bandwidth &&
    lhs.state_info == rhs.state_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::ROSTopicState_<ContainerAllocator1> & lhs, const ::dg_msgs::ROSTopicState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::ROSTopicState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::ROSTopicState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::ROSTopicState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "311695093c106b87476e31b7c6eb9105";
  }

  static const char* value(const ::dg_msgs::ROSTopicState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x311695093c106b87ULL;
  static const uint64_t static_value2 = 0x476e31b7c6eb9105ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/ROSTopicState";
  }

  static const char* value(const ::dg_msgs::ROSTopicState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ros-topic 状态\n"
"string topic_name               # 话题名\n"
"string publish_node             # 发布节点  \n"
"float32 publish_rate            # 当前发布频率\n"
"float32 desire_rate             # 期望频率\n"
"float32 bandwidth               # 当前占用网络带宽\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
;
  }

  static const char* value(const ::dg_msgs::ROSTopicState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.publish_node);
      stream.next(m.publish_rate);
      stream.next(m.desire_rate);
      stream.next(m.bandwidth);
      stream.next(m.state_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROSTopicState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::ROSTopicState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::ROSTopicState_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic_name);
    s << indent << "publish_node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.publish_node);
    s << indent << "publish_rate: ";
    Printer<float>::stream(s, indent + "  ", v.publish_rate);
    s << indent << "desire_rate: ";
    Printer<float>::stream(s, indent + "  ", v.desire_rate);
    s << indent << "bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.bandwidth);
    s << indent << "state_info: ";
    s << std::endl;
    Printer< ::dg_msgs::MonitorState_<ContainerAllocator> >::stream(s, indent + "  ", v.state_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROSTOPICSTATE_H
