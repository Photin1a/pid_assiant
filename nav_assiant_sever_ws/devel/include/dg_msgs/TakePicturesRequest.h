// Generated by gencpp from file dg_msgs/TakePicturesRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_TAKEPICTURESREQUEST_H
#define DG_MSGS_MESSAGE_TAKEPICTURESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/ImageGoal.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct TakePicturesRequest_
{
  typedef TakePicturesRequest_<ContainerAllocator> Type;

  TakePicturesRequest_()
    : goal()
    , directory()  {
    }
  TakePicturesRequest_(const ContainerAllocator& _alloc)
    : goal(_alloc)
    , directory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dg_msgs::ImageGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _directory_type;
  _directory_type directory;





  typedef boost::shared_ptr< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TakePicturesRequest_

typedef ::dg_msgs::TakePicturesRequest_<std::allocator<void> > TakePicturesRequest;

typedef boost::shared_ptr< ::dg_msgs::TakePicturesRequest > TakePicturesRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::TakePicturesRequest const> TakePicturesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::TakePicturesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::TakePicturesRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::TakePicturesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal == rhs.goal &&
    lhs.directory == rhs.directory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::TakePicturesRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::TakePicturesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39fc2278778aa20d5eea6d0820bc03d5";
  }

  static const char* value(const ::dg_msgs::TakePicturesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39fc2278778aa20dULL;
  static const uint64_t static_value2 = 0x5eea6d0820bc03d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/TakePicturesRequest";
  }

  static const char* value(const ::dg_msgs::TakePicturesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ImageGoal goal\n"
"string directory        # 图片存放目录\n"
"\n"
"================================================================================\n"
"MSG: dg_msgs/ImageGoal\n"
"string id          # ID\n"
"string number     # 设备编号\n"
"int32 types     # 拍照类型，灰度为`1`，彩色为`2`，深度为`4`，点云为`8`，多种类型时按位相与\n"
;
  }

  static const char* value(const ::dg_msgs::TakePicturesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.directory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TakePicturesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::TakePicturesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::TakePicturesRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::dg_msgs::ImageGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "directory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.directory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_TAKEPICTURESREQUEST_H
