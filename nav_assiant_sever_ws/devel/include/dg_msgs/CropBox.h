// Generated by gencpp from file dg_msgs/CropBox.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CROPBOX_H
#define DG_MSGS_MESSAGE_CROPBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct CropBox_
{
  typedef CropBox_<ContainerAllocator> Type;

  CropBox_()
    : center_()
    , R_euler()
    , extent_()  {
    }
  CropBox_(const ContainerAllocator& _alloc)
    : center_(_alloc)
    , R_euler(_alloc)
    , extent_(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _center__type;
  _center__type center_;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _R_euler_type;
  _R_euler_type R_euler;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _extent__type;
  _extent__type extent_;





  typedef boost::shared_ptr< ::dg_msgs::CropBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CropBox_<ContainerAllocator> const> ConstPtr;

}; // struct CropBox_

typedef ::dg_msgs::CropBox_<std::allocator<void> > CropBox;

typedef boost::shared_ptr< ::dg_msgs::CropBox > CropBoxPtr;
typedef boost::shared_ptr< ::dg_msgs::CropBox const> CropBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CropBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CropBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CropBox_<ContainerAllocator1> & lhs, const ::dg_msgs::CropBox_<ContainerAllocator2> & rhs)
{
  return lhs.center_ == rhs.center_ &&
    lhs.R_euler == rhs.R_euler &&
    lhs.extent_ == rhs.extent_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CropBox_<ContainerAllocator1> & lhs, const ::dg_msgs::CropBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CropBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CropBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CropBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CropBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CropBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CropBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CropBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42dde1f55fee23ccce2a80f909dd54cf";
  }

  static const char* value(const ::dg_msgs::CropBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42dde1f55fee23ccULL;
  static const uint64_t static_value2 = 0xce2a80f909dd54cfULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CropBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CropBox";
  }

  static const char* value(const ::dg_msgs::CropBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CropBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] center_\n"
"float32[] R_euler\n"
"float32[] extent_\n"
;
  }

  static const char* value(const ::dg_msgs::CropBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CropBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_);
      stream.next(m.R_euler);
      stream.next(m.extent_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CropBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CropBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CropBox_<ContainerAllocator>& v)
  {
    s << indent << "center_[]" << std::endl;
    for (size_t i = 0; i < v.center_.size(); ++i)
    {
      s << indent << "  center_[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_[i]);
    }
    s << indent << "R_euler[]" << std::endl;
    for (size_t i = 0; i < v.R_euler.size(); ++i)
    {
      s << indent << "  R_euler[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.R_euler[i]);
    }
    s << indent << "extent_[]" << std::endl;
    for (size_t i = 0; i < v.extent_.size(); ++i)
    {
      s << indent << "  extent_[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.extent_[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CROPBOX_H
