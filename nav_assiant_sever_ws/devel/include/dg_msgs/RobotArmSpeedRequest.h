// Generated by gencpp from file dg_msgs/RobotArmSpeedRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_ROBOTARMSPEEDREQUEST_H
#define DG_MSGS_MESSAGE_ROBOTARMSPEEDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct RobotArmSpeedRequest_
{
  typedef RobotArmSpeedRequest_<ContainerAllocator> Type;

  RobotArmSpeedRequest_()
    : number()
    , speed(0.0)  {
    }
  RobotArmSpeedRequest_(const ContainerAllocator& _alloc)
    : number(_alloc)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmSpeedRequest_

typedef ::dg_msgs::RobotArmSpeedRequest_<std::allocator<void> > RobotArmSpeedRequest;

typedef boost::shared_ptr< ::dg_msgs::RobotArmSpeedRequest > RobotArmSpeedRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::RobotArmSpeedRequest const> RobotArmSpeedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f87cbbb7df1f1dff8c15dbbf7381578b";
  }

  static const char* value(const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf87cbbb7df1f1dffULL;
  static const uint64_t static_value2 = 0x8c15dbbf7381578bULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/RobotArmSpeedRequest";
  }

  static const char* value(const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string number       # 设备编码\n"
"float32 speed       # 机械臂速度\n"
;
  }

  static const char* value(const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmSpeedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::RobotArmSpeedRequest_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_ROBOTARMSPEEDREQUEST_H
