// Generated by gencpp from file dg_msgs/CurrentTeachingStopLocationRequest.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_CURRENTTEACHINGSTOPLOCATIONREQUEST_H
#define DG_MSGS_MESSAGE_CURRENTTEACHINGSTOPLOCATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dg_msgs
{
template <class ContainerAllocator>
struct CurrentTeachingStopLocationRequest_
{
  typedef CurrentTeachingStopLocationRequest_<ContainerAllocator> Type;

  CurrentTeachingStopLocationRequest_()
    : sensor_type()
    , sensor_id()
    , directory()  {
    }
  CurrentTeachingStopLocationRequest_(const ContainerAllocator& _alloc)
    : sensor_type(_alloc)
    , sensor_id(_alloc)
    , directory(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_type_type;
  _sensor_type_type sensor_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _directory_type;
  _directory_type directory;





  typedef boost::shared_ptr< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentTeachingStopLocationRequest_

typedef ::dg_msgs::CurrentTeachingStopLocationRequest_<std::allocator<void> > CurrentTeachingStopLocationRequest;

typedef boost::shared_ptr< ::dg_msgs::CurrentTeachingStopLocationRequest > CurrentTeachingStopLocationRequestPtr;
typedef boost::shared_ptr< ::dg_msgs::CurrentTeachingStopLocationRequest const> CurrentTeachingStopLocationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_type == rhs.sensor_type &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.directory == rhs.directory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator1> & lhs, const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1b41ef1d526f40d3609788f17dfd3a6";
  }

  static const char* value(const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1b41ef1d526f40dULL;
  static const uint64_t static_value2 = 0x3609788f17dfd3a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/CurrentTeachingStopLocationRequest";
  }

  static const char* value(const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 示教停车点（采集点）    base_link\n"
"string sensor_type         # 雷达（lidar）、精扫相机（camera）\n"
"string sensor_id           # 雷达topic  相机分组编号\n"
"string directory           # 数据存放目录\n"
;
  }

  static const char* value(const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_type);
      stream.next(m.sensor_id);
      stream.next(m.directory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentTeachingStopLocationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::CurrentTeachingStopLocationRequest_<ContainerAllocator>& v)
  {
    s << indent << "sensor_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_type);
    s << indent << "sensor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "directory: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.directory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_CURRENTTEACHINGSTOPLOCATIONREQUEST_H
