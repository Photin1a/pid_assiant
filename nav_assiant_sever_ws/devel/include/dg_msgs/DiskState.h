// Generated by gencpp from file dg_msgs/DiskState.msg
// DO NOT EDIT!


#ifndef DG_MSGS_MESSAGE_DISKSTATE_H
#define DG_MSGS_MESSAGE_DISKSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dg_msgs/MonitorState.h>

namespace dg_msgs
{
template <class ContainerAllocator>
struct DiskState_
{
  typedef DiskState_<ContainerAllocator> Type;

  DiskState_()
    : disk_name()
    , disk_total(0.0)
    , disk_used(0.0)
    , disk_avail(0.0)
    , disk_used_percent(0.0)
    , state_info()  {
    }
  DiskState_(const ContainerAllocator& _alloc)
    : disk_name(_alloc)
    , disk_total(0.0)
    , disk_used(0.0)
    , disk_avail(0.0)
    , disk_used_percent(0.0)
    , state_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _disk_name_type;
  _disk_name_type disk_name;

   typedef float _disk_total_type;
  _disk_total_type disk_total;

   typedef float _disk_used_type;
  _disk_used_type disk_used;

   typedef float _disk_avail_type;
  _disk_avail_type disk_avail;

   typedef float _disk_used_percent_type;
  _disk_used_percent_type disk_used_percent;

   typedef  ::dg_msgs::MonitorState_<ContainerAllocator>  _state_info_type;
  _state_info_type state_info;





  typedef boost::shared_ptr< ::dg_msgs::DiskState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dg_msgs::DiskState_<ContainerAllocator> const> ConstPtr;

}; // struct DiskState_

typedef ::dg_msgs::DiskState_<std::allocator<void> > DiskState;

typedef boost::shared_ptr< ::dg_msgs::DiskState > DiskStatePtr;
typedef boost::shared_ptr< ::dg_msgs::DiskState const> DiskStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dg_msgs::DiskState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dg_msgs::DiskState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dg_msgs::DiskState_<ContainerAllocator1> & lhs, const ::dg_msgs::DiskState_<ContainerAllocator2> & rhs)
{
  return lhs.disk_name == rhs.disk_name &&
    lhs.disk_total == rhs.disk_total &&
    lhs.disk_used == rhs.disk_used &&
    lhs.disk_avail == rhs.disk_avail &&
    lhs.disk_used_percent == rhs.disk_used_percent &&
    lhs.state_info == rhs.state_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dg_msgs::DiskState_<ContainerAllocator1> & lhs, const ::dg_msgs::DiskState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dg_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::DiskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dg_msgs::DiskState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::DiskState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dg_msgs::DiskState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::DiskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dg_msgs::DiskState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dg_msgs::DiskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ae89d9226df323af7a5a7808953730a";
  }

  static const char* value(const ::dg_msgs::DiskState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ae89d9226df323aULL;
  static const uint64_t static_value2 = 0xf7a5a7808953730aULL;
};

template<class ContainerAllocator>
struct DataType< ::dg_msgs::DiskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dg_msgs/DiskState";
  }

  static const char* value(const ::dg_msgs::DiskState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dg_msgs::DiskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 硬盘状态\n"
"string disk_name            # 硬盘盘符\n"
"float32 disk_total          # 硬盘总空间 GB\n"
"float32 disk_used           # 已经使用的空间 GB\n"
"float32 disk_avail          # 剩余可用空间\n"
"float32 disk_used_percent   # 硬盘使用率\n"
"\n"
"dg_msgs/MonitorState state_info         # 状态信息\n"
"================================================================================\n"
"MSG: dg_msgs/MonitorState\n"
"# 监控状态 - 当状态正常时错误码为0\n"
"int32 error_code            # 错误码\n"
"string additional_msgs       # 附加信息\n"
;
  }

  static const char* value(const ::dg_msgs::DiskState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dg_msgs::DiskState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.disk_name);
      stream.next(m.disk_total);
      stream.next(m.disk_used);
      stream.next(m.disk_avail);
      stream.next(m.disk_used_percent);
      stream.next(m.state_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiskState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dg_msgs::DiskState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dg_msgs::DiskState_<ContainerAllocator>& v)
  {
    s << indent << "disk_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.disk_name);
    s << indent << "disk_total: ";
    Printer<float>::stream(s, indent + "  ", v.disk_total);
    s << indent << "disk_used: ";
    Printer<float>::stream(s, indent + "  ", v.disk_used);
    s << indent << "disk_avail: ";
    Printer<float>::stream(s, indent + "  ", v.disk_avail);
    s << indent << "disk_used_percent: ";
    Printer<float>::stream(s, indent + "  ", v.disk_used_percent);
    s << indent << "state_info: ";
    s << std::endl;
    Printer< ::dg_msgs::MonitorState_<ContainerAllocator> >::stream(s, indent + "  ", v.state_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DG_MSGS_MESSAGE_DISKSTATE_H
