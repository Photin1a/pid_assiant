;; Auto-generated. Do not edit!


(when (boundp 'dg_msgs::TakeAPictureGoal)
  (if (not (find-package "DG_MSGS"))
    (make-package "DG_MSGS"))
  (shadow 'TakeAPictureGoal (find-package "DG_MSGS")))
(unless (find-package "DG_MSGS::TAKEAPICTUREGOAL")
  (make-package "DG_MSGS::TAKEAPICTUREGOAL"))

(in-package "ROS")
;;//! \htmlinclude TakeAPictureGoal.msg.html


(defclass dg_msgs::TakeAPictureGoal
  :super ros::object
  :slots (_pointCloud _rgb _depth _selection ))

(defmethod dg_msgs::TakeAPictureGoal
  (:init
   (&key
    ((:pointCloud __pointCloud) "")
    ((:rgb __rgb) "")
    ((:depth __depth) "")
    ((:selection __selection) (let (r) (dotimes (i 0) (push nil r)) r))
    )
   (send-super :init)
   (setq _pointCloud (string __pointCloud))
   (setq _rgb (string __rgb))
   (setq _depth (string __depth))
   (setq _selection __selection)
   self)
  (:pointCloud
   (&optional __pointCloud)
   (if __pointCloud (setq _pointCloud __pointCloud)) _pointCloud)
  (:rgb
   (&optional __rgb)
   (if __rgb (setq _rgb __rgb)) _rgb)
  (:depth
   (&optional __depth)
   (if __depth (setq _depth __depth)) _depth)
  (:selection
   (&optional __selection)
   (if __selection (setq _selection __selection)) _selection)
  (:serialization-length
   ()
   (+
    ;; string _pointCloud
    4 (length _pointCloud)
    ;; string _rgb
    4 (length _rgb)
    ;; string _depth
    4 (length _depth)
    ;; bool[] _selection
    (* 1    (length _selection)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _pointCloud
       (write-long (length _pointCloud) s) (princ _pointCloud s)
     ;; string _rgb
       (write-long (length _rgb) s) (princ _rgb s)
     ;; string _depth
       (write-long (length _depth) s) (princ _depth s)
     ;; bool[] _selection
     (write-long (length _selection) s)
     (dotimes (i (length _selection))
       (if (elt _selection i) (write-byte -1 s) (write-byte 0 s))
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _pointCloud
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _pointCloud (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _rgb
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _rgb (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _depth
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _depth (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; bool[] _selection
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _selection (make-list n))
     (dotimes (i n)
     (setf (elt _selection i) (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
     ))
   ;;
   self)
  )

(setf (get dg_msgs::TakeAPictureGoal :md5sum-) "75a53d3d7dbe18c657bd2eb4588e1483")
(setf (get dg_msgs::TakeAPictureGoal :datatype-) "dg_msgs/TakeAPictureGoal")
(setf (get dg_msgs::TakeAPictureGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string pointCloud
string rgb
string depth
bool[] selection #按照pointCloud, rgb, depth顺序输入是否需要对应的数据

")



(provide :dg_msgs/TakeAPictureGoal "75a53d3d7dbe18c657bd2eb4588e1483")


