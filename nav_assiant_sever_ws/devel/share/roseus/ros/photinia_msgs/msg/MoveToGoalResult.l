;; Auto-generated. Do not edit!


(when (boundp 'photinia_msgs::MoveToGoalResult)
  (if (not (find-package "PHOTINIA_MSGS"))
    (make-package "PHOTINIA_MSGS"))
  (shadow 'MoveToGoalResult (find-package "PHOTINIA_MSGS")))
(unless (find-package "PHOTINIA_MSGS::MOVETOGOALRESULT")
  (make-package "PHOTINIA_MSGS::MOVETOGOALRESULT"))

(in-package "ROS")
;;//! \htmlinclude MoveToGoalResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass photinia_msgs::MoveToGoalResult
  :super ros::object
  :slots (_end_pose _brake_vel _brake_distance ))

(defmethod photinia_msgs::MoveToGoalResult
  (:init
   (&key
    ((:end_pose __end_pose) (instance geometry_msgs::PoseStamped :init))
    ((:brake_vel __brake_vel) (instance geometry_msgs::Twist :init))
    ((:brake_distance __brake_distance) 0.0)
    )
   (send-super :init)
   (setq _end_pose __end_pose)
   (setq _brake_vel __brake_vel)
   (setq _brake_distance (float __brake_distance))
   self)
  (:end_pose
   (&rest __end_pose)
   (if (keywordp (car __end_pose))
       (send* _end_pose __end_pose)
     (progn
       (if __end_pose (setq _end_pose (car __end_pose)))
       _end_pose)))
  (:brake_vel
   (&rest __brake_vel)
   (if (keywordp (car __brake_vel))
       (send* _brake_vel __brake_vel)
     (progn
       (if __brake_vel (setq _brake_vel (car __brake_vel)))
       _brake_vel)))
  (:brake_distance
   (&optional __brake_distance)
   (if __brake_distance (setq _brake_distance __brake_distance)) _brake_distance)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _end_pose
    (send _end_pose :serialization-length)
    ;; geometry_msgs/Twist _brake_vel
    (send _brake_vel :serialization-length)
    ;; float64 _brake_distance
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _end_pose
       (send _end_pose :serialize s)
     ;; geometry_msgs/Twist _brake_vel
       (send _brake_vel :serialize s)
     ;; float64 _brake_distance
       (sys::poke _brake_distance (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _end_pose
     (send _end_pose :deserialize buf ptr-) (incf ptr- (send _end_pose :serialization-length))
   ;; geometry_msgs/Twist _brake_vel
     (send _brake_vel :deserialize buf ptr-) (incf ptr- (send _brake_vel :serialization-length))
   ;; float64 _brake_distance
     (setq _brake_distance (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get photinia_msgs::MoveToGoalResult :md5sum-) "78586fd898f457ab4d343b41f256bc3e")
(setf (get photinia_msgs::MoveToGoalResult :datatype-) "photinia_msgs/MoveToGoalResult")
(setf (get photinia_msgs::MoveToGoalResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# 结果
geometry_msgs/PoseStamped end_pose
geometry_msgs/Twist brake_vel
float64 brake_distance

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :photinia_msgs/MoveToGoalResult "78586fd898f457ab4d343b41f256bc3e")


