// Auto-generated. Do not edit!

// (in-package dg_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class TakeAPictureGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.pointCloud = null;
      this.rgb = null;
      this.depth = null;
      this.selection = null;
    }
    else {
      if (initObj.hasOwnProperty('pointCloud')) {
        this.pointCloud = initObj.pointCloud
      }
      else {
        this.pointCloud = '';
      }
      if (initObj.hasOwnProperty('rgb')) {
        this.rgb = initObj.rgb
      }
      else {
        this.rgb = '';
      }
      if (initObj.hasOwnProperty('depth')) {
        this.depth = initObj.depth
      }
      else {
        this.depth = '';
      }
      if (initObj.hasOwnProperty('selection')) {
        this.selection = initObj.selection
      }
      else {
        this.selection = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TakeAPictureGoal
    // Serialize message field [pointCloud]
    bufferOffset = _serializer.string(obj.pointCloud, buffer, bufferOffset);
    // Serialize message field [rgb]
    bufferOffset = _serializer.string(obj.rgb, buffer, bufferOffset);
    // Serialize message field [depth]
    bufferOffset = _serializer.string(obj.depth, buffer, bufferOffset);
    // Serialize message field [selection]
    bufferOffset = _arraySerializer.bool(obj.selection, buffer, bufferOffset, null);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TakeAPictureGoal
    let len;
    let data = new TakeAPictureGoal(null);
    // Deserialize message field [pointCloud]
    data.pointCloud = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [rgb]
    data.rgb = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [depth]
    data.depth = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [selection]
    data.selection = _arrayDeserializer.bool(buffer, bufferOffset, null)
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.pointCloud.length;
    length += object.rgb.length;
    length += object.depth.length;
    length += object.selection.length;
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'dg_msgs/TakeAPictureGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '75a53d3d7dbe18c657bd2eb4588e1483';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    string pointCloud
    string rgb
    string depth
    bool[] selection #按照pointCloud, rgb, depth顺序输入是否需要对应的数据
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TakeAPictureGoal(null);
    if (msg.pointCloud !== undefined) {
      resolved.pointCloud = msg.pointCloud;
    }
    else {
      resolved.pointCloud = ''
    }

    if (msg.rgb !== undefined) {
      resolved.rgb = msg.rgb;
    }
    else {
      resolved.rgb = ''
    }

    if (msg.depth !== undefined) {
      resolved.depth = msg.depth;
    }
    else {
      resolved.depth = ''
    }

    if (msg.selection !== undefined) {
      resolved.selection = msg.selection;
    }
    else {
      resolved.selection = []
    }

    return resolved;
    }
};

module.exports = TakeAPictureGoal;
